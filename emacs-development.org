#+Title: Emacs Development
#+Author: Zhenhua Wang
#+auto_tangle: t
#+PROPERTY: header-args+ :tangle "yes"

* Header
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

* IDE
** LSP
*** lsp-mode
  #+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb

(use-package lsp-mode
  :commands (lsp lsp-org)
  :hook
  ;; (python-mode . lsp-deferred)
  ;; (c++-mode . lsp-deferred)
  ;; (ess-r-mode . lsp-deferred)
  ((latex-mode LaTeX-mode) . lsp-deferred)
  (lsp-mode . disable-lsp-imenu-in-ess-r)
  :init
  (setq lsp-auto-guess-root t
	lsp-keep-workspace-alive nil
        lsp-modeline-code-actions-enable nil
        lsp-modeline-diagnostics-enable nil
        lsp-modeline-workspace-status-enable nil
        lsp-headerline-breadcrumb-enable nil
        lsp-signature-render-documentation nil

        lsp-enable-file-watchers nil
        lsp-enable-folding nil
        lsp-enable-text-document-color nil

        lsp-enable-indentation nil
        lsp-enable-on-type-formatting nil)
  :config
  (defun lsp-update-server ()
    "Update LSP server."
    (interactive)
    ;; Equals to `C-u M-x lsp-install-server'
    (lsp-install-server t))
  ;; disable imenu for ess-r-mode
  (defun disable-lsp-imenu-in-ess-r ()
    (if (featurep 'ess-r-mode)
        (setq-local lsp-enable-imenu nil))))

;; microsoft pyright
(use-package lsp-pyright
  :after lsp-mode)
  #+end_src

*** eglot
#+begin_src emacs-lisp
;; note enable eglot would override "M-." key to xref
(use-package eglot
  :commands (eglot)
  :config
  (setq eglot-stay-out-of '(flymake imenu)
	eglot-autoshutdown t)
  (add-to-list 'eglot-server-programs '((tex-mode context-mode texinfo-mode bibtex-mode) .
					("texlab"))))
#+end_src

*** hooks
#+begin_src emacs-lisp
(add-hook 'python-mode-hook (lambda ()
			      (if (file-remote-p default-directory)
				  (eglot-ensure)
				(lsp-deferred))))
(add-hook 'c++-mode-hook (lambda ()
			   (if (file-remote-p default-directory)
			       (eglot-ensure)
			     (lsp-deferred))))
(add-hook 'ess-r-mode-hook (lambda ()
			     (if (file-remote-p default-directory)
				 (eglot-ensure)
			       (lsp-deferred))))
#+end_src

** Syntax checking
#+begin_src emacs-lisp
;; check code syntax
(use-package flycheck
  :commands (flycheck)
  :init (setq flycheck-emacs-lisp-load-path 'inherit
              ;; Only check while saving and opening files
              flycheck-check-syntax-automatically '(save mode-enabled)))

(use-package flycheck-popup-tip
  :hook (flycheck-mode . flycheck-popup-tip-mode))

(add-hook 'prog-mode-hook (lambda ()
			    (if (file-remote-p default-directory)
				;; use flymake in tramp
				(flymake-mode)
			      (flycheck-mode))))
#+end_src

** Debug
  #+begin_src emacs-lisp
(defun zw/load-dap-mode ()
  (interactive)
  (require 'zw-dap-mode))
  #+end_src

** Tree sitter
#+begin_src emacs-lisp
(use-package tree-sitter
  :diminish
  :hook (after-init . global-tree-sitter-mode))

(use-package tree-sitter-langs
  :hook (tree-sitter-after-on . tree-sitter-hl-mode))
#+end_src

** Highlight indent

   #+begin_src emacs-lisp
(use-package highlight-indent-guides
  :disabled
  :hook ((prog-mode . highlight-indent-guides-mode))
  :custom
  (highlight-indent-guides-method 'character))
   #+end_src
   
** Clean whitespace
   #+begin_src emacs-lisp
(use-package ws-butler
  :hook
  (prog-mode . ws-butler-mode))
   #+end_src

** Fast comment
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

* Programming Language
** R
#+begin_src emacs-lisp
(use-package ess
  :defer t
  :commands R
  :hook
  (inferior-ess-r-mode . my/ess-fix-read-only-inferior-ess-mode)
  :bind (:map ess-r-mode-map
	      ("M-<tab>" . ess-complete-object-name))
  :config
  (require 'ess-site)
  ;; "Fixes a bug when `comint-prompt-read-only' in non-nil.
    ;; See https://github.com/emacs-ess/ESS/issues/300"
  (defun my/ess-fix-read-only-inferior-ess-mode ()
    (setq-local comint-use-prompt-regexp nil)
    (setq-local inhibit-field-text-motion nil))
  ;; fix freezing in macos by creating your process using pipe
  ;; https://emacs.stackexchange.com/questions/40603/process-input-seems-buggy-in-emacs-on-os-x
  ;; (setq process-connection-type nil)
  (setq ess-ask-for-ess-directory nil
	ess-nuke-trailing-whitespace-p t
	ess-style 'DEFAULT
	ess-local-process-name "R"
	ess-use-company nil
	ess-use-flymake nil
	ess-eval-visibly-p 'nowait
	ess-R-font-lock-keywords
	'((ess-R-fl-keyword:keywords   . t)
	  (ess-R-fl-keyword:constants  . t)
	  (ess-R-fl-keyword:modifiers  . t)
	  (ess-R-fl-keyword:fun-defs   . t)
	  (ess-R-fl-keyword:assign-ops . t)
	  (ess-R-fl-keyword:%op%       . t)
	  (ess-fl-keyword:fun-calls    . t)
	  (ess-fl-keyword:delimiters . t)
	  (ess-fl-keyword:operators . t)
	  (ess-fl-keyword:numbers . t)
	  (ess-R-fl-keyword:F&T . t)
	  (ess-fl-keyword:= . t))))

(use-package ess-smart-equals
  :after (:any ess-r-mode inferior-ess-r-mode ess-r-transcript-mode)
  :hook ((ess-r-mode . ess-smart-equals-mode)
         (inferior-ess-r-mode . ess-smart-equals-mode)
         (ess-r-transcript-mode . ess-smart-equals-mode)
         (ess-roxy-mode . ess-smart-equals-mode))
  :config
  (setq ess-smart-equals-padding-left 'one-space)
  (setq ess-smart-equals-padding-right 'no-space))
#+end_src

** Python
*** Pyvenv
In order for =pyvenv= to find the envirment in anaconda, you need to first properly initialize it. For example, you may run ~conda install pip~ and conda would figured out some necessary pacakges it need.
#+begin_src emacs-lisp
(use-package pyvenv
  :hook ((after-init . pyvenv-mode))
  :config
  (setenv "WORKON_HOME" (concat (exec-path-from-shell-copy-env "CONDA_PREFIX") "/envs"))
  ;; restart python when the virtual environment changes
  (add-hook 'pyvenv-post-activate-hooks #'pyvenv-restart-python))
#+end_src

** Web
#+begin_src emacs-lisp
;; Web
(use-package web-mode
  :mode
  (("\\.phtml\\'" . web-mode)
  ("\\.tpl\\.php\\'" . web-mode)
  ("\\.jsp\\'" . web-mode)
  ("\\.as[cp]x\\'" . web-mode)
  ("\\.erb\\'" . web-mode)
  ("\\.mustache\\'" . web-mode)
  ("\\.djhtml\\'" . web-mode)
  ("\\.jst.ejs\\'" . web-mode)
  ("\\.html?\\'" . web-mode))
  :init
  (setq web-mode-enable-block-face t)
  (setq web-mode-enable-comment-keywords t)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-script-padding 2)
  (setq web-mode-style-padding 2)
  (setq web-mode-comment-style 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-markup-indent-offset 2))

;; CSS
(setq css-indent-level 2)
(setq css-indent-offset 2)
#+end_src

* Data
*** CSV mode
#+begin_src emacs-lisp
(use-package csv-mode
  :mode
  ("\\.[Cc][Ss][Vv]\\'". csv-mode)
  :hook
  (csv-mode . csv-align-mode)
  :config
  (setq csv-separators '("," ";" "|" " ")))
#+end_src

* Version control
#+begin_src emacs-lisp
(use-package magit
  :ensure with-editor
  :bind ("C-M-;" . magit-status)
  :commands (magit-status magit-get-current-branch)
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package magit-todos
  :hook (magit-mode . magit-todos-mode))
#+end_src

* Project management
** Projectile
+ Supported Project Types
  - Directories that contain the special .projectile file

  - Directories under version control (e.g. a Git repo)

  - Directories that contain some project description file (e.g. a Gemfile for Ruby projects or pom.xml for Java maven-based projects)
#+begin_src emacs-lisp
(use-package projectile
  :hook (after-init . projectile-mode)
  :bind-keymap
  ("C-c p" . projectile-command-map))
#+end_src
