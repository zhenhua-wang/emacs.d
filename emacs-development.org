#+Title: Emacs Development
#+Author: Zhenhua Wang
#+auto_tangle: t
#+PROPERTY: header-args+ :tangle "yes"

* Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :defer 1
  :bind
  ;; ("M-<tab>" . yas-insert-snippet)
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/yasnippet"))
  ;; (add-to-list 'company-backends 'company-yasnippet)
  (yas-global-mode 1))
#+end_src

* LSP

  #+begin_src emacs-lisp
(use-package lsp-mode
  :custom
  (lsp:se-completion-provider? :none) ;; we use Corfu!
  :init
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (defun my/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(flex))) ;; Configure flex
  :hook
  (lsp-completion-mode . my/lsp-mode-setup-completion)
  :commands lsp
  :config
  (setq lsp-log-io nil)
  (setq lsp-ui-sideline-enable t)
  (setq lsp-ui-sideline-show-hover t)
  (setq lsp-ui-doc-show-with-cursor nil)
  (setq lsp-ui-doc-position 'bottom)
  (setq lsp-ui-imenu-auto-refresh t))

;; optionally
(use-package lsp-ui
  :after lsp
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (lsp-ui-doc-show))

(use-package lsp-ivy
  :disabled
  :commands lsp-ivy-workspace-symbol)

;; Debug Adapter Protocol
(use-package dap-mode
  :disabled)
  #+end_src

  #+RESULTS:

* Eglot

#+begin_src emacs-lisp
(use-package eglot
  :disabled)
  ;; :hook
  ;; (python-mode . eglot-ensure)
  ;; (ess-r-mode . eglot-ensure))
#+end_src

* R
  
#+begin_src emacs-lisp
(use-package ess
  :defer t
  :commands R
  :custom
  (ess-ask-for-ess-directory nil)
  (ess-style 'RStudio-)
  (ess-use-company nil)
  :config
  (require 'ess-site))
#+end_src

* Polymode
The idea is to run poly-R/markdown within the markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode
  ;;:ensure auctex
  :commands (markdown-mode gfm-mode)
  ;; :mode (("README\\.md\\'" . gfm-mode)
  ;;        ("\\.md\\'" . markdown-mode)
  ;;        ("\\.markdown\\'" . markdown-mode)
  ;;        ("\\.Rmd\\'" . markdown-mode))
  ;; :init (setq markdown-command "multimarkdown")
  :custom
  (markdown-fontify-code-blocks-natively t)
  (markdown-header-scaling t)
  (markdown-enable-math t)
  :config
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'markdown-mode-hook 'adaptive-wrap-prefix-mode)
  )
#+end_src

Here are the polys
#+begin_src emacs-lisp
(use-package polymode
  :commands polymode-mode)

(use-package adaptive-wrap)

(use-package poly-markdown
  :commands (poly-markdown-mode poly-gfm-mode)
  :mode (("\\.md$" . poly-gfm-mode)
         ("\\.rmd$" . poly-gfm-mode)
         ("\\.markdown$" . poly-markdown-mode)))

(use-package poly-noweb
  :commands poly-noweb-mode)

(use-package poly-R
  :mode (("\\.Rmd" . poly-markdown+r-mode)
         ("\\.rmd" . poly-markdown+r-mode)
         ("\\.Rnw" . poly-noweb+r-mode)
         ("\\.rnw" . poly-noweb+r-mode)
         ))
#+end_src

#+RESULTS:

* Python
** python-mode
#+begin_src emacs-lisp
;; (use-package python-mode
;;   :custom
;;   (python-shell-interpreter "~/anaconda3/bin/python")
;;   :config
;;   (setq python-shell-completion-native-enable nil)        ; disable native completion  
;;   )
#+end_src

In order for =pyvenv= to find the envirment in anaconda, you need to first properly initialize it. For example, you may run ~conda install pip~ and conda would figured out some necessary pacakges it need.
#+begin_src emacs-lisp
(use-package pyvenv
  :hook ((python-mode . pyvenv-mode))
  :config
  (pcase system-type
    ('gnu/linux
     (setenv "WORKON_HOME" (concat (getenv "CONDA_PREFIX") "/envs")))
    ('darwin
     (setenv "WORKON_HOME" "/usr/local/anaconda3/envs")))
  (pyvenv-mode 1))
#+end_src

I actually find ~company-jedi~ to be better than ~lsp-mode~ for me.First of all, ~company-jedi~ can work in ~python-mode~, ~org-babel~ and ~EIN~, though it might be litte tedius in ~org-babel~. However, ~lsp-mode~ is totally not working in ~EIN~ (jupyter notebooks). Secondly, ~company-jedi~ is easier to use when you need to switch between python vitual envs. Simply by:
+ ~pyvenv-workon~ pick your current env,
+ ~jedi:stop-server~ restart your jedi server. (sometimes you may need to you ~jedi:stop-all-servers~)

  On the other hand, in ~lsp-mode~, you need to kill the server and then restart it (Maybe I didn't find the correct way to do so). 

#+begin_src emacs-lisp
(use-package company-jedi
  :disabled
  ;; :hook (python-mode . jedi:setup) ; dont use this, since we want to use jedi in org-babel
  :config
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)
  (setq jedi:use-shortcuts t)
  (setq python-shell-completion-native-enable nil)
  (defun config/enable-company-jedi ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'config/enable-company-jedi)
  )
#+end_src

** EIN
#+begin_src emacs-lisp
(use-package ein
  :disabled
  :init
  (require 'ein-jupyter)
  :custom
  (ein:polymode t)
  (ein:output-area-inlined-images t)
  (ein:slice-image t))
#+end_src

* Web
** Web mode
#+begin_src emacs-lisp
(use-package web-mode
  :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
  :config
  (setq-default web-mode-code-indent-offset 2)
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-attribute-indent-offset 2))
#+end_src
** Impatience mode

1. Enable the web server provided by simple-httpd: ~M-x httpd-start~
2. Publish buffers by enabling the minor mode impatient-mode. ~M-x impatient-mode~
3. And then point your browser to http://localhost:8080/imp/, select a buffer, and watch your changes appear as you type!

#+begin_src emacs-lisp
;; (use-package impatient-mode
;;   :ensure simple-httpd
;;   :ensure htmlize
;;   :config
;;   (require 'impatient-mode))
#+end_src

* Data
** CSV mode
#+begin_src emacs-lisp
(use-package csv-mode
  :mode
  ("\\.[Cc][Ss][Vv]\\'". csv-mode)
  :hook
  (csv-mode . csv-align-mode)
  :config
  (setq csv-separators '("," ";" "|" " ")))
#+end_src

* Utils
** git
#+begin_src emacs-lisp
(use-package magit
  :ensure with-editor
  :bind ("C-M-;" . magit-status)
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package magit-todos
  :defer t)
#+end_src

** other packages
#+begin_src emacs-lisp
;; add comment to your codes
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))

;; theme
(use-package all-the-icons-ibuffer
  :init (all-the-icons-ibuffer-mode 1))

(use-package highlight-indent-guides
  :hook ((prog-mode . highlight-indent-guides-mode))
  :custom
  (highlight-indent-guides-method 'character))

;; Automatically clean whitespace
(use-package ws-butler
  :disabled
  :hook ((text-mode . ws-butler-mode)
         (prog-mode . ws-butler-mode)))
#+end_src
