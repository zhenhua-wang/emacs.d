#+Title: Emacs Development
#+Author: Zhenhua Wang
#+auto_tangle: t
#+PROPERTY: header-args+ :tangle "yes"
-----
* Header
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

* IDE
** LSP
*** lsp-mode
  #+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb

(use-package lsp-mode
  :commands (lsp lsp-org)
  :hook
  ;; (python-mode . lsp-deferred)
  ;; (c++-mode . lsp-deferred)
  ;; (ess-r-mode . lsp-deferred)
  ;; ((latex-mode LaTeX-mode) . lsp-deferred)
  ((ess-r-mode latex-mode LaTeX-mode) . disable-lsp-imenu)
  (lsp-completion-mode . my/lsp-mode-setup-completion)
  :init
  (setq lsp-auto-guess-root t
        lsp-keep-workspace-alive nil
        lsp-modeline-code-actions-enable nil
        lsp-modeline-diagnostics-enable nil
        lsp-modeline-workspace-status-enable nil
        lsp-headerline-breadcrumb-enable nil
        lsp-signature-render-documentation nil

        lsp-enable-file-watchers nil
        lsp-enable-folding nil
        lsp-enable-text-document-color nil

        lsp-enable-indentation nil
        lsp-enable-on-type-formatting nil

        lsp-completion-provider :none
        lsp-tex-server 'digestif)
  (defun my/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless)))
  :config
  (defun lsp-update-server ()
    "Update LSP server."
    (interactive)
    ;; Equals to `C-u M-x lsp-install-server'
    (lsp-install-server t))
  ;; BUG: disable imenu for ess-r-mode https://github.com/REditorSupport/languageserver/issues/558
  (defun disable-lsp-imenu ()
    (if (featurep 'lsp-mode)
        (setq-local lsp-enable-imenu nil))))

;; microsoft pyright
(use-package lsp-pyright
  :after lsp-mode)
  #+end_src

*** lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :custom-face
  (lsp-ui-sideline-code-action ((t (:inherit warning))))
  :bind ((:map lsp-ui-mode-map
               ("s-<return>" . lsp-ui-sideline-apply-code-actions)
               ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
               ([remap xref-find-references] . lsp-ui-peek-find-references))
         (:map lsp-ui-doc-mode-map
               ("s-d" . lsp-ui-doc-glance)))
  :hook (lsp-mode . lsp-ui-mode)
  :init
  (setq lsp-ui-peek-always-show t
        lsp-ui-sideline-show-diagnostics nil
        lsp-ui-sideline-ignore-duplicate t
        lsp-ui-sideline-show-code-actions nil
        lsp-ui-doc-show-with-cursor nil
        lsp-ui-doc-show-with-mouse nil
        lsp-ui-doc-position 'top
        lsp-ui-doc-delay 0.1)
  ;; Set correct color to borders
  (defun my-lsp-ui-doc-set-border ()
    "Set the border color of lsp doc."
    (setq lsp-ui-doc-border
          (if (facep 'posframe-border)
              (face-background 'posframe-border nil t)
            (face-foreground 'shadow nil t))))
  (my-lsp-ui-doc-set-border)
  (add-hook 'after-load-theme-hook #'my-lsp-ui-doc-set-border t)
  :config
  ;; use posframe to show peek
  (defun lsp-ui-peek--peek-display (src1 src2)
    (-let* ((win-width (frame-width))
            (lsp-ui-peek-list-width (/ (frame-width) 2))
            (string (-some--> (-zip-fill "" src1 src2)
                      (--map (lsp-ui-peek--adjust win-width it) it)
                      (-map-indexed 'lsp-ui-peek--make-line it)
                      (-concat it (lsp-ui-peek--make-footer))))
            )
      (setq lsp-ui-peek--buffer (get-buffer-create " *lsp-peek--buffer*"))
      (posframe-show lsp-ui-peek--buffer
                     :string (mapconcat 'identity string "")
                     :min-width (frame-width)
                     :poshandler #'posframe-poshandler-frame-center
                     :override-parameters '((tab-bar-mode . 0)
                                            (tab-bar-format . nil)
                                            (tab-line-format . nil)
                                            (tab-bar-lines . 0)
                                            (tab-bar-lines-keep-state . 0)))))
  (defun lsp-ui-peek--peek-destroy ()
    (when (bufferp lsp-ui-peek--buffer)
      (posframe-delete lsp-ui-peek--buffer))
    (setq lsp-ui-peek--buffer nil
          lsp-ui-peek--last-xref nil)
    (set-window-start (get-buffer-window) lsp-ui-peek--win-start))
  (advice-add #'lsp-ui-peek--peek-new :override #'lsp-ui-peek--peek-display)
  (advice-add #'lsp-ui-peek--peek-hide :override #'lsp-ui-peek--peek-destroy))
#+end_src

*** eglot
#+begin_src emacs-lisp
;; note enable eglot would override "M-." key to xref
(use-package eglot
  :commands (eglot)
  :config
  (setq eglot-stay-out-of '(flymake imenu)
        eglot-autoshutdown t)
  (setq-default eglot-workspace-configuration
                '((:pyright . ((useLibraryCodeForTypes . t))))))
#+end_src

*** hooks
#+begin_src emacs-lisp
;; use lsp-mode in local and eglot in remote
(dolist (mode '(python-mode-hook
                c++-mode-hook c-mode-hook
                latex-mode-hook LaTeX-mode-hook))
  (add-hook mode (lambda ()
                   (if (file-remote-p default-directory)
                       (eglot-ensure)
                     (lsp)))))
;; disable lsp in the following modes
(dolist (mode '(ess-r-mode-hook))
  (add-hook mode (lambda ()
                   (when (not (file-remote-p default-directory))
                     (lsp)))))
#+end_src

** Tree sitter
#+begin_src emacs-lisp
(use-package tree-sitter
  :diminish
  :hook (after-init . global-tree-sitter-mode))

(use-package tree-sitter-langs
  :hook (tree-sitter-after-on . tree-sitter-hl-mode))
#+end_src

** Code reference 
#+begin_src emacs-lisp
(use-package xref
  :straight (:type built-in)
  :init
  (when (executable-find "rg")
    (setq xref-search-program 'ripgrep))
  :config
  (setq xref-prompt-for-identifier '(not xref-find-definitions
                                         xref-find-definitions-other-window
                                         xref-find-definitions-other-frame
                                         xref-find-references)))
#+end_src

** Clean whitespace
   #+begin_src emacs-lisp
(use-package ws-butler
  :hook
  (prog-mode . ws-butler-mode))
   #+end_src

** Fast comment
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind (("M-/" . evilnc-comment-or-uncomment-lines)))
#+end_src

** Topsy
#+begin_src emacs-lisp
(use-package topsy
  :straight (topsy :host github :repo "alphapapa/topsy.el")
  :commands (topsy-mode)
  :bind (("C-c d t" . topsy-mode))
  :config
  (set-face-attribute 'header-line nil
                      :box (face-background 'highlight))
  (defun zw/topsy--beginning-of-defun-at-cursor ()
    "Return the line moved to by `beginning-of-defun'."
    (save-excursion
      (when (beginning-of-defun)
        (font-lock-ensure (point) (point-at-eol))
        (buffer-substring (point) (point-at-eol)))))
  (advice-add #'topsy--beginning-of-defun :override
              #'zw/topsy--beginning-of-defun-at-cursor))
#+end_src

** Flycheck
#+begin_src emacs-lisp
;; check code syntax
(use-package flycheck
  :commands (flycheck)
  :init (setq flycheck-emacs-lisp-load-path 'inherit
              ;; Only check while saving and opening files
              flycheck-check-syntax-automatically '(save mode-enabled)))

(use-package flycheck-posframe
  :after flycheck
  :hook (flycheck-mode . flycheck-posframe-mode)
  :config
  ;; turn off tab bar
  (defun zw/flycheck-posframe-show-posframe (errors)
    "Display ERRORS, using posframe.el library."
    (posframe-hide flycheck-posframe-buffer)
    (when (and errors
               (not (run-hook-with-args-until-success 'flycheck-posframe-inhibit-functions)))
      (let ((poshandler (intern (format "posframe-poshandler-%s" flycheck-posframe-position))))
        (unless (functionp poshandler)
          (setq poshandler nil))
        (flycheck-posframe-check-position)
        (posframe-show
         flycheck-posframe-buffer
         :string (flycheck-posframe-format-errors errors)
         :background-color (face-background 'flycheck-posframe-background-face nil t)
         :position (point)
         :internal-border-width flycheck-posframe-border-width
         :internal-border-color (face-foreground (if flycheck-posframe-border-use-error-face
						     (flycheck-posframe-highest-error-level-face errors)
						   'flycheck-posframe-border-face) nil t)
         :poshandler poshandler
         :hidehandler #'flycheck-posframe-hidehandler
         :override-parameters '((tab-bar-mode . 0)
                                (tab-bar-format . nil)
                                (tab-line-format . nil)
                                (tab-bar-lines . 0)
                                (tab-bar-lines-keep-state . 0))))))
  (advice-add #'flycheck-posframe-show-posframe
              :override #'zw/flycheck-posframe-show-posframe))

(add-hook 'prog-mode (lambda ()
                       (when (not (file-remote-p default-directory))
                         (flycheck-mode))))
#+end_src

** Version control
#+begin_src emacs-lisp
(use-package magit
  :ensure with-editor
  :bind (("C-M-;" . magit-status))
  :commands (magit-status magit-get-current-branch)
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package magit-todos
  :hook (magit-mode . magit-todos-mode))
#+end_src

* Language
** R
#+begin_src emacs-lisp
(use-package ess
  :defer t
  :commands R
  :hook
  (inferior-ess-r-mode . my/ess-fix-read-only-inferior-ess-mode)
  :bind ((:map ess-r-mode-map
              ("C-c c e" . ess-complete-object-name))
         (:map inferior-ess-r-mode-map
              ("s-q" . zw/close-shell)))
  :config
  (require 'ess-site)
  ;; "Fixes a bug when `comint-prompt-read-only' in non-nil.
    ;; See https://github.com/emacs-ess/ESS/issues/300"
  (defun my/ess-fix-read-only-inferior-ess-mode ()
    (setq-local comint-use-prompt-regexp nil)
    (setq-local inhibit-field-text-motion nil))
  ;; fix freezing in macos by creating your process using pipe
  ;; https://emacs.stackexchange.com/questions/40603/process-input-seems-buggy-in-emacs-on-os-x
  ;; (setq process-connection-type nil)
  (setq ess-ask-for-ess-directory nil
        ess-nuke-trailing-whitespace-p t
        ess-style 'DEFAULT
        ess-local-process-name "R"
        ess-use-company nil
        ess-use-flymake nil
        ess-eval-visibly-p 'nowait
        ess-R-font-lock-keywords
        '((ess-R-fl-keyword:keywords   . t)
          (ess-R-fl-keyword:constants  . t)
          (ess-R-fl-keyword:modifiers  . t)
          (ess-R-fl-keyword:fun-defs   . t)
          (ess-R-fl-keyword:assign-ops . t)
          (ess-R-fl-keyword:%op%       . t)
          (ess-fl-keyword:fun-calls    . t)
          (ess-fl-keyword:delimiters . t)
          (ess-fl-keyword:operators . t)
          (ess-fl-keyword:numbers . t)
          (ess-R-fl-keyword:F&T . t)
          (ess-fl-keyword:= . t))))

(use-package ess-smart-equals
  :after (:any ess-r-mode inferior-ess-r-mode ess-r-transcript-mode)
  :hook ((ess-r-mode . ess-smart-equals-mode)
         (inferior-ess-r-mode . ess-smart-equals-mode)
         (ess-r-transcript-mode . ess-smart-equals-mode)
         (ess-roxy-mode . ess-smart-equals-mode))
  :config
  (setq ess-smart-equals-padding-left 'one-space)
  (setq ess-smart-equals-padding-right 'no-space))
#+end_src

** Python
#+begin_src emacs-lisp
(add-hook 'inferior-python-mode-hook
          (lambda ()
            (bind-keys :map inferior-python-mode-map
                       ("s-q" . zw/close-shell))))

(use-package conda
  :after python
  :config
  (or (cl-loop for dir in (list conda-anaconda-home
                                "~/.anaconda"
                                "~/.miniconda"
                                "~/.miniconda3"
                                "~/.miniforge3"
                                "~/anaconda3"
                                "~/miniconda3"
                                "~/miniforge3"
                                "~/opt/miniconda3"
                                "/usr/bin/anaconda3"
                                "/usr/local/anaconda3"
                                "/usr/local/miniconda3"
                                "/usr/local/Caskroom/miniconda/base"
                                "~/.conda")
               if (file-directory-p dir)
               return (setq conda-anaconda-home (expand-file-name dir)
                            conda-env-home-directory (expand-file-name dir)))
      (message "Cannot find Anaconda installation"))

  ;; integration with term/eshell
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell)
  ;; add to modeline
  (add-to-list 'mode-line-misc-info
               '(conda-env-current-name
                 ("[CONDA:" conda-env-current-name "]"))
               'append))
#+end_src

** Web
#+begin_src emacs-lisp
;; Web
(use-package web-mode
  :mode
  (("\\.phtml\\'" . web-mode)
  ("\\.tpl\\.php\\'" . web-mode)
  ("\\.jsp\\'" . web-mode)
  ("\\.as[cp]x\\'" . web-mode)
  ("\\.erb\\'" . web-mode)
  ("\\.mustache\\'" . web-mode)
  ("\\.djhtml\\'" . web-mode)
  ("\\.jst.ejs\\'" . web-mode)
  ("\\.html?\\'" . web-mode))
  :init
  (setq web-mode-enable-block-face t)
  (setq web-mode-enable-comment-keywords t)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-script-padding 2)
  (setq web-mode-style-padding 2)
  (setq web-mode-comment-style 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-markup-indent-offset 2))

;; CSS
(setq css-indent-level 2)
(setq css-indent-offset 2)
#+end_src

* Data
** CSV mode
#+begin_src emacs-lisp
(use-package csv-mode
  :mode
  ("\\.[Cc][Ss][Vv]\\'". csv-mode)
  :hook
  (csv-mode . csv-align-mode)
  :config
  (setq csv-separators '("," ";" "|" " ")))
#+end_src
