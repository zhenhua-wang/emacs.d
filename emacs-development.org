#+Title: Emacs Development
#+Author: Zhenhua Wang
#+auto_tangle: t
#+PROPERTY: header-args+ :tangle "yes"
-----
* Header
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

* IDE
** LSP
*** lsp-mode
  #+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb

(use-package lsp-mode
  :commands (lsp lsp-org)
  :hook
  ;; (python-mode . lsp-deferred)
  ;; (c++-mode . lsp-deferred)
  ;; (ess-r-mode . lsp-deferred)
  ;; ((latex-mode LaTeX-mode) . lsp-deferred)
  (lsp-mode . disable-lsp-imenu-in-ess-r)
  :init
  (setq lsp-auto-guess-root t
	lsp-keep-workspace-alive nil
        lsp-modeline-code-actions-enable nil
        lsp-modeline-diagnostics-enable nil
        lsp-modeline-workspace-status-enable nil
        lsp-headerline-breadcrumb-enable nil
        lsp-signature-render-documentation nil

        lsp-enable-file-watchers nil
        lsp-enable-folding nil
        lsp-enable-text-document-color nil

        lsp-enable-indentation nil
        lsp-enable-on-type-formatting nil)
  :config
  (defun lsp-update-server ()
    "Update LSP server."
    (interactive)
    ;; Equals to `C-u M-x lsp-install-server'
    (lsp-install-server t))
  ;; BUG: disable imenu for ess-r-mode https://github.com/REditorSupport/languageserver/issues/558
  (defun disable-lsp-imenu-in-ess-r ()
    (if (featurep 'ess-r-mode)
        (setq-local lsp-enable-imenu nil))))

;; microsoft pyright
(use-package lsp-pyright
  :after lsp-mode)
  #+end_src

*** lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :custom-face
  (lsp-ui-sideline-code-action ((t (:inherit warning))))
  :bind ((:map lsp-ui-mode-map
               ("s-<return>" . lsp-ui-sideline-apply-code-actions)
               ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
               ([remap xref-find-references] . lsp-ui-peek-find-references))
         (:map lsp-ui-doc-mode
               ("C-c d g" . lsp-ui-doc-glance)))
  :hook (lsp-mode . lsp-ui-mode)
  :init
  (setq lsp-ui-peek-always-show t
	lsp-ui-sideline-show-diagnostics nil
        lsp-ui-sideline-ignore-duplicate t
	lsp-ui-sideline-show-code-actions nil
	lsp-ui-doc-show-with-cursor nil
	lsp-ui-doc-show-with-mouse t
	lsp-ui-doc-position 'top
        lsp-ui-doc-delay 0.1)
  ;; Set correct color to borders
  (defun my-lsp-ui-doc-set-border ()
    "Set the border color of lsp doc."
    (setq lsp-ui-doc-border
          (if (facep 'posframe-border)
              (face-background 'posframe-border nil t)
            (face-foreground 'shadow nil t))))
  (my-lsp-ui-doc-set-border)
  (add-hook 'after-load-theme-hook #'my-lsp-ui-doc-set-border t)
  :config
  (defun lsp-ui-peek--peek-display (src1 src2)
    (-let* ((win-width (frame-width))
            (lsp-ui-peek-list-width (/ (frame-width) 2))
            (string (-some--> (-zip-fill "" src1 src2)
                      (--map (lsp-ui-peek--adjust win-width it) it)
                      (-map-indexed 'lsp-ui-peek--make-line it)
                      (-concat it (lsp-ui-peek--make-footer))))
            )
      (setq lsp-ui-peek--buffer (get-buffer-create " *lsp-peek--buffer*"))
      (posframe-show lsp-ui-peek--buffer
                     :string (mapconcat 'identity string "")
                     :min-width (frame-width)
                     :poshandler #'posframe-poshandler-frame-center
		     :override-parameters '((tab-bar-mode . 0)
					    (tab-bar-format . nil)
					    (tab-line-format . nil)
					    (tab-bar-lines . 0)
					    (tab-bar-lines-keep-state . 0)))))

  (defun lsp-ui-peek--peek-destroy ()
    (when (bufferp lsp-ui-peek--buffer)
      (posframe-delete lsp-ui-peek--buffer))
    (setq lsp-ui-peek--buffer nil
          lsp-ui-peek--last-xref nil)
    (set-window-start (get-buffer-window) lsp-ui-peek--win-start))

  (advice-add #'lsp-ui-peek--peek-new :override #'lsp-ui-peek--peek-display)
  (advice-add #'lsp-ui-peek--peek-hide :override #'lsp-ui-peek--peek-destroy)
  
  ;; Handle docs
  (defun my-lsp-ui-doc--handle-hr-lines nil
    (let (bolp next before after)
      (goto-char 1)
      (while (setq next (next-single-property-change (or next 1) 'markdown-hr))
        (when (get-text-property next 'markdown-hr)
          (goto-char next)
          (setq bolp (bolp)
                before (char-before))
          (delete-region (point) (save-excursion (forward-visible-line 1) (point)))
          (setq after (char-after (1+ (point))))
          (insert
           (concat
            (and bolp (not (equal before ?\n)) (propertize "\n" 'face '(:height 0.5)))
            (propertize "\n" 'face '(:height 0.5))
            (propertize " "
                        ;; :align-to is added with lsp-ui-doc--fix-hr-props
                        'display '(space :height (1))
                        'lsp-ui-doc--replace-hr t
                        'face `(:background ,(face-foreground 'font-lock-comment-face)))
            ;; :align-to is added here too
            (propertize " " 'display '(space :height (1)))
            (and (not (equal after ?\n)) (propertize " \n" 'face '(:height 0.5)))))))))
  (advice-add #'lsp-ui-doc--handle-hr-lines :override #'my-lsp-ui-doc--handle-hr-lines))
#+end_src

*** eglot
#+begin_src emacs-lisp
;; note enable eglot would override "M-." key to xref
(use-package eglot
  :commands (eglot)
  :config
  (setq eglot-stay-out-of '(flymake imenu)
	eglot-autoshutdown t)
  (add-to-list 'eglot-server-programs '((tex-mode context-mode texinfo-mode bibtex-mode) .
					("texlab")))
  (setq-default eglot-workspace-configuration
		'((:pyright . ((useLibraryCodeForTypes . t)))))
  ;; Bridge projectile and project together so packages that depend on project
  ;; like eglot work
  (defun my-projectile-project-find-function (dir)
    (let ((root (projectile-project-root dir)))
      (and root (cons 'transient root))))
  (with-eval-after-load 'project
    (add-to-list 'project-find-functions 'my-projectile-project-find-function)))
#+end_src

*** hooks
#+begin_src emacs-lisp
;; use lsp-mode in local and eglot in remote
(dolist (mode '(python-mode-hook
		c++-mode-hook c-mode-hook
		latex-mode-hook LaTeX-mode-hook))
  (add-hook mode (lambda ()
		   (if (file-remote-p default-directory)
		       (eglot-ensure)
		     (lsp-deferred)))))
;; disable lsp in the following modes
(dolist (mode '(ess-r-mode-hook))
  (add-hook mode (lambda ()
		   (when (not (file-remote-p default-directory))
		     (lsp-deferred)))))
#+end_src

** Debug
  #+begin_src emacs-lisp
(defun zw/load-dap-mode ()
  (interactive)
  (require 'zw-dap-mode))
  #+end_src

** Tree sitter
#+begin_src emacs-lisp
(use-package tree-sitter
  :diminish
  :hook (after-init . global-tree-sitter-mode))

(use-package tree-sitter-langs
  :hook (tree-sitter-after-on . tree-sitter-hl-mode))
#+end_src

** Code reference 
#+begin_src emacs-lisp
(use-package xref
  :straight (:type built-in)
  :init
  (when (executable-find "rg")
    (setq xref-search-program 'ripgrep))
  :config
  (setq xref-prompt-for-identifier '(not xref-find-definitions
                                         xref-find-definitions-other-window
                                         xref-find-definitions-other-frame
					 xref-find-references)))
#+end_src

** Highlight indent
   #+begin_src emacs-lisp
(use-package highlight-indent-guides
  :hook ((prog-mode . highlight-indent-guides-mode))
  :init
  (setq highlight-indent-guides-method 'character
        highlight-indent-guides-responsive t
        highlight-indent-guides-auto-character-face-perc 50
        highlight-indent-guides-auto-top-character-face-perc 100))
   #+end_src
   
** Clean whitespace
   #+begin_src emacs-lisp
(use-package ws-butler
  :hook
  (prog-mode . ws-butler-mode))
   #+end_src

** Fast comment
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Flycheck
#+begin_src emacs-lisp
;; check code syntax
(use-package flycheck
  :commands (flycheck)
  :init (setq flycheck-emacs-lisp-load-path 'inherit
              ;; Only check while saving and opening files
              flycheck-check-syntax-automatically '(save mode-enabled)))

(use-package flycheck-posframe
  :custom-face
  (flycheck-posframe-face ((t (:foreground ,(face-foreground 'success)))))
  (flycheck-posframe-info-face ((t (:foreground ,(face-foreground 'success)))))
  (flycheck-posframe-background-face ((t (:inherit tooltip))))
  (flycheck-posframe-border-face ((t (:inherit posframe-border))))
  :hook (flycheck-mode . flycheck-posframe-mode)
  :init
  (setq flycheck-posframe-border-width 1)
  (add-hook 'flycheck-posframe-inhibit-functions
            (lambda (&rest _) (bound-and-true-p company-backend)))
  :config
  (with-no-warnings
    ;; HACK: Add paddings to the child frame.
    ;; @see https://github.com/alexmurray/flycheck-posframe/issues/28
    (defun my-flycheck-posframe-show-posframe (errors)
      "Display ERRORS, using posframe.el library."
      (posframe-hide flycheck-posframe-buffer)
      (when (and errors
                 (not (run-hook-with-args-until-success 'flycheck-posframe-inhibit-functions)))
        (let ((poshandler (intern (format "posframe-poshandler-%s" flycheck-posframe-position)))
              (str (flycheck-posframe-format-errors errors)))
          (unless (functionp poshandler)
            (setq poshandler nil))
          (flycheck-posframe-check-position)
          (posframe-show
           flycheck-posframe-buffer
           :string (concat (propertize "\n" 'face '(:height 0.3))
                           str
                           (propertize "\n\n" 'face '(:height 0.3)))
           :background-color (face-background 'flycheck-posframe-background-face nil t)
           :position (point)
           :left-fringe 8
           :right-fringe 8
           :max-width (round (* (frame-width) 0.62))
           :max-height (round (* (frame-height) 0.62))
           :internal-border-width flycheck-posframe-border-width
           :internal-border-color (face-background 'flycheck-posframe-border-face nil t)
           :poshandler poshandler
           :hidehandler #'flycheck-posframe-hidehandler
           :override-parameters '((tab-bar-mode . 0)
				  (tab-bar-format . nil)
				  (tab-line-format . nil)
				  (tab-bar-lines . 0)
				  (tab-bar-lines-keep-state . 0))))))
    (advice-add #'flycheck-posframe-show-posframe :override #'my-flycheck-posframe-show-posframe))

  ;; fix-flycheck-posframe-not-hide-immediately
  (defun flycheck-posframe-monitor-post-command ()
    (when (not (flycheck-posframe-check-position))
      (posframe-hide flycheck-posframe-buffer)))

  (defun fix-flycheck-posframe-not-hide-immediately ()
    (cond (flycheck-posframe-mode
           (add-hook 'post-command-hook 'flycheck-posframe-monitor-post-command nil t))
          ((not flycheck-posframe-mode)
           (remove-hook 'post-command-hook 'flycheck-posframe-monitor-post-command t))))
  (add-hook 'flycheck-posframe-mode-hook #'fix-flycheck-posframe-not-hide-immediately))

(add-hook 'prog-mode-hook (lambda ()
			    (when (not (file-remote-p default-directory))
			      (flycheck-mode))))
#+end_src

** Projectile
+ Supported Project Types
  - Directories that contain the special .projectile file

  - Directories under version control (e.g. a Git repo)

  - Directories that contain some project description file (e.g. a Gemfile for Ruby projects or pom.xml for Java maven-based projects)
#+begin_src emacs-lisp
(use-package projectile
  :hook (after-init . projectile-mode)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (setq projectile-sort-order 'recentf
	projectile-file-exists-remote-cache-expire nil))
#+end_src

** Neotrees
#+begin_src emacs-lisp
(use-package neotree
  :commands (neotree neotree-project-dir)
  :hook
  (neo-after-create . (lambda (_)
			(with-current-buffer (get-buffer neo-buffer-name)
			  (setq truncate-lines t)
			  (setq word-wrap nil)
			  (make-local-variable 'auto-hscroll-mode)
			  (setq auto-hscroll-mode nil))))
  (neotree-mode . (lambda ()
		    (setq zw/neotree-mode-line-format
			  '("%e" (:eval (doom-modeline-segment--bar))
			    "  Neotree"))
		    (setq-local mode-line-format zw/neotree-mode-line-format)))
  :init
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  :config
  (defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
		(neotree-dir project-dir)
		(neotree-find file-name)))
	(message "Could not find git project root.")))))
#+end_src

** Version control
#+begin_src emacs-lisp
(use-package magit
  :ensure with-editor
  :bind ("C-M-;" . magit-status)
  :commands (magit-status magit-get-current-branch)
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package magit-todos
  :hook (magit-mode . magit-todos-mode))
#+end_src

* Language
** C/C++
#+begin_src emacs-lisp
(use-package cc-mode
  :bind (:map c-mode-base-map
              ("C-c C-c" . compile))
  :hook (c-mode-common . (lambda () (c-set-style "stroustrup")))
  :init (setq-default c-basic-offset 4)
  :config
  (defvar compile-guess-command-table
    '((c-mode       . "gcc -Wall -g %s -o %s -lm")
      (c++-mode     . "g++ -Wall %s -o %s -std=c++14")))
  (defun compile-guess-command ()
    (let ((command-for-mode (cdr (assq major-mode
                                       compile-guess-command-table))))
      (if (and command-for-mode
               (stringp buffer-file-name))
          (let* ((file-name (file-name-nondirectory buffer-file-name))
		 (file-name-sans-suffix (if (and (string-match "\\.[^.]*\\'"
                                                               file-name)
						 (> (match-beginning 0) 0))
                                            (substring file-name
                                                       0 (match-beginning 0))
                                          nil)))
            (if file-name-sans-suffix
		(progn
                  (make-local-variable 'compile-command)
                  (setq compile-command
			(if (stringp command-for-mode)
                            ;; Optimize the common case.
                            (format command-for-mode
                                    file-name file-name-sans-suffix)
                          (funcall command-for-mode
                                   file-name file-name-sans-suffix)))
                  compile-command)
              nil))
	nil)))
  ;; Add the appropriate mode hooks.
  (add-hook 'c-mode-hook       (function compile-guess-command))
  (add-hook 'c++-mode-hook     (function compile-guess-command)))
#+end_src

** R
#+begin_src emacs-lisp
(use-package ess
  :defer t
  :commands R
  :hook
  (inferior-ess-r-mode . my/ess-fix-read-only-inferior-ess-mode)
  :bind (:map ess-r-mode-map
	      ("M-<tab>" . ess-complete-object-name))
  :config
  (require 'ess-site)
  ;; "Fixes a bug when `comint-prompt-read-only' in non-nil.
    ;; See https://github.com/emacs-ess/ESS/issues/300"
  (defun my/ess-fix-read-only-inferior-ess-mode ()
    (setq-local comint-use-prompt-regexp nil)
    (setq-local inhibit-field-text-motion nil))
  ;; fix freezing in macos by creating your process using pipe
  ;; https://emacs.stackexchange.com/questions/40603/process-input-seems-buggy-in-emacs-on-os-x
  ;; (setq process-connection-type nil)
  (setq ess-ask-for-ess-directory nil
	ess-nuke-trailing-whitespace-p t
	ess-style 'DEFAULT
	ess-local-process-name "R"
	ess-use-company nil
	ess-use-flymake nil
	ess-eval-visibly-p 'nowait
	ess-R-font-lock-keywords
	'((ess-R-fl-keyword:keywords   . t)
	  (ess-R-fl-keyword:constants  . t)
	  (ess-R-fl-keyword:modifiers  . t)
	  (ess-R-fl-keyword:fun-defs   . t)
	  (ess-R-fl-keyword:assign-ops . t)
	  (ess-R-fl-keyword:%op%       . t)
	  (ess-fl-keyword:fun-calls    . t)
	  (ess-fl-keyword:delimiters . t)
	  (ess-fl-keyword:operators . t)
	  (ess-fl-keyword:numbers . t)
	  (ess-R-fl-keyword:F&T . t)
	  (ess-fl-keyword:= . t))))

(use-package ess-smart-equals
  :after (:any ess-r-mode inferior-ess-r-mode ess-r-transcript-mode)
  :hook ((ess-r-mode . ess-smart-equals-mode)
         (inferior-ess-r-mode . ess-smart-equals-mode)
         (ess-r-transcript-mode . ess-smart-equals-mode)
         (ess-roxy-mode . ess-smart-equals-mode))
  :config
  (setq ess-smart-equals-padding-left 'one-space)
  (setq ess-smart-equals-padding-right 'no-space))
#+end_src

** Python
*** Pyvenv
In order for =pyvenv= to find the envirment in anaconda, you need to first properly initialize it. For example, you may run ~conda install pip~ and conda would figured out some necessary pacakges it need.
#+begin_src emacs-lisp
(use-package pyvenv
  :hook ((after-init . pyvenv-mode))
  :config
  (setenv "WORKON_HOME" (concat (exec-path-from-shell-copy-env "CONDA_PREFIX") "/envs"))
  ;; restart python when the virtual environment changes
  (add-hook 'pyvenv-post-activate-hooks #'pyvenv-restart-python))
#+end_src

** Web
#+begin_src emacs-lisp
;; Web
(use-package web-mode
  :mode
  (("\\.phtml\\'" . web-mode)
  ("\\.tpl\\.php\\'" . web-mode)
  ("\\.jsp\\'" . web-mode)
  ("\\.as[cp]x\\'" . web-mode)
  ("\\.erb\\'" . web-mode)
  ("\\.mustache\\'" . web-mode)
  ("\\.djhtml\\'" . web-mode)
  ("\\.jst.ejs\\'" . web-mode)
  ("\\.html?\\'" . web-mode))
  :init
  (setq web-mode-enable-block-face t)
  (setq web-mode-enable-comment-keywords t)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-script-padding 2)
  (setq web-mode-style-padding 2)
  (setq web-mode-comment-style 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-markup-indent-offset 2))

;; CSS
(setq css-indent-level 2)
(setq css-indent-offset 2)
#+end_src

* Data
*** CSV mode
#+begin_src emacs-lisp
(use-package csv-mode
  :mode
  ("\\.[Cc][Ss][Vv]\\'". csv-mode)
  :hook
  (csv-mode . csv-align-mode)
  :config
  (setq csv-separators '("," ";" "|" " ")))
#+end_src
