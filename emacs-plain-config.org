#+Title: Emacs Configuration
#+AUTHOR: Zhenhua Wang
#+auto_tangle: t
#+PROPERTY: header-args+ :tangle "yes"
--------------
* Startup
** Keep .emacs.d Clean
Again, steal from [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org][Daviwil's config]].

#+begin_src emacs-lisp
;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering
  :if (or (eq system-type 'gnu/linux) (eq system-type 'darwin)))

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src

* General Emacs Settings
  
key bindings in minibuffer will over the ones in major buffer. For example, in EXWM I defined ~s-<tab>~ to be ~switch-to-buffer~. Then, in the ivy's minibuffer, I overwrite ~s-<tab>~ to be navigate through the items in ivy.

My key binding strategy:
+ super key is used for exwm/frame/window/buffer level commands
+ super key is also used for some MacOS keys
+ ctrl key is used for tab level commands
+ ctrl+x prefix is used for emacs' default commands
+ ctrl+c prefix is used for custom commands

#+begin_src emacs-lisp
(use-package emacs
  :custom
  ;; completion
  (completion-cycle-threshold nil)
  (tab-always-indent 'complete)
  (completions-detailed t)
  (completion-ignore-case t)
  ;; Revert Dired and other buffers
  (global-auto-revert-non-file-buffers t)
  ;; Use spaces instead of tabs for indentation
  (indent-tabs-mode nil)
  ;; echo area show only 1 line of doc
  (eldoc-echo-area-use-multiline-p nil)
  ;; fix minibuffer size
  (resize-mini-windows nil)
  :init
  ;; ------------------- simplify yes no ---------------
  (defun yes-or-no-p->-y-or-n-p (orig-fun &rest r)
    (cl-letf (((symbol-function 'yes-or-no-p) #'y-or-n-p))
      (apply orig-fun r)))
  (advice-add 'kill-buffer :around #'yes-or-no-p->-y-or-n-p)
  ;; ------------------- modes    ---------------------
  (global-visual-line-mode 1)
  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
  ;; hightlight current row
  (global-hl-line-mode 1)
  ;; ------------------- key bind ---------------------
  ;; Keybonds
  (global-set-key (kbd "s-z") 'undo)
  (global-set-key (kbd "s-x") 'kill-region)
  (global-set-key (kbd "s-c") 'kill-ring-save)
  (global-set-key (kbd "s-v") 'yank)
  (global-set-key (kbd "s-a") 'mark-whole-buffer)
  (global-set-key (kbd "s-s") 'save-buffer)
  (global-set-key (kbd "s-l") 'goto-line)
  (global-set-key (kbd "s-q") 'kill-current-buffer)
  ;; vterm
  (global-set-key (kbd "s-e") 'vterm)
  ;; eldoc
  ;; (global-set-key (kbd "s-d") 'eldoc-doc-buffer)
  ;; winner undo/redo
  (global-set-key (kbd "s-u") 'winner-undo)
  (global-set-key (kbd "s-U") 'winner-redo)
  ;; projectile find file
  (global-set-key (kbd "s-p") 'counsel-projectile-switch-project)
  ;; Make ESC quit prompts
  ;; (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "<escape>") (kbd "C-g"))
  ;; window operations
  (global-set-key (kbd "s-w") 'delete-window)
  (global-set-key (kbd "s-t") 'split-window-sensibly-prefer-horizontal)
  (global-set-key [s-left] 'windmove-left)          ; move to left window
  (global-set-key [s-right] 'windmove-right)        ; move to right window
  (global-set-key [s-up] 'windmove-up)              ; move to upper window
  (global-set-key [s-down] 'windmove-down)          ; move to lower window
  ;; check dict
  (global-set-key (kbd "C-c w") 'wordnut-search)
  (global-set-key (kbd "C-c W") 'wordnut-lookup-current-word)
  ;; toggle transparency
  (global-set-key (kbd "C-c t") 'zw/toggle-transparency)
  ;; get passwed
  ;; (global-set-key (kbd "C-c p") 'zw/get-passwd)
  ;; toggle input
  (global-set-key (kbd "C-\\") 'toggle-input-method)
  ;; consistent with EXWM
  (pcase system-type
    ('darwin
     (progn
       (setq mac-command-modifier 'super)
       (setq mac-option-modifier 'meta)))))
#+end_src

#+RESULTS:

* Org-mode
** Main
#+begin_src emacs-lisp
(use-package org
  :straight (:type built-in)
  :mode (("\\.org$" . org-mode))
  :bind (:map org-mode-map
	      ("C-c =" . nil)
	      ("C-," . nil))
  :hook
  (org-mode . variable-pitch-mode)
  (org-mode . visual-line-mode)
  ((org-babel-after-execute org-mode) . org-redisplay-inline-images)
  :config
  (setq
   org-ellipsis " â–¾"
   org-pretty-entities nil
   org-hide-emphasis-markers t
   org-src-fontify-natively t
   org-fontify-quote-and-verse-blocks t
   org-edit-src-content-indentation 2
   ;; preview latex, etc at startup
   org-startup-folded  t;;'content
   org-confirm-babel-evaluate nil
   org-src-preserve-indentation t    ; helps to indent python code in org mode
   org-src-tab-acts-natively t
   org-src-strip-leading-and-trailing-blank-lines t
   ;; show edit buffer below the current window, keeping all
   org-src-window-setup 'split-window-below
   ;; use user defined image size
   org-image-actual-width nil)
  ;; make LaTeX-mode formula larger
  (pcase system-type
    ((or 'gnu/linux 'windows-nt 'cygwin)
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.4)))
    ('darwin
     (progn
       (setq org-format-latex-options (plist-put org-format-latex-options :scale 2))
       (setq org-latex-create-formula-image-program 'dvisvgm))))

  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "orange red" :weight bold))
          ("DONE" . (:foreground "green" :weight bold))))

  ;; latex '(latex script entities)
  (setq org-highlight-latex-and-related '(latex entities)))
#+end_src

** Org-babel
#+begin_src emacs-lisp
;; set org babel languages
(with-eval-after-load 'org
  ;; defer load org babel languages
  (require 'ob-teximg)
  (use-package ob-lisp
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:lisp))
  (use-package ob-latex
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:latex))
  (use-package ob-R
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:R))
  (use-package ob-python
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:python))
  (use-package ob-shell
    :defer t
    :straight (:type built-in)
    :commands
    (org-babel-execute:sh
     org-babel-expand-body:sh))

  ;; alias ess-r to R
  (defalias 'org-babel-execute:ess-r 'org-babel-execute:R)
  (defalias 'org-babel-ess-r-initiate-session
    'org-babel-R-initiate-session)
  
  ;; This is needed as of Org 9.2 (use yasnippet instead)
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("la" . "src latex"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python :session :file lsp-src.py"))
  (add-to-list 'org-structure-template-alist '("pyo" . "src python :session :results output :file lsp-src.py"))
  (add-to-list 'org-structure-template-alist '("pyp" . "src python :session :results file"))
  
  ;; enable lsp-org inside src block
  (cl-defmacro lsp-org-babel-enable (lang)
    "Support LANG in org source code block."
    (setq centaur-lsp 'lsp-mode)
    (cl-check-type lang stringp)
    (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
           (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
      `(progn
	 (defun ,intern-pre (info)
           (let ((file-name (->> info caddr (alist-get :file))))
             (unless file-name
               (setq file-name (make-temp-file "babel-lsp-")))
             (setq buffer-file-name file-name)
             (lsp-deferred)))
	 (put ',intern-pre 'function-documentation
              (format "Enable lsp-mode in the buffer of org source block (%s)."
                      (upcase ,lang)))
	 (if (fboundp ',edit-pre)
             (advice-add ',edit-pre :after ',intern-pre)
           (progn
             (defun ,edit-pre (info)
               (,intern-pre info))
             (put ',edit-pre 'function-documentation
                  (format "Prepare local buffer environment for org source block (%s)."
                          (upcase ,lang))))))))
  (defvar org-babel-lang-list
    '("ess-r" "R" "python"))
  (dolist (lang org-babel-lang-list)
    (eval `(lsp-org-babel-enable ,lang))))
#+end_src

** Org-theme
#+begin_src emacs-lisp
(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (defun org-modern--block-fringe () nil))

;; Auto-show Markup Symbols
(use-package org-appear
  :hook (org-mode . org-appear-mode))
#+end_src

** Org-auto-tangle
   #+begin_src emacs-lisp
;; auto tangle
(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
   #+end_src
   
** Custom functions
#+begin_src emacs-lisp
(defun zw/org-fold-all-but-current ()
  (interactive)
  (org-remove-occur-highlights)
  (org-overview)
  (org-reveal))

(defun zw/toggle-image-scroll ()
  (interactive)
  (pixel-scroll-mode))
#+end_src

* Completion
#+begin_src emacs-lisp
(require 'zw-corfu)
(require 'zw-ivy)
#+end_src

* Test
** lsp-mode
  #+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb

(use-package lsp-mode
  :commands (lsp lsp-org)
  :hook
  (python-mode . lsp-deferred)
  (c++-mode . lsp-deferred)
  (ess-r-mode . lsp-deferred)
  ((latex-mode LaTeX-mode) . lsp-deferred)
  (lsp-mode . disable-lsp-imenu-in-ess-r)
  :init
  (setq lsp-keep-workspace-alive nil
        lsp-modeline-code-actions-enable nil
        lsp-modeline-diagnostics-enable nil
        lsp-modeline-workspace-status-enable nil
        lsp-headerline-breadcrumb-enable nil
        lsp-signature-render-documentation nil

        lsp-enable-file-watchers nil
        lsp-enable-folding nil
        lsp-enable-text-document-color nil

        lsp-enable-indentation nil
        lsp-enable-on-type-formatting nil))
  #+end_src

** R
#+begin_src emacs-lisp
(use-package ess
  :defer t
  :commands R
  :bind (:map ess-r-mode-map
	      ("M-<tab>" . ess-complete-object-name))
  :config
  (require 'ess-site)
  ;; fix freezing in macos by creating your process using pipe
  ;; https://emacs.stackexchange.com/questions/40603/process-input-seems-buggy-in-emacs-on-os-x
  ;; (setq process-connection-type nil)
  (setq ess-ask-for-ess-directory nil
	ess-style 'RStudio
	ess-local-process-name "R"
	ansi-color-for-comint-mode 'filter
	comint-scroll-to-bottom-on-input t
	comint-scroll-to-bottom-on-output t
	ess-use-company nil
	ess-use-flymake nil
	comint-move-point-for-output t
	ess-eval-visibly-p 'nowait
	ess-R-font-lock-keywords
	'((ess-R-fl-keyword:keywords   . t)
	  (ess-R-fl-keyword:constants  . t)
	  (ess-R-fl-keyword:modifiers  . t)
	  (ess-R-fl-keyword:fun-defs   . t)
	  (ess-R-fl-keyword:assign-ops . t)
	  (ess-R-fl-keyword:%op%       . t)
	  (ess-fl-keyword:fun-calls    . t)
	  (ess-fl-keyword:delimiters . t)
	  (ess-fl-keyword:operators . t)
	  (ess-fl-keyword:numbers . t)
	  (ess-R-fl-keyword:F&T . t)
	  (ess-fl-keyword:= . t))))
#+end_src

** Polymode
#+begin_src emacs-lisp
(use-package polymode
  :commands polymode-mode
  :init
  ;; disable this for now because of reverse-typing issue in poly-R
  (setq polymode-lsp-integration nil))

(use-package poly-markdown
  :commands (poly-markdown-mode poly-gfm-mode)
  :mode
  ("\\.md$" . poly-gfm-mode))

(use-package poly-R
  :commands (poly-markdown+r-mode)
  :mode
  ("\\.[rR]md\\'" . poly-gfm+r-mode))
#+end_src

** Flycheck
#+begin_src emacs-lisp
;; check code syntax
(use-package flycheck
  :commands (flycheck)
  :init (setq flycheck-emacs-lisp-load-path 'inherit
              ;; Only check while saving and opening files
              flycheck-check-syntax-automatically '(save mode-enabled)))

(use-package flycheck-popup-tip
  :hook (flycheck-mode . flycheck-popup-tip-mode)
  :config
  (custom-set-variables
   '(flycheck-popup-tip-error-prefix "- ")))

(add-hook 'prog-mode-hook (lambda ()
			    (when (not (file-remote-p default-directory))
			      (flycheck-mode))))
#+end_src
