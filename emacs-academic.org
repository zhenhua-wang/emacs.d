#+Title: Academic
#+Author: Zhenhua Wang
#+auto_tangle: t
#+PROPERTY: header-args+ :tangle "yes"

* Org-mode
** Main
#+begin_src emacs-lisp
(use-package org
  :hook
  (org-mode . variable-pitch-mode)
  (org-mode . visual-line-mode)
  (org-mode . turn-on-org-cdlatex)
  :bind (:map org-mode-map
              ("<C-tab>" . cdlatex-tab)) ;; just to be consistent with cdlatex mode
  :config
  (setq
   org-ellipsis " ▾"
   org-pretty-entities t
   org-hide-emphasis-markers t
   org-src-fontify-natively t
   org-fontify-quote-and-verse-blocks t
   org-edit-src-content-indentation 2
   ;; preview latex, etc at startup
   org-startup-folded  t;;'content
   org-confirm-babel-evaluate nil
   org-src-preserve-indentation t    ; helps to indent python code in org mode
   org-src-tab-acts-natively t
   org-src-strip-leading-and-trailing-blank-lines t
   ;; show edit buffer below the current window, keeping all
   org-src-window-setup 'split-window-below
   ;; use user defined image size
   org-image-actual-width nil)
  ;; make LaTeX-mode formula larger
  (pcase system-type
    ((or 'gnu/linux 'windows-nt 'cygwin)
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.4)))
    ('darwin
     (progn
       (setq org-format-latex-options (plist-put org-format-latex-options :scale 2))
       (setq org-latex-create-formula-image-program 'dvisvgm))))

  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "orange red" :weight bold))
          ("DONE" . (:foreground "green" :weight bold))))

  ;; set org babel languages
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (R . t)
       (shell . t)
       (lisp . t)
       (latex . t)
       (teximg . t)))
    
    ;; This is needed as of Org 9.2 (use yasnippet instead)
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("la" . "src latex"))
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python :session"))
    (add-to-list 'org-structure-template-alist '("pyo" . "src python :session :results output"))
    (add-to-list 'org-structure-template-alist '("pyp" . "src python :session :results file")))
  
  ;; latex
  (setq org-highlight-latex-and-related '(latex script entities))
  ;; export to latex
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)

  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
  )
#+end_src

#+RESULTS:
: cdlatex-tab

** Beautify org mode
*** by packages

#+begin_src emacs-lisp
(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (defun org-modern--block-fringe () nil))


(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

;; Auto-show Markup Symbols
(use-package org-appear
  :hook (org-mode . org-appear-mode))
#+end_src

*** by setting

#+begin_src emacs-lisp
;; Replace list hyphen with dot
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

(let* (
       (variable-tuple (list ':font zw/font-title))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

  (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1 :italic t :foreground "#FF8C94" :slant italic))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25 :foreground "#D08770"))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.50 :foreground "#88C0D0"))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75 :foreground "#5E81AC"))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline t))))))

(custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))
   '(org-latex-and-related ((t (:foreground "#EBCB8B"))))
   ;; hight code blocks
   '(org-block-begin-line ((t (:background "#4C566A" :foreground "#bfbfbf"
                                           :bold t :height 1.0))))
   '(org-block-end-line ((t (:background "#4C566A" :foreground "#bfbfbf"
                                         :bold t :height 1.0)))))

;; (setq  org-src-block-faces '(("emacs-lisp" (:background "LightCyan1" :extend t))
;; 			     ("python" (:background "DarkSeaGreen1" :extend t))
;; 			     ("R" (:background "thistle1" :extend t))))
#+end_src

#+RESULTS:

** Org-auto-tangle

   #+begin_src emacs-lisp
;; auto tangle
(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
   #+end_src
   
** Custom functions
#+begin_src emacs-lisp
(defun zw/org-fold-all-but-current ()
  (interactive)
  (org-remove-occur-highlights)
  (org-overview)
  (org-reveal))

(defun zw/toggle-image-scroll ()
  (interactive)
  (pixel-scroll-mode)
  )

;; teximg
(require 'ob-teximg)
#+end_src

* Latex

LSP-mode with TexLab works perfect for Latex docs

  - =brew install texlab=
  
#+begin_src emacs-lisp
;; latex
(use-package auctex
  :bind (:map TeX-mode-map ("M-n e" . TeX-command-master))
  :config
  (setq
   Tex-PDF-mode t
   TeX-parse-self t
   TeX-auto-save t
   Tex-command-show "LaTex"
   TeX-view-program-selection '((output-pdf "PDF Tools"))
   TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
   TeX-save-query nil)
  ;; revert the PDF-buffer after the TeX compilation has finished
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  (add-hook 'TeX-mode-hook 'flyspell-mode))

(use-package cdlatex
  :bind (:map cdlatex-mode-map
              ;; ("TAB" . indent-for-tab-command)
              ;; ("<C-tab>" . cdlatex-tab)
              ;; turn off auto pairing
              ("$" . nil)
              ("`" . nil)
              ("{" . nil)
              ("[" . nil))
  :hook
  (LaTeX-mode . turn-on-cdlatex)
  (latex-mode . turn-on-cdlatex)
  (markdown-mode . turn-on-cdlatex))

(use-package reftex  
  :hook
  (LaTeX-mode . turn-on-reftex)
  (latex-mode . turn-on-reftex)
  (markdown-mode . turn-on-reftex)
  :custom
  (reftex-plug-into-AUCTeX t)
  (reftex-toc-split-windows-horizontally t)
  (reftex-toc-split-windows-fraction 0.2))

;; auto async preview latex
(use-package xenops
  :hook
  (latex-mode . xenops-mode)
  (LaTeX-mode . xenops-mode)
  :config
  (setq xenops-reveal-on-entry nil))
#+end_src

* Bibliography
** Org-ref

#+begin_src emacs-lisp
;; keys for bib
(global-set-key (kbd "H-p") 'ivy-bibtex)
(global-set-key (kbd "H-o") 'zw/org-ref-bibtex-hydra/body)
(setq research-folder "~/Workspace/OneDrive - University of Missouri/Research")
(use-package ivy-bibtex
  :defer t
  :init
  (setq bibtex-completion-bibliography (expand-file-name "privacy.bib" research-folder)
	bibtex-completion-library-path (expand-file-name "pdfs/" research-folder)
	bibtex-completion-additional-search-fields '(keywords)
	bibtex-completion-display-formats
	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	bibtex-completion-pdf-open-function
	(lambda (fpath)
	  (call-process "open" nil 0 nil fpath))))

(use-package org-ref
  :init
  (require 'bibtex)
  (require 'org-ref-ivy)
  (require 'org-ref-arxiv)
  (setq org-ref-pdf-directory (expand-file-name "pdfs/" research-folder)
	bibtex-autokey-year-length 4
	bibtex-autokey-name-year-separator "-"
	bibtex-autokey-year-title-separator "-"
	bibtex-autokey-titleword-separator "-"
	bibtex-autokey-titlewords 2
	bibtex-autokey-titlewords-stretch 1
	bibtex-autokey-titleword-length 5))

(use-package org-ref-ivy
  :ensure nil
  :init (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
	      org-ref-insert-cite-function 'org-ref-cite-insert-ivy
	      org-ref-insert-label-function 'org-ref-insert-label-link
	      org-ref-insert-ref-function 'org-ref-insert-ref-link
	      org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body))))
#+end_src

** Org-ref hydra
#+begin_src emacs-lisp
(defhydra zw/org-ref-bibtex-hydra (:color blue :hint nil)
  "Bibtex actions:
"
  ;; Open-like actions
  ("p" org-ref-open-bibtex-pdf "PDF" :column "Open")
  ("n" org-ref-open-bibtex-notes "Notes" :column "Open")
  ("b" org-ref-open-in-browser "URL" :column "Open")

  ;; edit/modify
  ("K" (lambda ()
         (interactive)
         (org-ref-set-bibtex-keywords
          (read-string "Keywords: "
                       (bibtex-autokey-get-field "keywords"))
          t))
   "Keywords" :column "Edit")
  ("a" org-ref-replace-nonascii "Replace nonascii" :column "Edit")
  ("S" org-ref-sentence-case-article "Sentence case" :column "Edit")
  ("U" (doi-utils-update-bibtex-entry-from-doi (org-ref-bibtex-entry-doi)) "Update entry" :column "Edit")
  ("u" doi-utils-update-field "Update field" :column "Edit" :color red)
  ("L" org-ref-clean-bibtex-entry "Clean entry" :column "Edit")
  ("A" org-ref-bibtex-assoc-pdf-with-entry "Add pdf" :column "Edit")

  ;; www
  ("R" org-ref-bibtex-crossref "Crossref" :column "WWW")
  ("g" org-ref-bibtex-google-scholar "Google Scholar" :column "WWW")


  ;; Copy
  ("o" (lambda ()
	 (interactive)
	 (bibtex-copy-entry-as-kill)
	 (message "Use %s to paste the entry"
		  (substitute-command-keys (format "\\[bibtex-yank]"))))
   "Copy entry" :column "Copy")

  ("y" (save-excursion
	 (bibtex-beginning-of-entry)
	 (when (looking-at bibtex-entry-maybe-empty-head)
	   (kill-new (bibtex-key-in-head))))
   "Copy key" :column "Copy")


  ;; Miscellaneous
  ("F" org-ref-bibtex-file/body "File hydra" :column "Misc")
  ("N" org-ref-bibtex-new-entry/body "New entry" :column "Misc")
  ("q" nil))
#+end_src

** Download PDFs

* Reading

#+begin_src emacs-lisp
;; epub
(use-package nov
  :defer 1
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))

;; pdf-tools need to be deleted and reinstalled after after emacs update
(use-package pdf-tools
  :straight t
  :pin manual ;; don't reinstall when package updates
  :magic ("%PDF" . pdf-view-mode)
  :bind (:map pdf-view-mode-map
              ("C-s" . isearch-forward))
  :config
  (setq-default pdf-view-display-size 'fit-page)
  (pdf-tools-install :no-query)
  (require 'pdf-occur)
  (setq pdf-view-use-scaling t ;; set to t if you need high quality pdf
        pdf-view-use-imagemagick nil
        pdf-view-continuous nil
	pdf-annot-activate-created-annotations t)
  )

;; (with-eval-after-load "pdf-tools"
;;   (defun pdf-util-frame-scale-factor () 2))
#+end_src

* dictionary

you need to install the local dictionary =wordnet= (=wordnet-common= in arch). Unfortunately, this package's completing system conflicts with =ivy=..
#+begin_src emacs-lisp
(use-package wordnut
  :bind
  (("C-c w" . wordnut-search)
   ("C-c W" . wordnut-lookup-current-word)))
#+end_src

* Flyspell
#+begin_src emacs-lisp
;; check word spelling
(use-package flyspell
  :hook
  (text-mode . flyspell-mode)
  :config
  (setq ispell-program-name "aspell")
  (setq ispell-list-command "--list"))
#+end_src
