#+Title: Academic
#+Author: Zhenhua Wang
#+auto_tangle: t
#+PROPERTY: header-args+ :tangle "yes"

* Header
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

* Org-mode
** Main
#+begin_src emacs-lisp
(use-package org
  :straight (:type built-in)
  :mode (("\\.org$" . org-mode))
  :bind (:map org-mode-map
	      ("C-c =" . nil)
	      ("C-," . nil))
  :hook
  (org-mode . variable-pitch-mode)
  (org-mode . visual-line-mode)
  (org-mode . org-indent-mode)
  ((org-babel-after-execute org-mode) . org-redisplay-inline-images)
  :config
  (setq
   org-ellipsis " â–¾"
   org-pretty-entities nil
   org-hide-emphasis-markers t
   org-src-fontify-natively t
   org-fontify-quote-and-verse-blocks t
   org-edit-src-content-indentation 2
   ;; preview latex, etc at startup
   org-startup-folded  t;;'content
   org-confirm-babel-evaluate nil
   org-src-preserve-indentation t    ; helps to indent python code in org mode
   org-src-tab-acts-natively t
   org-src-strip-leading-and-trailing-blank-lines t
   ;; show edit buffer below the current window, keeping all
   org-src-window-setup 'split-window-below
   ;; use user defined image size
   org-image-actual-width nil)
  ;; make LaTeX-mode formula larger
  (pcase system-type
    ((or 'gnu/linux 'windows-nt 'cygwin)
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.4)))
    ('darwin
     (progn
       (setq org-format-latex-options (plist-put org-format-latex-options :scale 2))
       (setq org-latex-create-formula-image-program 'dvisvgm))))

  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "orange red" :weight bold))
          ("DONE" . (:foreground "green" :weight bold))))

  ;; latex '(latex script entities)
  (setq org-highlight-latex-and-related '(latex entities)))
#+end_src

** Org-babel
#+begin_src emacs-lisp
;; set org babel languages
(with-eval-after-load 'org
  ;; defer load org babel languages
  (require 'ob-teximg)
  (use-package ob-lisp
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:lisp))
  (use-package ob-latex
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:latex))
  (use-package ob-R
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:R))
  (use-package ob-python
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:python))
  (use-package ob-shell
    :defer t
    :straight (:type built-in)
    :commands
    (org-babel-execute:sh
     org-babel-expand-body:sh))

  ;; alias ess-r to R
  (defalias 'org-babel-execute:ess-r 'org-babel-execute:R)
  (defalias 'org-babel-ess-r-initiate-session
    'org-babel-R-initiate-session)

  ;; This is needed as of Org 9.2 (use yasnippet instead)
  (require 'org-tempo)
  ;; (add-to-list 'org-structure-template-alist '("py" . "src python :session :file lsp-src.py"))
  
  ;; enable lsp-org inside src block
  (cl-defmacro lsp-org-babel-enable (lang)
    "Support LANG in org source code block."
    (setq centaur-lsp 'lsp-mode)
    (cl-check-type lang stringp)
    (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
           (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
      `(progn
	 (defun ,intern-pre (info)
           (let ((file-name (->> info caddr (alist-get :file))))
             (unless file-name
               (setq file-name (make-temp-file "babel-lsp-")))
             (setq buffer-file-name file-name)
             (lsp-deferred)))
	 (put ',intern-pre 'function-documentation
              (format "Enable lsp-mode in the buffer of org source block (%s)."
                      (upcase ,lang)))
	 (if (fboundp ',edit-pre)
             (advice-add ',edit-pre :after ',intern-pre)
           (progn
             (defun ,edit-pre (info)
               (,intern-pre info))
             (put ',edit-pre 'function-documentation
                  (format "Prepare local buffer environment for org source block (%s)."
                          (upcase ,lang))))))))
  (defvar org-babel-lang-list
    '("ess-r" "R" "python"))
  (dolist (lang org-babel-lang-list)
    (eval `(lsp-org-babel-enable ,lang))))
#+end_src

** Org-export
#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
  (setq org-latex-listings 't)
  (add-to-list 'org-latex-classes
               '("org-plain-latex"
		 "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

** Org-theme
#+begin_src emacs-lisp
(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (defun org-modern--block-fringe () nil))

(use-package org-modern-indent
  :straight `(org-modern-indent :host github :repo "jdtsmith/org-modern-indent")
  :hook
  (org-indent-mode . org-modern-indent-mode))

;; Auto-show Markup Symbols
(use-package org-appear
  :hook (org-mode . org-appear-mode))
#+end_src

** Org-auto-tangle
   #+begin_src emacs-lisp
;; auto tangle
(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
   #+end_src
   
** Custom functions
#+begin_src emacs-lisp
(defun zw/org-fold-all-but-current ()
  (interactive)
  (org-remove-occur-highlights)
  (org-overview)
  (org-reveal))

(defun zw/toggle-image-scroll ()
  (interactive)
  (pixel-scroll-mode))
#+end_src

* Markdown
#+begin_src emacs-lisp
(use-package adaptive-wrap)
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :hook
  (markdown-mode-hook . adaptive-wrap-prefix-mode)
  :init
  (setq markdown-enable-math t
	markdown-enable-wiki-links t
        markdown-italic-underscore t
        markdown-make-gfm-checkboxes-buttons t
        markdown-gfm-uppercase-checkbox t
        markdown-fontify-code-blocks-natively t
	markdown-regex-header-setext nil
	markdown-header-scaling t
	markdown-asymmetric-header t))
#+end_src

* Latex

LSP-mode with TexLab works perfect for Latex docs

  - =brew install texlab=
  
#+begin_src emacs-lisp
;; latex
(use-package auctex
  :bind (:map TeX-mode-map ("M-n e" . TeX-command-master))
  :config
  (setq
   Tex-PDF-mode t
   TeX-parse-self t
   TeX-auto-save t
   Tex-command-show "LaTex"
   TeX-view-program-selection '((output-pdf "PDF Tools"))
   TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
   TeX-save-query nil)
  ;; revert the PDF-buffer after the TeX compilation has finished
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))

(use-package cdlatex
  :disabled
  :bind (:map cdlatex-mode-map
              ;; ("TAB" . indent-for-tab-command)
              ;; ("<C-tab>" . cdlatex-tab)
              ;; turn off auto pairing
              ("$" . nil)
              ("`" . nil)
              ("{" . nil)
              ("[" . nil)
	      :map org-cdlatex-mode-map
              ;; ("TAB" . indent-for-tab-command)
              ;; ("<C-tab>" . cdlatex-tab)
              ;; turn off auto pairing
              ("$" . nil)
              ("`" . nil)
              ("{" . nil)
              ("[" . nil))
  :hook
  (org-mode . turn-on-org-cdlatex)
  (LaTeX-mode . turn-on-cdlatex)
  (latex-mode . turn-on-cdlatex)
  (markdown-mode . turn-on-cdlatex))

(use-package reftex
  :disabled
  :hook
  (LaTeX-mode . turn-on-reftex)
  (latex-mode . turn-on-reftex)
  (markdown-mode . turn-on-reftex)
  :custom
  (reftex-plug-into-AUCTeX t)
  (reftex-toc-split-windows-horizontally t)
  (reftex-toc-split-windows-fraction 0.2))

;; auto async preview latex
(use-package xenops
  ;; :hook
  ;; (latex-mode . xenops-mode)
  ;; (LaTeX-mode . xenops-mode)
  :commands (xenops-mode)
  :config
  (setq xenops-reveal-on-entry nil))
#+end_src

* Bibliography
** Bibtex-completion
#+begin_src emacs-lisp
(setq research-folder "~/Workspace/OneDrive - University of Missouri/Research")
(use-package bibtex-completion
  :defer t
  :init
  (setq bibtex-completion-bibliography (expand-file-name "privacy.bib" research-folder)
	bibtex-completion-library-path (expand-file-name "pdfs/" research-folder)
	bibtex-completion-additional-search-fields '(keywords)
	bibtex-completion-display-formats
	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	bibtex-completion-pdf-open-function
	(lambda (fpath)
	  (call-process "open" nil 0 nil fpath))))
#+end_src

** Org-ref
#+begin_src emacs-lisp
(use-package org-ref
  :defer t
  :bind
  ("H-b" . zw/org-ref-bibtex-hydra/body)
  :init
  (setq org-ref-pdf-directory (expand-file-name "pdfs/" research-folder)
	bibtex-autokey-year-length 4
	bibtex-autokey-name-year-separator "-"
	bibtex-autokey-year-title-separator "-"
	bibtex-autokey-titleword-separator "-"
	bibtex-autokey-titlewords 2
	bibtex-autokey-titlewords-stretch 1
	bibtex-autokey-titleword-length 5)
  :config
  ;; define hydra
  (defhydra zw/org-ref-bibtex-hydra (:color blue :hint nil)
    "Bibtex actions:
"
    ;; Open-like actions
    ("p" org-ref-open-bibtex-pdf "PDF" :column "Open")
    ("n" org-ref-open-bibtex-notes "Notes" :column "Open")
    ("b" org-ref-open-in-browser "URL" :column "Open")

    ;; edit/modify
    ("K" (lambda ()
           (interactive)
           (org-ref-set-bibtex-keywords
            (read-string "Keywords: "
			 (bibtex-autokey-get-field "keywords"))
            t))
     "Keywords" :column "Edit")
    ("a" org-ref-replace-nonascii "Replace nonascii" :column "Edit")
    ("S" org-ref-sentence-case-article "Sentence case" :column "Edit")
    ("U" (doi-utils-update-bibtex-entry-from-doi (org-ref-bibtex-entry-doi)) "Update entry" :column "Edit")
    ("u" doi-utils-update-field "Update field" :column "Edit" :color red)
    ("L" org-ref-clean-bibtex-entry "Clean entry" :column "Edit")
    ("A" org-ref-bibtex-assoc-pdf-with-entry "Add pdf" :column "Edit")

    ;; www
    ("R" org-ref-bibtex-crossref "Crossref" :column "WWW")
    ("g" org-ref-bibtex-google-scholar "Google Scholar" :column "WWW")


    ;; Copy
    ("o" (lambda ()
	   (interactive)
	   (bibtex-copy-entry-as-kill)
	   (message "Use %s to paste the entry"
		    (substitute-command-keys (format "\\[bibtex-yank]"))))
     "Copy entry" :column "Copy")

    ("y" (save-excursion
	   (bibtex-beginning-of-entry)
	   (when (looking-at bibtex-entry-maybe-empty-head)
	     (kill-new (bibtex-key-in-head))))
     "Copy key" :column "Copy")


    ;; Miscellaneous
    ("F" org-ref-bibtex-file/body "File hydra" :column "Misc")
    ("N" org-ref-bibtex-new-entry/body "New entry" :column "Misc")
    ("q" nil)))
#+end_src

* Reading
#+begin_src emacs-lisp
;; epub
(use-package nov
  :mode (("\\.epub$" . org-mode)))

;; pdf-tools need to be deleted and reinstalled after after emacs update
(use-package pdf-tools
  :pin manual ;; don't reinstall when package updates
  :magic ("%PDF" . pdf-view-mode)
  :bind (:map pdf-view-mode-map
              ("C-s" . isearch-forward)
	      ("s-f" . isearch-forward))
  :config
  (setq-default pdf-view-display-size 'fit-page)
  (pdf-tools-install :no-query)
  (setq pdf-view-use-scaling t ;; set to t if you need high quality pdf
        pdf-view-use-imagemagick nil
        pdf-view-continuous nil
	pdf-annot-activate-created-annotations t))
#+end_src

* dictionary
you need to install the local dictionary =wordnet= (=wordnet-common= in arch). Unfortunately, this package's completing system conflicts with =ivy=..
#+begin_src emacs-lisp
(use-package wordnut
  :bind
  (("C-c w" . wordnut-search)
   ("C-c W" . wordnut-lookup-current-word)))
#+end_src

* Flyspell
#+begin_src emacs-lisp
;; On-the-fly spell checker
(use-package flyspell
  :straight (:type built-in)
  :diminish
  :hook (((text-mode outline-mode) . flyspell-mode)
         (prog-mode . flyspell-prog-mode))
  :bind (:map flyspell-mode-map ("C-," . nil))
  :init (setq flyspell-issue-message-flag nil
	      flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face)
              ispell-program-name "aspell"
              ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together")))

(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))
#+end_src



