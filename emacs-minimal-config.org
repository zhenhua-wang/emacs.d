#+Title: Emacs Configuration
#+AUTHOR: Zhenhua Wang
#+auto_tangle: t
#+PROPERTY: header-args+ :tangle "yes"
--------------
* Startup
** Package manager
#+begin_src emacs-lisp
;; Load path for manually installed packages
(push "~/.emacs.d/lisp" load-path)

;; straight
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Install use-package
(straight-use-package 'use-package)
(setq package-enable-at-startup nil     ;;; Disable package.el in favor of straight.el
      straight-use-package-by-default t
      ;; disable checking at start-up
      straight-check-for-modifications '(watch-files find-when-checking)
      use-package-verbose t)
#+end_src

** Keep .emacs.d Clean
Again, steal from [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org][Daviwil's config]].

#+begin_src emacs-lisp
;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering
  :if (or (eq system-type 'gnu/linux) (eq system-type 'darwin)))

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src

* Keybindings
#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; ------------------- key bind ---------------------
  ;; Keybonds
  (global-set-key (kbd "s-z") 'undo)
  (global-set-key (kbd "s-x") 'kill-region)
  (global-set-key (kbd "s-c") 'kill-ring-save)
  (global-set-key (kbd "s-v") 'yank)
  (global-set-key (kbd "s-a") 'mark-whole-buffer)
  (global-set-key (kbd "s-s") 'save-buffer)
  (global-set-key (kbd "s-l") 'goto-line)
  (global-set-key (kbd "s-q") 'kill-current-buffer)
  ;; vterm
  (global-set-key (kbd "s-e") 'vterm)
  ;; eldoc
  ;; (global-set-key (kbd "s-d") 'eldoc-doc-buffer)
  ;; winner undo/redo
  (global-set-key (kbd "s-u") 'winner-undo)
  (global-set-key (kbd "s-U") 'winner-redo)
  ;; projectile find file
  (global-set-key (kbd "s-p") 'counsel-projectile-switch-project)
  ;; Make ESC quit prompts
  ;; (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "<escape>") (kbd "C-g"))
  ;; window operations
  (global-set-key (kbd "s-w") 'delete-window)
  (global-set-key (kbd "s-t") 'split-window-sensibly-prefer-horizontal)
  (global-set-key [s-left] 'windmove-left)          ; move to left window
  (global-set-key [s-right] 'windmove-right)        ; move to right window
  (global-set-key [s-up] 'windmove-up)              ; move to upper window
  (global-set-key [s-down] 'windmove-down)          ; move to lower window
  ;; check dict
  (global-set-key (kbd "C-c w") 'wordnut-search)
  (global-set-key (kbd "C-c W") 'wordnut-lookup-current-word)
  ;; toggle transparency
  (global-set-key (kbd "C-c t") 'zw/toggle-transparency)
  ;; get passwed
  ;; (global-set-key (kbd "C-c p") 'zw/get-passwd)
  ;; toggle input
  (global-set-key (kbd "C-\\") 'toggle-input-method)
  ;; consistent with EXWM
  (pcase system-type
    ('darwin
     (progn
       (setq mac-command-modifier 'super)
       (setq mac-option-modifier 'meta)))))
#+end_src

#+RESULTS:

* Exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (or (eq system-type 'darwin)
	  (eq system-type 'gnu/linux)
	  (daemonp))
  :init
  (setq exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize))
#+end_src

* Fast comment
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

* Completion
#+begin_src emacs-lisp
(require 'zw-company)
(require 'zw-ivy)
#+end_src

* modeline
#+begin_src emacs-lisp
(require 'zw-modeline)
#+end_src
