#+title: StumpWM Configuration
#+author: Zhenhua Wang
#+auto_tangle: t

:tangle ~/.config/stumpwm/

* Main
#+begin_src lisp :tangle ~/.config/stumpwm/config

;; -*- mode: Lisp -*-
;; Stumpwm configuration file

(defparameter confpath "~/.config/stumpwm")
(ql:quickload "cl-fad")  ; Used for fuzzy

(init-load-path confpath)
(add-to-load-path "~/.config/stumpwm")
(set-prefix-key (kbd "s-d"))
(setf *mouse-focus-policy* :click)

;;; Creating 10 initial groups
;; Change name of the first group to 1
(setf (group-name (car (screen-groups (current-screen)))) "1")

;; Create the rest
(loop for n from 2 to 10
      do (gnewbg (format nil "~A" n)))

;;; Loading confs
(defun loadconf (&rest filenames)
  "Loads file from the init directory"
  (loop for f in filenames
        do (load (concatenate 'string confpath "/" f))))

;; These files contain only definitions
(loadconf "internal/meta.lisp"     ; Macro and function defs used config-wide
          "internal/remap.lisp"    ; Program kbd remaps
          "internal/keymaps.lisp"  ; Additional keymaps
          "internal/media.lisp"    ; Media controlss (audio & brightness)
          "internal/modeline.lisp" ; Modeline stuff
          "internal/fuzzy.lisp"    ; File/diectory based utilites
          "internal/books.lisp"    ; Opening books in zathura using fuzzy
          "internal/prj.lisp"      ; Opening project directory using fuzzy
          "internal/nonascii.lisp" ; Used for inserting non-standard characters (eg. letters macrons)
          "internal/visual.lisp"   ; Visual stuff
          )


;; These files run code
(loadconf "autorun.lisp"       ; Things ran at init
          "keybindings.lisp"   ; Things ran at keypresses
          )
#+end_src

* keybindings
#+begin_src lisp :tangle ~/.config/stumpwm/keybindings.lisp
(define-mult-keys *top-map*
    '(("XF86AudioRaiseVolume" . "vol/up")
      ("XF86AudioLowerVolume" . "vol/down")
      ("XF86AudioMute"        . "vol/mute")
      ("XF86AudioMicMute"     . "vol/mic-mute")

      ("XF86MonBrightnessUp"   . "backlight/up")
      ("XF86MonBrightnessDown" . "backlight/down")))

(define-mult-keys *root-map*
    '(("SunPrint_Screen"   . "run-shell-command flameshot gui")
      ("s-SunPrint_Screen" . "run-shell-command xfce4-screenshooter")
      ("s-f"               . "fullscreen")
      ("s-t"               . "float-this")
      ("s-T"               . "unfloat-this")))


(define-mult-keys *launch-map*
    '(("f" . "run-shell-command firefox")
      ("g" . "run-shell-command gimp")
      ("t" . "run-shell-command teams")
      ("d" . "run-shell-command lightcord")
      ("a" . "run-shell-command pavucontrol")
      ("c" . "run-shell-command gcolor2")

      ("b" . "books/open")
      ("p" . "prj/open")))


(define-mult-keys *edit-map*
    `(("s"   . ,(emacs-cmd "--no-splash -e 'slime'"))
      ("d"   . ,(emacs-cmd "--no-splash --eval '(dired \".\" )'"))
      ("p"   . ,(emacs-cmd "--no-splash --eval '(dired \"~/prj\" )'"))
      ("o"   . ,(emacs-cmd "--no-splash ~/.cache/org/main.org"))
      ("c"   . ,(emacs-cmd "--no-splash ~/.config/stumpwm/config"))

      ("s-e" . ,(emacs-cmd))))
#+end_src

* autorun
#+begin_src lisp :tangle ~/.config/stumpwm/autorun.lisp
(loadconf "internal/modules.lisp")

(remap/init)
(modeline/init)
(nonascii/init)
(visual/init)

(mapc #'run-shell-command
      '("picom"
        "wal -R"
        ))
#+end_src

* internal conf
** books
#+begin_src lisp :tangle ~/.config/stumpwm/internal/books.lisp
;; Program to open files in
(defparameter books/default-program "okular")
(defparameter books/default-dir     "~/Workspace/Documents")

(defcommand books/open () ((:string))
  (fuzzy/to-program books/default-program books/default-dir))
#+end_src
** fuzzy
#+begin_src lisp :tangle ~/.config/stumpwm/internal/fuzzy.lisp

(defparameter fuzzy/home-dir (namestring (user-homedir-pathname)))

(defun fuzzy/to-program (program directory &key (prompt "Select: "))
 "Displays menu with files from DIRECTORY for user to select. Selected
file will be opened in PROGRAM."
 (let ((file (car (select-from-menu
                   (current-screen)
                   `(,@(loop for f in (cl-fad:list-directory directory)
                          collect (strcon (pathname-name f)
                                          (let ((ftype (pathname-type f)))
                                            (if (stringp ftype)
                                                (strcon "." ftype)
                                                "")))))
                   prompt))))

   (if file (run-shell-command
             (strcon program   " \""
                     (namestring (cl-fad:pathname-as-directory directory))
                     file
                     "\"")))))

(defun fuzzy/open-in-directory (programs directories &key (prompt "Select: "))
  "Displays menu with DIRECTORIES for user to select. In selected
directory PROGRAMS will be launched."
  (let ((directory (car (select-from-menu
                         (current-screen)
                         `(,@(loop for dir in directories
                                collect (if (pathnamep dir)
                                            (namestring dir)
                                            dir)))
                         prompt))))

    (if directory
        (progn
          (sb-posix:chdir directory)
          (loop for prog in programs
             do (run-shell-command prog))))
    (sb-posix:chdir fuzzy/home-dir)))
#+end_src

** keymaps
#+begin_src lisp :tangle ~/.config/stumpwm/internal/keymaps.lisp
;;; Edit map
(defmap *edit-map* *top-map* "s-e")

(defun emacs-cmd (&optional args)
  "Returns Stump command that runs emacs with
specified ARGS"
  (strcon "run-shell-command emacs " args))
;;; END of Edit map

;;; Launch map
(defmap *launch-map* *root-map* "a")
;;; END of Launch map
#+end_src

** media
#+begin_src lisp :tangle ~/.config/stumpwm/internal/media.lisp

;;; Volume controls
(defmacro define-vol (name device action)
  "Creates ``amixer set ...'' command."
  `(defcommand ,name () ((:string))
    (run-shell-command (strcon "amixer set "
                               ,device
                               " "
                               ,action))))

(defcommand vol/get () ((:string))
  "Returns current volume level"
  (shell-cmd-neol "amixer get Master | grep 'Front Left' | grep -o '[0-9]*%'"))

(define-vol vol/up       "Master"  "2%+ unmute")
(define-vol vol/down     "Master"  "2%- unmute")
(define-vol vol/mute     "Master"  "toggle")
(define-vol vol/mic-mute "Capture" "toggle")
;;; END of Volume controls


;;; Backlight
(defmacro define-backlight (name  action)
  "Creates ``xbacklight ...'' commands"
  `(defcommand ,name () ((:string))
    (run-shell-command (strcon "xbacklight " ,action))))

(define-backlight backlight/up "+5")
(define-backlight backlight/down "-5")
;;; END of Backlight
#+end_src

** meta
#+begin_src lisp :tangle ~/.config/stumpwm/internal/meta.lisp

(defmacro strcon (&rest body)
  "Concatenate strings"
  `(concatenate 'string ,@body))

(defmacro shell-cmd-neol (cmd &key (prefix "") (affix ""))
  "Runs shell command and returns the result without the EOL.
Can be formatted with the :PREFIX and :AFFIX arguments."
  `(run-shell-command (strcon "echo -n " ,prefix "$(" ,cmd ")" ,affix) t))

(defun define-mult-keys (map list)
  (loop for (key . cmd) in list
     do (define-key map (kbd key) cmd)))

(defmacro inbtp (n min max)
  "``Does N fit in range (MIN; MAX)?'' predicate."
  `(and (>= ,n ,min)
        (<= ,n ,max)))

;; TODO - When using this macro, keymaps are named
;;        ``Anonymous Keymap'' for some reason...
(defmacro defmap (name parent key)
  "Defines ``NAME'' map bound to the KEY under the PARENT map."
  `(progn (defparameter ,name (make-sparse-keymap))
          (define-key ,parent (kbd ,key) ,name)))
#+end_src

** modeline
#+begin_src lisp :tangle ~/.config/stumpwm/internal/modeline.lisp
;;; Mode line's contents
(defmacro modeline/shell-cmd (cmd &key (prefix "") (affix ""))
  "Runs SHELL-CMD-NEOL but wraps it into the '(:EVAL) which enables refreshing
in mode line. Takes the same arguments as SHELL-CMD-NEOL."
  `'(:eval (shell-cmd-neol ,cmd :prefix ,prefix :affix ,affix)))

(defun modeline/init-bar ()
  ;; Colors
  (load "~/.cache/wal/colors.lisp")
  (setf *mode-line-background-color* background)
  (setf *mode-line-border-color* background)
  (setf *mode-line-foreground-color* foreground)

  ;; Mode line's contents
  (setf *group-format* "%t")
  (setf *screen-mode-line-format*
        (list "| "
              "%g"
              " | "
              (modeline/shell-cmd "date +'%H:%M | %a %d'")
              " | "
              (modeline/shell-cmd "cat /sys/class/power_supply/BAT0/capacity"
                                  :prefix "b:"
                                  :affix "%")
              " | "
              (modeline/shell-cmd "amixer get Master | grep 'Front Left' | grep -o '[0-9]*%'"
                                  :prefix "a:")
              " | "
              (modeline/shell-cmd "mpc current -f '%artist% - %title%'")))

  ;; Refresh constantly
  (setf *mode-line-timeout* 1)

  ;; Start mode line
  (mode-line))
;;; END of Bar's content


;;; Bar click hook

;; '(( (x1 x2) cmd )
;;   ( (x1 x2) cmd )
;;   ...)
(defparameter modeline/click-actions
  '(( (175 232) "date"   )
    ( (232 297) "cal -m" )
    ( (297 355) "acpi"   )
    ( (355 413) "amixer" )))


(defun modeline/click-hook-handler (a b x y &key (action-list modeline/click-actions))
  "Runs commands when mode line is clicked in a specific range of X. When out
of defined ranges prints the X cord."
  (if (null action-list)
      (message "~a" x)
      (let ((x1  (car (car (car action-list))))
            (x2  (car (cdr (car (car action-list)))))
            (cmd (car (cdr (car action-list)))))
        (if (inbtp x x1 x2)
            (message
             (run-shell-command cmd t)) ; cmd
            (modeline/click-hook-handler a b x y
                                         :action-list (cdr action-list))))))

(defun modeline/init-hook ()
  (add-hook stumpwm:*mode-line-click-hook* 'modeline/click-hook-handler))
;;; END of Bar click hook

;;; Handler called in
(defun modeline/init ()
  (modeline/init-bar)
  (modeline/init-hook))
#+end_src

** modules
#+begin_src lisp :tangle ~/.config/stumpwm/internal/modules.lisp
(load-module "swm-gaps")
(setf swm-gaps:*inner-gaps-size* 10)
(setf swm-gaps:*outer-gaps-size* 15)
(run-commands "toggle-gaps-on")

;; xft-font
;; git clone https://github.com/LispLima/clx-truetype ~/quicklisp/local-projects/clx-truetype
(ql:quickload "clx-truetype")
(load-module "ttf-fonts")

;; next thing is important (nothing else has worked for me)
(clx-truetype:cache-font-file "/usr/share/fonts/TTF/JetBrains Mono Regular Nerd Font Complete.ttf")

(set-font
 (make-instance 'xft:font
		:family "JetBrains Mono Nerd Font"
		:subfamily "Regular"
		:size 9
		:antialias t))
#+end_src

** nonascii
#+begin_src lisp :tangle ~/.config/stumpwm/internal/nonascii.lisp
(defun _nonascii/set-x-selection (str &key (selection :clipboard))
  "Copies STR into SELECTION."
  (set-x-selection str selection)
  (message (strcon "Put `~a' into " (string selection) ".")  str))

(defcommand nonascii/set-x-selection (str &key (selection :clipboard)) ((:string))
  "Command wrapper arround _NONASCII/SET-X-SELECTION."
  (_nonascii/set-x-selection str :selection selection))

(defmacro nonascii/rebind (map &rest body)
  "Under MAP, binds CAR to putting CDR into clipboard for every set in
BODY."
  `(define-mult-keys ,map
       ',(loop for set in body
              collect (cons
                       (car set)
                       (strcon "nonascii/set-x-selection "
                               (cdr set))))))

(defcommand nonascii/select-from-menu (list &key (prompt "Select: ")) ((:variable))
  (let ((str (cadr (select-from-menu (current-screen)
                                    (symbol-value list)
                                    prompt))))
    (if str (_nonascii/set-x-selection str))))

(defun nonascii/bind-assoc-menu (key list-symbol)
  (define-key *nonascii/root-map* (kbd key)
    (strcon "nonascii/select-from-menu " (string list-symbol))))

;;; Root nonascii map
(defmap *nonascii/root-map* *root-map* "8")

;;; Minor nonascii modes
(defmap *nonascii/macron-map* *nonascii/root-map* "-")
(defmap *nonascii/umlaut-map* *nonascii/root-map* "\"")

;; Maps for associative menus
(defparameter *nonascii/cyrlic-map*  ; Transcription is based on the polish phonology
  '(("a"    "а")
    ("b"    "б")
    ("w"    "в")
    ("g"    "г")
    ("d"    "д")
    ("je"   "е")
    ("jo"   "ё")
    ("ż"    "ж")
    ("z"    "з")
    ("i"    "и")
    ("j"    "й")
    ("k"    "к")
    ("ł/l"  "л")
    ("m"    "м")
    ("n"    "н")
    ("o"    "о")
    ("p"    "п")
    ("r"    "р")
    ("s"    "с")
    ("t"    "т")
    ("u"    "у")
    ("f"    "ф")
    ("ch"   "х")
    ("c"    "ц")
    ("cz"   "ч")
    ("sz"   "ш")
    ("szcz" "щ")
    ("jer"  "ъ")
    ("y"    "ы")
    (" ́jer" "ь")
    ("e"    "э")
    ("ju"   "ю")
    ("ja"   "я")

    ("A"    "А")
    ("B"    "Б")
    ("W"    "В")
    ("G"    "Г")
    ("D"    "Д")
    ("JE"   "Е")
    ("JO"   "Ё")
    ("Ż"    "Ж")
    ("Z"    "З")
    ("I"    "И")
    ("J"    "Й")
    ("K"    "К")
    ("Ł/L"  "Л")
    ("M"    "М")
    ("N"    "Н")
    ("O"    "О")
    ("P"    "П")
    ("R"    "Р")
    ("S"    "С")
    ("T"    "Т")
    ("U"    "У")
    ("F"    "Ф")
    ("CH"   "Х")
    ("C"    "Ц")
    ("CZ"   "Ч")
    ("SZ"   "Ш")
    ("SZCZ" "Щ")
    ("JER"  "Ъ")
    ("Y"    "Ы")
    (" ́JER" "Ь")
    ("E"    "Э")
    ("JU"   "Ю")
    ("JA"   "Я")))


(defun nonascii/init ()
  (nonascii/rebind *nonascii/macron-map*
                 ("a" . "ā")
                 ("e" . "ē")
                 ("u" . "ū")
                 ("o" . "ō")
                 ("i" . "ī")

                 ("A" . "Ā")
                 ("E" . "Ē")
                 ("U" . "Ū")
                 ("O" . "Ō")
                 ("I" . "Ī"))

  (nonascii/rebind *nonascii/umlaut-map*
                 ("a" . "ä")
                 ("e" . "ë")
                 ("u" . "ü")
                 ("o" . "ö")
                 ("i" . "ï")

                 ("A" . "Ä")
                 ("E" . "Ë")
                 ("U" . "Ü")
                 ("O" . "Ö")
                 ("I" . "Ï"))

  ;;            Note the quote ─┐
  ;;                            v
  (nonascii/bind-assoc-menu "c" '*nonascii/cyrlic-map*))
#+end_src

** prj
#+begin_src lisp :tangle ~/.config/stumpwm/internal/prj.lisp
(defparameter prj/base-dir "~/prj")
(defparameter prj/dirs (alexandria:flatten
                        (loop for dir in (cl-fad:list-directory prj/base-dir)
                           collect (cl-fad:list-directory dir))))

(defcommand prj/open () ((:string))
            (fuzzy/open-in-directory '("xterm" "emacs") prj/dirs))
#+end_src

** remap
#+begin_src lisp :tangle ~/.config/stumpwm/internal/remap.lisp
(defvar remap/emacs-keymap
  '(("C-n"    . "Down")
    ("C-p"    . "Up")
    ("C-f"    . "Right")
    ("C-b"    . "Left")
    ("C-e"    . "End")
    ("C-a"    . "Home")
    ("M-b"    . "C-Left")
    ("M-f"    . "C-Right")
    ("C-F"    . "S-Right")
    ("C-B"    . "S-Left")
    ("M-F"    . "S-C-Right")
    ("M-B"    . "S-C-Left")
    ("S-C-e"  . "S-End")
    ("S-C-a"  . "S-Home")
    ("M-a"    . "C-a")
    ("C-v"    . "Next")
    ("M-v"    . "Prior")
    ("C-d"    . "Delete")
    ("M-d"    . "C-Delete")
    ("M-w"    . "C-c")
    ("C-w"    . "C-x")
    ("C-y"    . "C-v")
    ("M-<"    . "C-Home")
    ("M->"    . "C-End")
    ("M-b"    . "C-Left")
    ("M-f"    . "C-Right")
    ("C-s"    . "C-f")
    ("C-g"    . "Escape")
    ("C-/"    . "C-z")
    ("C-r"    . "C-y")
    ("C-k"    . ("S-End" "C-x"))))

(defmacro remap/new (body &key (emacs nil))
  "Returns quoted expresion to use in DEFINE-REMAPPED-KEYS. (CAR BODY)
is the window class and (CDR BODY) is a list of remaped keys with
following structure:
(\"Key to remap\" . \"Original key\")
or
(\"Key to remap\" . (\"Original key 1\" \"Original key 2\" \"Original key 3\" ...))
If :EMACS is set to T then additionaly, emacs keybindings defined in
REMAP/EMACS-KEYMAP are applied"

  ``(,(lambda (win)
        (string-equal (window-class win) ,(car body)))
      ,@(append ',(cdr body)
                (if ,emacs
                    remap/emacs-keymap
                    nil))))
(defun remap/init ()
  (define-remapped-keys
      (list (remap/new ("Lightcord"
                        ("C-x" . "C-k"))     ; Quick-switcher
                       :emacs t)

            (remap/new ("Firefox"
                        ("C-1"   . "C-b")     ; Bookmarks
                        ("C-2"   . "C-h")     ; History menu
                        ("C-3"   . "C-d")     ; Add to bookmarks
                        ("C-N"   . "C-]")     ; History - forward
                        ("C-P"   . "C-[")     ; Hsitory - back
                        ("C-M-n" . "C-Next")  ; Prior Tab
                        ("C-M-p" . "C-Prior") ; Next Tab
                        ("C-x"   . "F6")      ; URL bar
                        ("C-M-i" . "C-P")     ; Private tab
                        ("C-M-t" . "C-w"))    ; Close a tab
                       :emacs t))))
#+end_src

** visual
#+begin_src lisp :tangle ~/.config/stumpwm/internal/visual.lisp
(defun visual/init ()
  (load "~/.cache/wal/colors.lisp")       ; Generated by pywal
  (set-bg-color background)
  (set-fg-color foreground)

  (set-border-color color1)
  (set-win-bg-color color1)

  (set-focus-color color1)
  (set-unfocus-color background)

  ;; Doesn't change the color at start (??) TODO
  (set-float-focus-color color1)
  (set-float-unfocus-color background))
#+end_src
