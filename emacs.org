#+Title: Emacs Configuration
#+AUTHOR: Zhenhua Wang
#+auto_tangle: t
#+PROPERTY: header-args+ :tangle "yes"
    --------------
* Header
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

* Startup
** Package manager
#+begin_src emacs-lisp
;; Load path for manually installed packages
(push "~/.emacs.d/lisp" load-path)

;; straight
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Install use-package
(straight-use-package 'use-package)
(setq package-enable-at-startup nil     ;;; Disable package.el in favor of straight.el
      straight-use-package-by-default t
      ;; disable checking at start-up
      straight-check-for-modifications '(watch-files find-when-checking)
      use-package-verbose t)
#+end_src

** Garbage collection
#+begin_src emacs-lisp
(use-package gcmh
  :diminish
  :hook
  (after-init . gcmh-mode)
  :init
  (setq gcmh-idle-delay 'auto
        gcmh-auto-idle-delay-factor 10
        gcmh-high-cons-threshold (* 16 1024 1024)))
#+end_src

** Keep .emacs.d Clean
#+begin_src emacs-lisp
;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering)

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src

** Benchmark
#+begin_src emacs-lisp
(use-package benchmark-init
  :config
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src

** Exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (or (eq system-type 'darwin)
          (eq system-type 'gnu/linux)
          (daemonp))
  :hook
  (after-init . exec-path-from-shell-initialize)
  :init
  (setq exec-path-from-shell-check-startup-files nil))
#+end_src

* Setting
** Global variable
#+begin_src emacs-lisp
#+end_src

** Global setting
#+begin_src emacs-lisp
;; modes run after init
(dolist (mode '(global-visual-line-mode
                ;; Revert buffers when the underlying file has changed
                global-auto-revert-mode
                ;; yank overwrite what is selected
                delete-selection-mode
                ;; fringe (nil is default)
                fringe-mode
                window-divider-mode
                blink-cursor-mode))
  (add-hook 'after-init-hook mode))

;; setq default folder
(setq default-directory (concat (getenv "HOME") "/"))
;; start server mode
(require 'server)
(unless (server-running-p) (server-start))
;; disable tooltips
(setq use-dialog-box nil)
(when (bound-and-true-p tooltip-mode)
  (tooltip-mode -1))
;; disable eldoc
(global-eldoc-mode -1)
;; Set up the visible bell
(setq visible-bell t)
;; cursor
(setq-default cursor-type '(bar . 2))
;; default coding
(set-default-coding-systems 'utf-8)
;; save clipboard before kill ring
(setq save-interprogram-paste-before-kill t)
(setq-default select-enable-clipboard t)
;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)
;; Use spaces instead of tabs for indentation
(setq-default indent-tabs-mode nil)
;; confirm emacs quit
(setq confirm-kill-emacs 'yes-or-no-p)
;; disable saving for buffers not visiting a file
(defadvice save-buffer (around interactive-no-visited-file-name activate)
  "When called interactively, disable for buffers not visiting a file."
  (when (or (not (called-interactively-p 'any))
            buffer-file-name)
    ad-do-it))
;; make scratch and dashboard unkillable
(add-hook 'kill-buffer-query-functions #'zw/dont-kill-scratch)
(defun zw/dont-kill-scratch ()
  (if (not (or (equal (buffer-name) "*scratch*")
               (equal (buffer-name) "*dashboard*")))
      t
    ;; (message "Not allowed to kill %s, burying instead" (buffer-name))
    (bury-buffer)
    nil))
#+end_src

** Custom function
#+begin_src emacs-lisp
;; helper functions to get face background/foreground recursively
(defun zw/get-face-attr-recur (face attr)
  (let ((face-attr (face-attribute face attr)))
    (if (and face-attr
             (not (eq face-attr 'unspecified)))
        face-attr
      (let ((parent-face (face-attribute face :inherit)))
        (if (and parent-face
                 (not (eq parent-face 'unspecified)))
            (zw/get-face-attr-recur parent-face attr)
          nil)))))

(defun zw/get-face-bg-recur (face)
  (zw/get-face-attr-recur face :background))

(defun zw/get-face-fg-recur (face)
  (zw/get-face-attr-recur face :foreground))

;; close window when close shell buffer including REPLs
(defun zw/close-shell ()
  (interactive)
  (if (one-window-p)
      (kill-buffer)
    (kill-buffer-and-window)))
;; delete or bury
(defun zw/delte-window-or-bury-buffer ()
  (interactive)
  (if (one-window-p)
      (bury-buffer)
    (delete-window)))
;; update zw/emacs
(defun zw/update-emacs ()
  (interactive)
  (shell-command "cd ~/.emacs.d && git pull")
  (message "Emacs updated!"))
;; show info
(defun zw/show-info ()
  (interactive)
  (message (if buffer-file-name
               (concat "File: "
                       (buffer-file-name)
                       ", Encoding:"
                       (zw/modeline-encoding))
             (concat "Buffer: "
                     (buffer-name)
                     ", Encoding:"
                     (zw/modeline-encoding)))))
#+end_src

** Custom keybinding
#+begin_src emacs-lisp
;; modifiers
;; In macos, I also remap caps lock to ctrl using Karabiner-Elements
(pcase system-type
  ('darwin
   (progn
     (setq mac-right-command-modifier 'hyper)
     (setq mac-command-modifier 'super)
     (setq mac-option-modifier 'meta))))

;; keys
(bind-keys :map global-map
           ("<escape>" . keyboard-quit) ;keyboard-escape-quit
           ("<f5>" . zw/update-emacs)
           ;; disable some weird keys
           ("C-z" . nil)
           ("<prior>" . nil)
           ("<next>" . nil)
           ("<home>" . nil)
           ("<end>" . nil)
           ;; disable scroll zoom
           ("C-<mouse-4>" . nil)
           ("C-<mouse-5>" . nil)
           ("C-<wheel-down>" . nil)
           ("C-<wheel-up>" . nil)
           ;; completion
           ("<C-tab>" . completion-at-point)
           ;; editing
           ("s-z" . undo)
           ("s-x" . kill-region)
           ("s-c" . kill-ring-save)
           ("s-v" . yank)
           ("s-a" . mark-whole-buffer)
           ("s-s" . save-buffer)
           ("s-S" . write-file)
           ("s-l" . goto-line)
           ;; term/shell
           ("s-e" . vterm)
           ;; buffer operations
           ("s-q" . kill-current-buffer)
           ("s-=" . text-scale-increase)
           ("s--" . text-scale-decrease)
           ;; window operations
           ("s-w" . delete-window)
           ("s-t" . zw/split-window-sensibly-prefer-horizontal)
           ("s-<left>" . windmove-left)
           ("s-<right>" . windmove-right)
           ("s-<up>" . windmove-up)
           ("s-<down>" . windmove-down)
           ("s-{" . shrink-window-horizontally)
           ("s-}" . enlarge-window-horizontally)
           ("s-^" . enlarge-window)
           ;; tab operations
           ("s-1" . zw/tab-switch)
           ("s-9" . tab-new)
           ("s-0" . tab-close)
           ;; misc commands
           ("s-i" . zw/show-info)
           ("s-b" . dirvish-side)
           ("s-o" . zw/open-in-external)
           ("s-\\" . toggle-input-method)
           ;; minibuffer
           :map minibuffer-mode-map
           ("<escape>" . minibuffer-keyboard-quit)
           :map isearch-mode-map
           ("s-f" . isearch-repeat-forward))
#+end_src

* Appearance
** All-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p)
  :init (setq all-the-icons-scale-factor 1)
  :config
  (add-to-list 'all-the-icons-extension-icon-alist
               '("rmd" all-the-icons-octicon "markdown" :v-adjust 0.0 :face all-the-icons-lblue)))
#+end_src

** Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :defer t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package modus-themes
  :init
  ;; Configure the Modus Themes' appearance
  (setq modus-themes-mode-line '(accented borderless)
        modus-themes-hl-line '(intense)
        modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-fringes 'subtle
        modus-themes-tabs-accented t
        modus-themes-paren-match '(bold intense)
        modus-themes-prompts '(bold intense)
        modus-themes-region '(accented))
  (modus-themes-load-themes)
  :config
  (load-theme 'modus-operandi t))

;; load custom faces
(require 'zw-theme)
#+end_src

** Buffer face mode
#+begin_src emacs-lisp
;; Set fixed-font faces for prog
(dolist (mode '(prog-mode-hook
                markdown-mode-hook
                latex-mode-hook LaTeX-mode-hook))
  (add-hook mode (lambda ()
                   (setq-local buffer-face-mode-face 'fixed-pitch)
                   (buffer-face-mode))))
#+end_src

** Modeline
#+begin_src emacs-lisp
(require 'zw-modeline)
#+end_src

** Tab bar
#+begin_src emacs-lisp
(setq tab-bar-show nil)
(require 'zw-tab-bar)
#+end_src

** Scroll
#+begin_src emacs-lisp
;; Mouse & Smooth Scroll
;; Scroll one line at a time (less "jumpy" than defaults)
(when (display-graphic-p)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . hscroll))
        mouse-wheel-scroll-amount-horizontal 1
        mouse-wheel-progressive-speed nil))

(setq scroll-step 1
      scroll-margin 0
      scroll-conservatively 100000
      auto-window-vscroll nil
      scroll-preserve-screen-position t)

;; Good pixel line scrolling
(if (fboundp 'pixel-scroll-precision-mode)
    (progn
      (pixel-scroll-precision-mode t)
      (bind-keys :map pixel-scroll-precision-mode-map
                 ("<prior>" . nil)
                 ("<next>" . nil))))

(use-package iscroll
  :diminish
  :hook
  (image-mode . iscroll-mode)
  (org-mode . iscroll-mode)
  (markdown-mode . iscroll-mode))
#+end_src

** Posframe
#+begin_src emacs-lisp
(use-package posframe
  :config
  (setq posframe-gtk-resize-child-frames 'resize-mode))
#+end_src

** Line number mode
#+begin_src emacs-lisp
;; line number mode
(dolist (mode '(prog-mode-hook text-mode-hook conf-mode-hook))
  (add-hook mode 'display-line-numbers-mode))
;; Override some modes which derive from the above
(dolist (mode '(org-mode-hook markdown-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Rain-bow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+end_src

** Rainbow mode
#+begin_src emacs-lisp
;; Sets the background of HTML color strings in buffers to be the color mentioned.
(use-package rainbow-mode
  :diminish
  :hook
  (prog-mode . rainbow-mode)
  (text-mode . rainbow-mode))
#+end_src

** Pulsar
#+begin_src emacs-lisp
(use-package pulsar
  :init
  (setq pulsar-pulse t
        pulsar-delay 0.055
        pulsar-iterations 10
        pulsar-face 'pulsar-generic
        pulsar-highlight-face 'pulsar-yellow)
  :hook
  (after-init . pulsar-global-mode)
  ;; integration with the `consult' package:
  (consult-after-jump . pulsar-recenter-top)
  (consult-after-jump . pulsar-reveal-entry)

  ;; integration with the built-in `imenu':
  (imenu-after-jump . pulsar-recenter-top)
  (imenu-after-jump . pulsar-reveal-entry))
#+end_src

** Paren
#+begin_src emacs-lisp
;; Highlight matching parens
(use-package paren
  :straight (:type built-in)
  :hook (after-init . show-paren-mode)
  :init (setq show-paren-when-point-inside-paren nil
              show-paren-when-point-in-periphery nil)
  :config
  (with-no-warnings
    ;; Display matching line for off-screen paren.
    (defun display-line-overlay (pos str &optional face)
      "Display line at POS as STR with FACE.
FACE defaults to inheriting from default and highlight."
      (let ((ol (save-excursion
                  (goto-char pos)
                  (make-overlay (line-beginning-position)
                                (line-end-position)))))
        (overlay-put ol 'display str)
        (overlay-put ol 'face
                     (or face '(:inherit highlight)))
        ol))

    (defvar-local show-paren--off-screen-overlay nil)
    (defun show-paren-off-screen (&rest _args)
      "Display matching line for off-screen paren."
      (when (overlayp show-paren--off-screen-overlay)
        (delete-overlay show-paren--off-screen-overlay))
      ;; Check if it's appropriate to show match info,
      (when (and (overlay-buffer show-paren--overlay)
                 (not (or cursor-in-echo-area
                          executing-kbd-macro
                          noninteractive
                          (minibufferp)
                          this-command))
                 (and (not (bobp))
                      (memq (char-syntax (char-before)) '(?\) ?\$)))
                 (= 1 (logand 1 (- (point)
                                   (save-excursion
                                     (forward-char -1)
                                     (skip-syntax-backward "/\\")
                                     (point))))))
        ;; Rebind `minibuffer-message' called by `blink-matching-open'
        ;; to handle the overlay display.
        (cl-letf (((symbol-function #'minibuffer-message)
                   (lambda (msg &rest args)
                     (let ((msg (apply #'format-message msg args)))
                       (setq show-paren--off-screen-overlay
                             (display-line-overlay
                              (window-start) msg ))))))
          (blink-matching-open))))
    (advice-add #'show-paren-function :after #'show-paren-off-screen)))
#+end_src

** Highlight line
#+begin_src emacs-lisp
;; Highlight the current line
(use-package hl-line
  :straight (:type built-in)
  :hook ((after-init . global-hl-line-mode)
         ((dashboard-mode eshell-mode shell-mode term-mode vterm-mode) .
          (lambda () (setq-local global-hl-line-mode nil)))))
#+end_src

** Highlight TODO
#+begin_src emacs-lisp
;; Highlight TODO and similar keywords in comments and strings
(use-package hl-todo
  :custom-face
  (hl-todo ((t (:inherit fixed-pitch :height 0.9 :width condensed :weight bold :underline nil :inverse-video t))))
  :bind ((:map hl-todo-mode-map
               ([C-f3] . hl-todo-occur)
               ("C-c t p" . hl-todo-previous)
               ("C-c t n" . hl-todo-next)
               ("C-c t o" . hl-todo-occur)
               ("C-c t i" . hl-todo-insert)))
  :hook (after-init . global-hl-todo-mode)
  ;; :init (setq hl-todo-require-punctuation t
  ;; hl-todo-highlight-punctuation ":")
  :config
  (dolist (keyword '("BUG" "DEFECT" "ISSUE"))
    (add-to-list 'hl-todo-keyword-faces `(,keyword . "#e45649")))
  (dolist (keyword '("TRICK" "WORKAROUND"))
    (add-to-list 'hl-todo-keyword-faces `(,keyword . "#d0bf8f")))
  (dolist (keyword '("DEBUG" "STUB"))
    (add-to-list 'hl-todo-keyword-faces `(,keyword . "#7cb8bb"))))
#+end_src

** Highlight uncommitted changes
#+begin_src emacs-lisp
;; Highlight uncommitted changes using VC
(use-package diff-hl
  :bind ((:map diff-hl-command-map
               ("SPC" . diff-hl-mark-hunk)))
  :hook ((after-init . global-diff-hl-mode)
         (diff-hl-mode . diff-hl-flydiff-mode))
  :init (setq diff-hl-side 'left
              diff-hl-draw-borders nil
              diff-hl-show-staged-changes nil)
  :config
  ;; Integration with magit
  (with-eval-after-load 'magit
    (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh)))
#+end_src

** Auto dim other buffers
#+begin_src emacs-lisp
(use-package auto-dim-other-buffers
  :commands (auto-dim-other-buffers-mode)
  :init
  (setq auto-dim-other-buffers-dim-on-focus-out nil
        auto-dim-other-buffers-dim-on-switch-to-minibuffer nil)
  :config
  (nconc auto-dim-other-buffers-affected-faces
         '((markdown-markup-face . auto-dim-other-buffers-face)
           (markdown-code-face . auto-dim-other-buffers-face))))
#+end_src

* Window
** Popper
#+begin_src emacs-lisp
(use-package popper
  :straight '(popper :host github
                     :repo "karthink/popper"
                     :branch "local-mode-line-format")
  :bind (("s-`"   . popper-cycle))
  :hook
  (after-init . popper-mode)
  (popper-mode . popper-echo-mode)
  :config
  (setq popper-mode-line ""
        popper-display-control nil
        popper-reference-buffers
        '(inferior-ess-r-mode
          inferior-python-mode)))
#+end_src

** Winner-mode
#+begin_src emacs-lisp
(use-package winner
  :hook (after-init . winner-mode)
  :bind (("s-T" . winner-undo)
         ("s-u" . winner-undo)
         ("s-U" . winner-redo)))
#+end_src

** Window split preference
#+begin_src emacs-lisp
;; set preference to horizontal split
(defun zw/split-window-sensibly-prefer-horizontal (&optional window)
  "Based on split-window-sensibly, but designed to prefer a horizontal split,
i.e. windows tiled side-by-side."
  (interactive)
  (let ((window (or window (selected-window))))
    (or (and (window-splittable-p window t)
             ;; Split window horizontally
             (with-selected-window window
               (split-window-right)))
        (and (window-splittable-p window)
             ;; Split window vertically
             (with-selected-window window
               (split-window-below)))
        (and
         (let ((frame (window-frame window)))
           (or
            (eq window (frame-root-window frame))
            (catch 'done
              (walk-window-tree (lambda (w)
                                  (unless (or (eq w window)
                                              (window-dedicated-p w))
                                    (throw 'done nil)))
                                frame)
              t)))
         (not (window-minibuffer-p window))
         (let ((split-width-threshold 0))
           (when (window-splittable-p window t)
             (with-selected-window window
               (split-window-right)))))))
  ;; switch to scratch buffer after creating new window
  (other-window 1 nil)
  (switch-to-buffer "*scratch*"))

(setq split-width-threshold  80
      split-height-threshold 80
      xsplit-window-preferred-function 'split-window-sensibly-prefer-horizontal)
#+end_src

** Control Buffer Placement
#+begin_src emacs-lisp
(defun zw/display-buffer-in-largest-window (buffer alist)
  (let ((largest-window (get-largest-window (selected-frame) t)))
    (window--display-buffer buffer largest-window 'reuse alist)))

;; default buffer action
(setq display-buffer-base-action
      '(display-buffer-reuse-mode-window
        display-buffer-reuse-window
        display-buffer-same-window))

;; If a popup does happen, don't resize windows to be equal-sized
(setq even-window-sizes nil)

(setq display-buffer-alist
      '(;; largest window
        ("\\.\\(?:pdf\\)\\'"
         (display-buffer-reuse-window
          zw/display-buffer-in-largest-window))
        ("\\*\\([Hh]elp\\|Man\\|eglot doc\\).*"
         (zw/display-buffer-in-largest-window))
        ;; top side window
        ("\\*\\(Flymake\\|Package-Lint\\|vc-git :\\).*"
         (display-buffer-in-side-window)
         (window-height . 0.2)
         (side . top)
         (slot . 0))
        ("\\*Messages.*"
         (display-buffer-in-side-window)
         (window-height . 0.2)
         (side . top)
         (slot . 1))
        ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\)\\*"
         (display-buffer-in-side-window)
         (window-height . 0.2)
         (side . top)
         (slot . 2))
        ("\\*polymode export.*"
         (display-buffer-in-side-window)
         (window-height . 0.2)
         (side . top)
         (slot . 1))
        ("\\*compilation.*"
         (display-buffer-in-side-window)
         (window-height . 0.2)
         (side . top)
         (slot . 1))
        ;; right side window
        ("\\*\\(R\\|Python\\).*"
         (display-buffer-reuse-mode-window)
         (side . right)
         (slot . -1)
         (window-width . 0.3))
        ;; left side window
        ("^\\*Ilist\\*$"
         (display-buffer-in-side-window)
         (window-width . 0.2)
         (side . left)
         (slot . 1))
        ;; bottom buffer (NOT side window)
        ("\\*.*\\(e?shell\\|v?term\\).*"
         (display-buffer-at-bottom)
         ;; (display-buffer-in-side-window)
         (window-height . 0.2)
         (side . bottom))
        ;; below current window
        ("\\*Calendar.*"
         (display-buffer-reuse-mode-window display-buffer-below-selected)
         (window-height . shrink-window-if-larger-than-buffer))))
#+end_src

* Tool
** Tramp
For host with two factor auth, you need to
1. enter password
2. enter the second-step code

 Usage:
- ~(find-file "/ssh:zhenhua@127.0.0.1#3022:~/")~

#+begin_src emacs-lisp
;; Set default connection mode to SSH
(setq tramp-default-method "ssh")
(setq tramp-auto-save-directory
      (expand-file-name "tramp-auto-save" user-emacs-directory))
(setq tramp-persistency-file-name
      (expand-file-name "tramp-connection-history" user-emacs-directory))
(setq password-cache-expiry nil)
(setq remote-file-name-inhibit-cache nil)
(setq tramp-use-ssh-controlmaster-options nil)
(setq vc-ignore-dir-regexp
      (format "\\(%s\\)\\|\\(%s\\)"
              vc-ignore-dir-regexp
              tramp-file-name-regexp))
(with-eval-after-load 'tramp
  (customize-set-variable 'tramp-ssh-controlmaster-options
                          (concat
                           "-o ControlPath=/tmp/ssh-tramp-%%r@%%h:%%p "
                           "-o ControlMaster=auto -o ControlPersist=yes"))
  ;; respect the PATH variable on the remote machine
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src

Tips:
- use ssh config file
#+begin_example :tangle "no"
Host vm-server
    HostName 127.0.0.1
    User zhenhua
    Port 3022
#+end_example

- enable ssh on server
#+begin_example :tangle "no"
sudo apt-get install openssh-server
sudo systemctl enable ssh
sudo systemctl start ssh
#+end_example

** Comint
#+begin_src emacs-lisp
(use-package comint
  :straight (:type built-in)
  :config
  ;; Make processes’ outputs read-only. The prompt is easy.
  (setq comint-prompt-read-only t
        ansi-color-for-comint-mode 'filter
        comint-scroll-to-bottom-on-input t
        comint-scroll-to-bottom-on-output nil
        comint-move-point-for-output nil))
#+end_src

** Vterm
For detailed Config, see https://github.com/akermu/emacs-libvterm#shell-side-configuration

#+begin_src emacs-lisp
(use-package vterm
  :bind ((:map vterm-copy-mode-map
               ("<return>" . vterm-copy-mode))
         (:map vterm-mode-map
               ("s-e" . zw/delte-window-or-bury-buffer)))
  :init
  (setq vterm-kill-buffer-on-exit t)
  ;; close window when vterm exit
  (add-hook 'vterm-exit-functions
            (lambda (_ _)
              (let* ((buffer (current-buffer))
                     (window (get-buffer-window buffer)))
                (when (not (one-window-p))
                  (delete-window window))))))
#+end_src

** Dired
#+begin_src emacs-lisp
(use-package dired
  :straight (:type built-in)
  :hook
  (dired-mode . dired-async-mode)
  (dired-mode . dired-hide-details-mode)
  (dired-mode . (lambda () (visual-line-mode 0)))
  :init
  (setq dired-dwim-target t
        dired-kill-when-opening-new-dired-buffer t
        dired-create-destination-dirs t
        dired-create-destination-dirs-on-trailing-dirsep t)
  (when (eq system-type 'darwin)
    (setq insert-directory-program "gls"))
  (setq dired-use-ls-dired t
        dired-listing-switches "-al --group-directories-first"))

(use-package diredfl
  :hook
  ((dired-mode . diredfl-mode)
   ;; highlight parent and preview as well
   (dirvish-directory-view-mode . diredfl-mode))
  :config
)

(use-package dirvish
  :hook
  (after-init . dirvish-override-dired-mode)
  (dirvish-find-entry . (lambda (&rest _) (setq-local truncate-lines t)))
  :custom
  (dirvish-quick-access-entries ; It's a :custom option
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")
     ("w" "~/Workspace/"                "Workspace")))
  :bind ((:map dirvish-mode-map
               ("<tab>" . dirvish-subtree-toggle)
               ("a" . dirvish-quick-access)))
  :config
  (setq dirvish-subtree-always-show-state t
        dirvish-side-width 25
        dirvish-use-mode-line nil
        dirvish-use-header-line t
        dirvish-use-header-line t
        dirvish-header-line-height 20
        dirvish-side-window-parameters nil
        dirvish-attributes
        '(vc-state subtree-state all-the-icons git-msg file-time file-size)))
#+end_src

** Openwith
#+begin_src emacs-lisp
(setq open-app (pcase system-type
                 ('gnu/linux "xdg-open")
                 (_ "open")))

(use-package openwith
  :hook
  (after-init . openwith-mode)
  :config
  (setq openwith-associations
        (list
         (list (openwith-make-extension-regexp
                '("doc" "docx" "xls" "xlsx" "ppt" "pptx" "odt" "ods" "odg" "odp"
                  "mpg" "mpeg" "mp3" "mp4" "avi" "wmv" "wav" "mov" "flv" "ogm"
                  "ogg" "mkv"))
               open-app
               '(file)))))

(defun zw/open-in-external (arg)
  "Open visited file in default external program.
With a prefix ARG always prompt for command to use."
  (interactive "P")
  (when buffer-file-name
    (call-process-shell-command
     (concat open-app " " (shell-quote-argument buffer-file-name))
     nil 0)))
#+end_src

** Recentf
#+begin_src emacs-lisp
(use-package recentf
  :straight (:type built-in)
  :hook (after-init . recentf-mode)
  :init (setq recentf-max-saved-items 300
              recentf-exclude
              '("\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
                "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
                "\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
                "^/tmp/" "^/var/folders/.+$" "^/ssh:" "/persp-confs/" "~/.emacs.d/straight/"
                no-littering-var-directory no-littering-etc-directory
                (lambda (file) (file-in-directory-p file package-user-dir))))
  :config
  (push (expand-file-name recentf-save-file) recentf-exclude)
  (add-to-list 'recentf-filename-handlers #'abbreviate-file-name))
#+end_src

** Savehist
#+begin_src emacs-lisp
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :hook (after-init . savehist-mode)
  :config (setq enable-recursive-minibuffers t ; Allow commands in minibuffers
                history-length 25))
#+end_src

** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)))
#+end_src

** Keybinding Hints
#+begin_src emacs-lisp
(use-package hydra
  :hook (emacs-lisp-mode . hydra-add-imenu))

(use-package which-key
  :diminish
  :hook (after-init . which-key-mode)
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

** Go to address
#+begin_src emacs-lisp
(use-package goto-addr
  :straight (:type built-in)
  :hook
  (text-mode . goto-address-mode)
  (prog-mode . goto-address-prog-mode))
#+end_src

** Request
#+begin_src emacs-lisp
(use-package request
  :commands (request))
#+end_src

** Websearch
#+begin_src emacs-lisp
(use-package emacs-websearch
  :straight '(emacs-websearch :host github :repo "zhenhua-wang/emacs-websearch")
  :bind (("C-c l" . emacs-websearch)))
#+end_src

* Editing
** Undo
#+begin_src emacs-lisp
(use-package undo-fu
  :bind (("s-z" . undo-fu-only-undo)
         ("s-Z" . undo-fu-only-redo)))
#+end_src
   
** Auto save
#+begin_src emacs-lisp
(use-package super-save
  :diminish
  :hook (after-init . super-save-mode)
  :init
  (setq super-save-auto-save-when-idle t))
#+end_src

** Sudo edit
#+begin_src emacs-lisp
(use-package sudo-edit
  :commands (sudo-edit))
#+end_src

** Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :hook (after-init . yas-global-mode)
  :init (setq yas-snippet-dirs '("~/.emacs.d/yasnippet")))
#+end_src

** Visual regexp
#+begin_src emacs-lisp
(use-package visual-regexp
  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace)))
#+end_src

** Go to last change
#+begin_src emacs-lisp
(use-package goto-last-change
  :bind (("M-g l" . goto-last-change)))
#+end_src

* Completion
** Orderless
#+begin_src emacs-lisp
;; orderless
(use-package orderless
  :config
  (setq completion-styles '(orderless partial-completion basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Minibuffer Completion
*** vertigo
#+begin_src emacs-lisp
(use-package vertico
  :straight (:files (:defaults "extensions/*")
                    :includes (vertico-directory))
  :hook
  (after-init . vertico-mode)
  (vertico-mode . vertico-multiform-mode)
  ;; Tidy shadowed file names
  (rfn-eshadow-update-overlay . vertico-directory-tidy)
  ;; More convenient directory navigation commands
  :bind ((:map vertico-map
               ("RET" . vertico-directory-enter)
               ("DEL" . vertico-directory-delete-char)
               ("M-DEL" . vertico-directory-delete-word)))
  :init
  (setq vertico-resize nil
        vertico-scroll-margin 0
        vertico-count 12
        vertico-cycle t)
  :config
  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  ;; use vertico as the interface for completion-at-point
  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args)))
  ;; Sort directories before files (vertico-multiform-mode)
  (setq vertico-multiform-categories
        '((file (vertico-sort-function . sort-directories-first))))
  (defun sort-directories-first (files)
    (setq files (vertico-sort-history-length-alpha files))
    (nconc (seq-filter (lambda (x) (string-suffix-p "/" x)) files)
           (seq-remove (lambda (x) (string-suffix-p "/" x)) files))))
#+end_src

*** marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :hook (vertico-mode . marginalia-mode)
  :config
  ;; show mode on/off
  (defun marginalia-annotate-command (cand)
    "Annotate command CAND with its documentation string.
Similar to `marginalia-annotate-symbol', but does not show symbol class."
    (when-let* ((sym (intern-soft cand)))
      (concat
       (let ((mode (if (and sym (boundp sym))
                       sym
                     nil)))
         (when (and sym (boundp sym))
           (if (and (boundp mode) (symbol-value mode))
               (propertize " [On]" 'face 'marginalia-on)
             (propertize " [Off]" 'face 'marginalia-off))))
       (marginalia-annotate-binding cand)
       (marginalia--documentation (marginalia--function-doc sym))))))

(use-package all-the-icons-completion
  :if (display-graphic-p)
  :after (marginalia all-the-icons)
  :hook
  (marginalia-mode . all-the-icons-completion-marginalia-setup)
  (marginalia-mode . all-the-icons-completion-mode)
  :init
  (setq marginalia-max-relative-age 0
        marginalia-align 'center))
#+end_src

*** consult
#+begin_src emacs-lisp
(use-package consult
  :demand
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x b" . consult-buffer)
         ("C-x C-b" . consult-buffer)
         ("C-x C-d" . consult-dir)
         ("C-x C-t" . consult-tramp)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)
         ("<help> a" . consult-apropos)
         ("s-f" . consult-line)
         ("s-F" . zw/consult-line-multi)
         ;; M-g bindings (goto-map)
         ("M-g g" . consult-goto-line)
         ("M-g o" . consult-outline)
         ("M-g i" . consult-imenu)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s g" . consult-grep)
         ("M-s y" . consult-yasnippet)
         ("M-s m" . consult-minor-mode-menu)
         ("M-s f" . consult-flymake)
         ("M-s s" . consult-flyspell)
         (:map isearch-mode-map
               ("M-s" . consult-isearch-history))
         (:map minibuffer-local-completion-map
               ("C-x C-d" . consult-dir)))
  :init
  (setq consult-preview-key (kbd "M-."))
  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-recent-file
   consult--source-project-recent-file
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  (setq consult-narrow-key "<" ;; (kbd "C-+")
        consult-line-numbers-widen t
        consult-async-min-input 2
        consult-async-refresh-delay  0.15
        consult-async-input-throttle 0.2
        consult-async-input-debounce 0.1)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Preview while using consult-theme
  (consult-customize consult-theme :preview-key '(:debounce 0.5 any))
  ;; Preview immediately on M-., on up/down after 0.5s, on any other key after 1s
  (consult-customize consult-theme
                     :preview-key
                     (list (kbd "M-.")
                           :debounce 0.5 (kbd "<up>") (kbd "<down>")
                           :debounce 1 'any))
  ;; custom functions
  (defun zw/consult-line-multi ()
    (interactive)
    (consult-line-multi t)))

;; custom consult packages
(use-package consult-yasnippet
  :commands consult-yasnippet)
(use-package consult-dir
  :commands consult-dir)
(use-package consult-tramp
  :commands consult-tramp
  :straight
  (consult-tramp :type git :host github :repo "Ladicle/consult-tramp")
  :init (setq consult-tramp-method "ssh"))
(use-package consult-flyspell
  :commands consult-flyspell)
#+end_src

** Code Completion
#+begin_src emacs-lisp
(require 'zw-company)
#+end_src

* Development
** IDE
*** LSP
#+begin_src emacs-lisp
(setq-default read-process-output-max (* 1024 1024))

(use-package lsp-mode
  :commands (lsp)
  :hook
  (python-mode . lsp-deferred)
  (ess-r-mode . lsp-deferred)
  ((c++-mode c-mode) . lsp-deferred)
  :init
  (setq lsp-auto-guess-root t
        lsp-keep-workspace-alive nil
        lsp-modeline-code-actions-enable nil
        lsp-modeline-diagnostics-enable nil
        lsp-modeline-workspace-status-enable nil
        lsp-headerline-breadcrumb-enable nil
        lsp-signature-auto-activate nil
        lsp-signature-render-documentation nil
        lsp-eldoc-enable-hover nil

        lsp-enable-file-watchers nil
        lsp-enable-folding nil
        lsp-enable-text-document-color nil

        lsp-enable-indentation nil
        lsp-enable-on-type-formatting nil

        lsp-completion-provider :none
        
        ;; For diagnostics
        lsp-diagnostics-disabled-modes '(markdown-mode gfm-mode)))

;; lsp ui
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :bind ((:map lsp-ui-mode-map
               ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
               ([remap xref-find-references] . lsp-ui-peek-find-references))
         (:map lsp-ui-doc-mode-map
               ("s-d" . lsp-ui-doc-toggle)))
  :init (setq lsp-ui-imenu-enable nil
              lsp-ui-sideline-enable nil
              lsp-ui-peek-always-show t
              lsp-ui-doc-position 'top
              lsp-ui-doc-max-width 120
              lsp-ui-doc-show-with-mouse nil)
  :config
  ;; use posframe to show peek
  (defun lsp-ui-peek--peek-display (src1 src2)
    (-let* ((win-width (frame-width))
            (lsp-ui-peek-list-width (/ (frame-width) 2))
            (string (-some--> (-zip-fill "" src1 src2)
                      (--map (lsp-ui-peek--adjust win-width it) it)
                      (-map-indexed 'lsp-ui-peek--make-line it)
                      (-concat it (lsp-ui-peek--make-footer))))
            )
      (setq lsp-ui-peek--buffer (get-buffer-create " *lsp-peek--buffer*"))
      (posframe-show lsp-ui-peek--buffer
                     :string (mapconcat 'identity string "")
                     :min-width (frame-width)
                     :poshandler #'posframe-poshandler-frame-center)))
  (defun lsp-ui-peek--peek-destroy ()
    (when (bufferp lsp-ui-peek--buffer)
      (posframe-delete lsp-ui-peek--buffer))
    (setq lsp-ui-peek--buffer nil
          lsp-ui-peek--last-xref nil)
    (set-window-start (get-buffer-window) lsp-ui-peek--win-start))
  (advice-add #'lsp-ui-peek--peek-new :override #'lsp-ui-peek--peek-display)
  (advice-add #'lsp-ui-peek--peek-hide :override #'lsp-ui-peek--peek-destroy))

;; microsoft pyright
(use-package lsp-pyright
  :after lsp-mode
  :config (setq lsp-pyright-auto-import-completions nil))

;; enable lsp in org babel
(with-eval-after-load 'org
  ;; enable lsp-org inside src block
  (cl-defmacro lsp-org-babel-enable (lang)
    "Support LANG in org source code block."
    (cl-check-type lang stringp)
    (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
           (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
      `(progn
         (defun ,intern-pre (info)
           (let ((file-name (->> info caddr (alist-get :file))))
             (unless file-name
               (setq file-name (make-temp-file "babel-lsp-")))
             (setq buffer-file-name file-name)
             (lsp-deferred)))
         (put ',intern-pre 'function-documentation
              (format "Enable lsp-mode in the buffer of org source block (%s)."
                      (upcase ,lang)))
         (if (fboundp ',edit-pre)
             (advice-add ',edit-pre :after ',intern-pre)
           (progn
             (defun ,edit-pre (info)
               (,intern-pre info))
             (put ',edit-pre 'function-documentation
                  (format "Prepare local buffer environment for org source block (%s)."
                          (upcase ,lang))))))))
  (defvar org-babel-lang-list
    '("ess-r" "R" "python" "latex"))
  (dolist (lang org-babel-lang-list)
    (eval `(lsp-org-babel-enable ,lang))))
#+end_src

*** Tree sitter
#+begin_src emacs-lisp
(use-package tree-sitter
  :diminish
  :hook (after-init . global-tree-sitter-mode))

(use-package tree-sitter-langs
  :hook (tree-sitter-after-on . tree-sitter-hl-mode))
#+end_src

*** Code reference 
#+begin_src emacs-lisp
(use-package xref
  :straight (:type built-in)
  :init
  (when (executable-find "rg")
    (setq xref-search-program 'ripgrep))
  :config
  (setq xref-prompt-for-identifier '(not xref-find-definitions
                                         xref-find-definitions-other-window
                                         xref-find-definitions-other-frame
                                         xref-find-references)))
#+end_src

*** Clean whitespace
#+begin_src emacs-lisp
(use-package ws-butler
  :hook
  (prog-mode . ws-butler-mode))
#+end_src

*** Fast comment
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind (("M-/" . evilnc-comment-or-uncomment-lines)))
#+end_src

*** Flymake
#+begin_src emacs-lisp
(use-package flymake
  :straight (:type built-in)
  :config
  (setq flymake-no-changes-timeout nil)
  ;; disable flymake log about proc-legacy-flymake
  (remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake)
  ;; show flymake when cursor hovers
  (custom-set-variables
   '(help-at-pt-timer-delay 0.9)
   '(help-at-pt-display-when-idle t)))
#+end_src

*** Version control
#+begin_src emacs-lisp
(use-package magit
  :bind (("C-M-;" . magit-status))
  :commands (magit-status magit-get-current-branch)
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package magit-todos
  :hook (magit-mode . magit-todos-mode))
#+end_src

** Language
*** R
#+begin_src emacs-lisp
(use-package ess
  :defer t
  :commands R
  :hook
  (inferior-ess-r-mode . my/ess-fix-read-only-inferior-ess-mode)
  :bind ((:map ess-r-mode-map
              ("C-c c e" . ess-complete-object-name))
         (:map inferior-ess-r-mode-map
              ("s-q" . zw/close-shell)))
  :config
  (require 'ess-site)
  ;; "Fixes a bug when `comint-prompt-read-only' in non-nil.
    ;; See https://github.com/emacs-ess/ESS/issues/300"
  (defun my/ess-fix-read-only-inferior-ess-mode ()
    (setq-local comint-use-prompt-regexp nil)
    (setq-local inhibit-field-text-motion nil))
  ;; fix freezing in macos by creating your process using pipe
  ;; https://emacs.stackexchange.com/questions/40603/process-input-seems-buggy-in-emacs-on-os-x
  ;; (setq process-connection-type nil)
  (setq ess-ask-for-ess-directory nil
        ess-nuke-trailing-whitespace-p t
        ess-style 'RStudio-
        ess-local-process-name "R"
        ess-use-company nil
        ess-use-flymake nil
        ess-eval-visibly-p 'nowait
        ess-R-font-lock-keywords
        '((ess-R-fl-keyword:keywords   . t)
          (ess-R-fl-keyword:constants  . t)
          (ess-R-fl-keyword:modifiers  . t)
          (ess-R-fl-keyword:fun-defs   . t)
          (ess-R-fl-keyword:assign-ops . t)
          (ess-R-fl-keyword:%op%       . t)
          (ess-fl-keyword:fun-calls    . t)
          (ess-fl-keyword:delimiters . t)
          (ess-fl-keyword:operators . t)
          (ess-fl-keyword:numbers . t)
          (ess-R-fl-keyword:F&T . t)
          (ess-fl-keyword:= . t))))

(use-package ess-smart-equals
  :after (:any ess-r-mode inferior-ess-r-mode ess-r-transcript-mode)
  :hook ((ess-r-mode . ess-smart-equals-mode)
         (inferior-ess-r-mode . ess-smart-equals-mode)
         (ess-r-transcript-mode . ess-smart-equals-mode)
         (ess-roxy-mode . ess-smart-equals-mode))
  :config
  (setq ess-smart-equals-padding-left 'one-space)
  (setq ess-smart-equals-padding-right 'no-space))

(use-package ess-view-data
  :commands (ess-view-data-print))
#+end_src

*** Python
#+begin_src emacs-lisp
(use-package python
  :hook (inferior-python-mode . (lambda ()
                                  (bind-keys :map inferior-python-mode-map
                                             ("s-q" . zw/close-shell))))
  :bind ((:map python-mode-map
               ("C-<return>" . python-shell-send-statement)))
  :config
  (when (executable-find "ipython")
    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "-i --simple-prompt --InteractiveShell.display_page=True")
    (add-to-list 'python-shell-completion-native-disabled-interpreters
                 "ipython")))

(use-package conda
  :after python
  :config
  (or (cl-loop for dir in (list conda-anaconda-home
                                "~/.anaconda"
                                "~/.miniconda"
                                "~/.miniconda3"
                                "~/.miniforge3"
                                "~/anaconda3"
                                "~/miniconda3"
                                "~/miniforge3"
                                "~/opt/miniconda3"
                                "/usr/bin/anaconda3"
                                "/usr/local/anaconda3"
                                "/usr/local/miniconda3"
                                "/usr/local/Caskroom/miniconda/base"
                                "~/.conda")
               if (file-directory-p dir)
               return (setq conda-anaconda-home (expand-file-name dir)
                            conda-env-home-directory (expand-file-name dir)))
      (message "Cannot find Anaconda installation"))
  ;; add to modeline
  (add-to-list 'mode-line-misc-info
               '(conda-env-current-name
                 ("[CONDA:" conda-env-current-name "]"))
               'append))
#+end_src

*** Web
#+begin_src emacs-lisp
;; Web
(use-package web-mode
  :mode
  (("\\.phtml\\'" . web-mode)
  ("\\.tpl\\.php\\'" . web-mode)
  ("\\.jsp\\'" . web-mode)
  ("\\.as[cp]x\\'" . web-mode)
  ("\\.erb\\'" . web-mode)
  ("\\.mustache\\'" . web-mode)
  ("\\.djhtml\\'" . web-mode)
  ("\\.jst.ejs\\'" . web-mode)
  ("\\.html?\\'" . web-mode))
  :init
  (setq web-mode-enable-block-face t)
  (setq web-mode-enable-comment-keywords t)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-script-padding 2)
  (setq web-mode-style-padding 2)
  (setq web-mode-comment-style 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-markup-indent-offset 2))

;; CSS
(setq css-indent-level 2)
(setq css-indent-offset 2)
#+end_src

** Data
*** CSV mode
#+begin_src emacs-lisp
(use-package csv-mode
  :mode
  ("\\.[Cc][Ss][Vv]\\'". csv-mode)
  :hook
  (csv-mode . csv-align-mode)
  :config
  (setq csv-separators '("," ";" "|" " ")))
#+end_src

* Document
** Writing
*** Visual-fill-column
#+begin_src emacs-lisp
(use-package visual-fill-column
  :hook
  ((org-mode markdown-mode) . visual-fill-column-mode)
  ((helpful-mode ess-r-help-mode) . visual-fill-column-mode)
  :init
  (setq-default visual-fill-column-center-text t
                visual-fill-column-width 90))
#+end_src

*** Org-mode
**** Main
#+begin_src emacs-lisp
(use-package org
  :straight (:type built-in)
  :mode (("\\.org$" . org-mode))
  :bind ((:map org-mode-map
               ("C-c =" . nil)
               ("C-," . nil)))
  :hook
  ;; careful! Don't use tabs in org-indent-mode, use spaces instead
  (org-mode . org-indent-mode)
  (org-mode . variable-pitch-mode)
  (org-mode . visual-line-mode)
  ;; (org-mode . org-num-mode)
  ((org-babel-after-execute org-mode) . org-redisplay-inline-images)
  :config
  (setq
   ;; init appearance
   org-ellipsis " ⇲"                    ; ▼, ↴, ⬎, ⤷, ⋱, ⤵, ⇲
   org-startup-folded  t               ;'content
   org-image-actual-width nil          ; use user defined image size
   org-hide-emphasis-markers t
   org-src-fontify-natively t
   org-fontify-quote-and-verse-blocks t
   org-edit-src-content-indentation 2))

;; auto tangle
(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

**** Org-latex
#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
  ;; org latex
  ;; make LaTeX-mode formula larger
  (pcase system-type
    ((or 'gnu/linux 'windows-nt 'cygwin)
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.4)))
    ('darwin
     (progn
       (setq org-format-latex-options (plist-put org-format-latex-options :scale 2))
       (setq org-latex-create-formula-image-program 'dvisvgm))))
  ;; latex '(latex script entities)
  (setq org-highlight-latex-and-related '(latex entities))

  ;; org-export
  (setq org-latex-listings 't)
  (add-to-list 'org-latex-classes
               '("org-plain-latex"
                 "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

**** Org-theme
#+begin_src emacs-lisp
(use-package org-modern
  :hook
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda)
  :init
  (setq org-modern-star '("◉" "●")      ;'("")
        org-modern-table nil
        org-modern-table-vertical 1
        org-modern-table-horizontal 1
        org-modern-todo t
        org-modern-todo-faces
        '(("TODO" . (:inherit fixed-pitch :foreground "white" :background "#B25068" :weight bold))
          ("DONE" . (:inherit fixed-pitch :foreground "black" :background "#6CC4A1" :weight bold))))
  :config
  (defun org-modern--block-fringe () nil))

(use-package org-visual-indent
  :straight `(org-visual-indent
              :host github
              :repo "legalnonsense/org-visual-outline")
  :hook (org-mode . org-visual-indent-mode)
  :config
  ;; match org-headings color
  (setq org-visual-indent-color-indent
        (cl-loop for x from 1 to 8
                 with color = nil
                 do (setq color (or (face-foreground
                                     (intern
                                      (concat "org-level-"
                                              (number-to-string x))))
                                    (face-foreground 'org-level-1)))
                 collect `(,x ,(list
                                :background color
                                :foreground color
                                :height .1)))))

;; Auto-show Markup Symbols
(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :init
  (setq org-pretty-entities t)
  :custom
  (org-appear-autolinks t)
  (org-appear-autosubmarkers t)
  (org-appear-autoentities t)
  (org-appear-autokeywords t)
  (org-appear-inside-latex t))

;; toggle inline latex
(use-package org-fragtog
  :commands (org-fragtog-mode))
#+end_src

**** Org-agenda
#+begin_src emacs-lisp
(defun zw/git-add-commit-push-agenda ()
  (interactive)
  (shell-command "cd ~/Documents/Agenda && git add *")
  (shell-command "cd ~/Documents/Agenda && git commit -m 'Updated all files.'")
  (shell-command "cd ~/Documents/Agenda && git push")
  (message "Agenda pushed!"))

(defun zw/git-pull-agenda ()
  (interactive)
  (shell-command "cd ~/Documents/Agenda && git pull")
  (message "Agenda pulled!"))

;; agenda keys
(bind-keys :prefix-map zw/org-agenda-map
           :prefix "<f12>"
           ("<down>" . zw/git-pull-agenda)
           ("<up>" . zw/git-add-commit-push-agenda)
           ("<f12>" . (lambda (&optional arg)
                        (interactive "P")
                        (org-agenda arg "d"))))

(with-eval-after-load 'org
  (add-hook 'org-agenda-mode-hook 'visual-fill-column-mode)
  (add-hook 'org-agenda-mode-hook
            (lambda ()
              (bind-keys :map org-agenda-mode-map
                         ("s-q" . org-agenda-exit))))
  ;; agenda settings
  (setq org-agenda-files '("~/Documents/Agenda/Work.org"))
  ;; default agenda
  (setq org-log-done 'time
        org-agenda-window-setup 'only-window
        org-agenda-restore-windows-after-quit t
        org-agenda-overriding-header "🗓️ Agenda"
        org-agenda-block-separator ?-
        org-agenda-format-date "%a. %b %d %Y"
        org-agenda-time-grid
        '((daily today require-timed)
          (800 1000 1200 1400 1600 1800 2000)
          "" "┈┈┈┈┈┈┈┈┈┈┈┈┈")
        org-agenda-current-time-string
        "ᐊ┈┈┈┈┈┈┈ Now")
  ;; custom agenda
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "")
            (alltodo "" ((org-agenda-overriding-header "\n⚡ To Do")
                         (org-agenda-sorting-strategy '(priority-down))
                         (org-agenda-todo-keyword-format ""))))))))
#+end_src

**** Custom functions
#+begin_src emacs-lisp
(defun zw/org-fold-all-but-current ()
  (interactive)
  (org-remove-occur-highlights)
  (org-overview)
  (org-reveal))
#+end_src

*** Markdown
#+begin_src emacs-lisp
(use-package adaptive-wrap)
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :hook
  (markdown-mode-hook . adaptive-wrap-prefix-mode)
  :init
  (setq markdown-enable-math t
        markdown-enable-wiki-links t
        markdown-italic-underscore t
        markdown-make-gfm-checkboxes-buttons t
        markdown-gfm-uppercase-checkbox t
        markdown-fontify-code-blocks-natively t
        markdown-code-block-braces t
        markdown-regex-header-setext nil
        markdown-header-scaling t
        markdown-asymmetric-header t)
  (defun zw/markdown-toggle-markup-hiding ()
    (interactive)
    (markdown-toggle-markup-hiding)
    (remove-from-invisibility-spec 'markdown-markup))
  :config
  (add-to-list 'markdown-code-lang-modes '("r" . ess-r-mode)))
#+end_src

*** Latex  
#+begin_src emacs-lisp
;; latex
(use-package tex
  :straight auctex
  :commands (latex-mode LaTeX-mode)
  :init
  (setq TeX-PDF-mode t
        TeX-parse-self t
        TeX-auto-save t
        TeX-insert-braces nil

        TeX-source-correlate-mode t
        TeX-source-correlate-method 'synctex
        ;; Don't start the Emacs server when correlating sources.
        TeX-source-correlate-start-server nil

        TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-save-query nil)
  :config
  ;; revert the PDF-buffer after the TeX compilation has finished
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))

(use-package auctex-latexmk
  :after tex
  :init
  :hook ((latex-mode LaTeX-mode) .
         (lambda ()
           ;; Set LatexMk as the default.
           (setq TeX-command-default "LatexMk")))
  :config
  ;; Pass the -pdf flag when TeX-PDF-mode is active.
  (setq auctex-latexmk-inherit-TeX-PDF-mode t)
  ;; Add LatexMk as a TeX target.
  (auctex-latexmk-setup))

(use-package reftex
  :hook (LaTeX-mode . reftex-mode)
  :config
  (setq reftex-plug-into-AUCTeX t
        reftex-toc-split-windows-fraction 0.2
        reftex-toc-split-windows-horizontally t))

;; auto async preview latex
(use-package xenops
  ;; :hook
  ;; (latex-mode . xenops-mode)
  ;; (LaTeX-mode . xenops-mode)
  :commands (xenops-mode)
  :config
  (setq xenops-reveal-on-entry nil))
#+end_src

** LiterateProgramming
*** Org-babel
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; init org-babel
  (setq org-src-window-setup 'split-window-below
        org-src-preserve-indentation t      ; helps to indent python code in org mode
        org-confirm-babel-evaluate nil
        org-src-tab-acts-natively t)
  
  ;; defer load org babel languages
  (require 'ob-teximg)
  (use-package ob-lisp
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:lisp))
  (use-package ob-latex
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:latex))
  (use-package ob-R
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:R))
  (use-package ob-python
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:python))
  (use-package ob-shell
    :defer t
    :straight (:type built-in)
    :commands
    (org-babel-execute:sh
     org-babel-expand-body:sh))

  ;; alias ess-r to R
  (defalias 'org-babel-execute:ess-r 'org-babel-execute:R)
  (defalias 'org-babel-ess-r-initiate-session
    'org-babel-R-initiate-session))
#+end_src

*** Code-cell
#+begin_src emacs-lisp
(use-package code-cells
  :hook (python-mode . code-cells-mode-maybe)
  :bind ((:map code-cells-mode-map
               ("C-c C-c" . code-cells-eval)
               ("M-n e" . zw/jupyter-export-to)))
  :config
  (defun zw/jupyter-export-to (file-type)
    (interactive
     (list (completing-read "jupyter export to: "
                            '("pdf" "html") nil t)))
    (when (string= (file-name-extension buffer-file-name) "ipynb")
      (async-shell-command
       (concat "jupyter nbconvert --execute --to " file-type " "
               (shell-quote-argument buffer-file-name))))))
#+end_src

*** Polymode
#+begin_src emacs-lisp
(use-package polymode
  :commands polymode-mode
  :init
  (setq poly-lock-allow-fontification nil
        poly-lock-allow-background-adjustment t
        ;; disable this for now because of reverse-typing issue in poly-R
        polymode-lsp-integration nil)
  :config
  ;; match inner mode face with markdown-code-face
  (defun zw/poly-lock-adjust-span-face (span)
    (interactive "r")
    (font-lock-append-text-property
     (nth 1 span) (nth 2 span) 'face 'markdown-code-face))
  (advice-add #'poly-lock-adjust-span-face
              :override #'zw/poly-lock-adjust-span-face))

(use-package poly-markdown
  :commands (poly-markdown-mode poly-gfm-mode)
  :mode
  ("\\.md$" . poly-gfm-mode))

(use-package poly-R
  :commands (poly-markdown+r-mode)
  :mode
  ("\\.[rR]md\\'" . poly-gfm+r-mode))
#+end_src

** Readers
#+begin_src emacs-lisp
;; pdf-tools need to be deleted and reinstalled after after emacs update
(use-package pdf-tools
  :bind ((:map pdf-view-mode-map
               ("C-s" . isearch-forward)
               ("s-f" . isearch-forward)
               ("s-=" . pdf-view-enlarge)
               ("s-+" . pdf-view-enlarge)
               ("s--" . pdf-view-shrink)
               ("j" . pdf-view-next-line-or-next-page)
               ("k" . pdf-view-previous-line-or-previous-page)
               ("q" . nil)))
  :init
  (setq pdf-view-display-size 'fit-page
        pdf-view-use-imagemagick nil
        pdf-view-continuous nil
        pdf-view-use-scaling t
        pdf-annot-activate-created-annotations t)
  (pdf-loader-install))
#+end_src

** Spelling
#+begin_src emacs-lisp
;; On-the-fly spell checker
(use-package flyspell
  :straight (:type built-in)
  :diminish
  :hook (((text-mode outline-mode) . flyspell-mode)
         (prog-mode . flyspell-prog-mode))
  :init (setq flyspell-issue-message-flag nil
              flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face)
              ispell-program-name "aspell"
              ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together")))

(use-package flyspell-correct
  :after flyspell
  :bind ((:map flyspell-mode-map ("M-$" . flyspell-correct-at-point))))
#+end_src

