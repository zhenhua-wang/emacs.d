#+Title: Emacs Configuration
#+AUTHOR: Zhenhua Wang
#+auto_tangle: t
#+PROPERTY: header-args+ :tangle "yes"

- TDOD list:
  - manage faces in a single section
    --------------
* Header
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

* Startup
** Garbage collection
#+begin_src emacs-lisp
(use-package gcmh
  :diminish
  :hook
  (after-init . gcmh-mode)
  :init
  (setq gcmh-idle-delay 'auto
        gcmh-auto-idle-delay-factor 10
        gcmh-high-cons-threshold #x1000000))
#+end_src

** Keep .emacs.d Clean
#+begin_src emacs-lisp
;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering)

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src

** Benchmark
#+begin_src emacs-lisp
(use-package benchmark-init
  :init
  (benchmark-init/activate)
  :config
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src

** Keyfreq
#+begin_src emacs-lisp
(use-package keyfreq
  :hook
  (after-init . keyfreq-mode)
  (after-init . keyfreq-autosave-mode))
#+end_src

** Exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (or (eq system-type 'darwin)
          (eq system-type 'gnu/linux)
          (daemonp))
  :init
  (setq exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize))
#+end_src

* Setting
** Global variable
#+begin_src emacs-lisp
(setq zw/font-size 150)
(setq zw/font-size-fixed-pitch 150)
(setq zw/font-size-variable-pitch 200)
(setq zw/default-font "Roboto Mono")
(setq zw/font-fixed-pitch "Hack") ;; "JetBrains Mono"
(setq zw/font-variable-pitch "ETBembo")
(setq zw/font-title "ETBembo")
#+end_src

** Global setting
  #+begin_src emacs-lisp
(use-package emacs
  :straight (:type built-in)
  :hook
  (after-init . global-visual-line-mode)
  ;; Revert buffers when the underlying file has changed
  (after-init . global-auto-revert-mode)
  ;; yank overwrite what is selected
  (after-init . delete-selection-mode)
  ;; fringe (nil is default)
  (after-init . fringe-mode)
  :config
  (require 'zw-utils)
  ;; setq default folder
  (setq default-directory (concat (getenv "HOME") "/"))
  ;; default coding
  (set-default-coding-systems 'utf-8)
  ;; start server mode
  (server-start)
  ;; cursor
  (blink-cursor-mode 1)
  (setq-default cursor-type 'bar)
  ;; save clipboard before kill ring
  (setq save-interprogram-paste-before-kill t)
  (setq-default select-enable-clipboard t)
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)
  ;; Use spaces instead of tabs for indentation
  (setq-default indent-tabs-mode nil)
  ;; confirm emacs quit
  (setq confirm-kill-emacs 'yes-or-no-p)
  ;; simplify yes no
  ;; (defalias 'yes-or-no-p 'y-or-n-p)
  ;; make scratch and dashboard unkillable
  (add-hook 'kill-buffer-query-functions #'zw/dont-kill-scratch)
  (defun zw/dont-kill-scratch ()
    (if (not (equal (buffer-name) "*scratch*"))
        t
      ;; (message "Not allowed to kill %s, burying instead" (buffer-name))
      (bury-buffer)
      nil))
  ;; close window when close shell buffer including REPLs
  (defun zw/close-shell ()
    (interactive)
    (if (one-window-p)
        (kill-buffer)
      (kill-buffer-and-window)))
  ;; delete or bury
  (defun zw/delte-window-or-bury-buffer ()
    (interactive)
    (if (one-window-p)
        (bury-buffer)
      (delete-window)))
  ;; update zw/emacs
  (defun zw/update-emacs ()
    (interactive)
    (shell-command "cd ~/.emacs.d && git pull")
    (message "Emacs updated!")))
  #+end_src

** Global keybinding
#+begin_src emacs-lisp
;; modifiers
;; In macos, I also remap caps lock to ctrl using Karabiner-Elements
(pcase system-type
  ('darwin
   (progn
     (setq mac-right-command-modifier 'hyper)
     (setq mac-command-modifier 'super)
     (setq mac-option-modifier 'meta))))

;; keys
(bind-keys :map global-map
           ("<escape>" . keyboard-quit) ;keyboard-escape-quit
           ("<f5>" . zw/update-emacs)
           ;; disable some weird k
           ("C-z" . nil)
           ("<prior>" . nil)
           ("<next>" . nil)
           ("<home>" . nil)
           ("<end>" . nil)
           ;; disable scroll zoom
           ("C-<mouse-4>" . nil)
           ("C-<mouse-5>" . nil)
           ("C-<wheel-down>" . nil)
           ("C-<wheel-up>" . nil)
           ;; completion
           ("<C-tab>" . completion-at-point)
           ;; editing
           ("s-z" . undo)
           ("s-x" . kill-region)
           ("s-c" . kill-ring-save)
           ("s-v" . yank)
           ("s-a" . mark-whole-buffer)
           ("s-s" . save-buffer)
           ("s-S" . write-file)
           ("s-l" . goto-line)
           ;; term/shell
           ("s-e" . eshell)
           ("s-E" . vterm)
           ;; buffer operations
           ("s-q" . kill-current-buffer)
           ("s-=" . text-scale-increase)
           ("s--" . text-scale-decrease)
           ;; window operations
           ("s-w" . delete-window)
           ("s-t" . zw/split-window-sensibly-prefer-horizontal)
           ("s-<left>" . windmove-left)
           ("s-<right>" . windmove-right)
           ("s-<up>" . windmove-up)
           ("s-<down>" . windmove-down)
           ;; tab operations
           ("s-1" . (lambda () (interactive) (tab-select 1)))
           ("s-2" . (lambda () (interactive) (tab-select 2)))
           ("s-3" . (lambda () (interactive) (tab-select 3)))
           ("s-4" . (lambda () (interactive) (tab-select 4)))
           ("s-5" . (lambda () (interactive) (tab-select 5)))
           ("s-n" . tab-new)
           ;; misc commands
           ("s-T" . zw/toggle-transparency)
           ("C-c o" . er-open-with)
           ;; (global-set-key (kbd "C-c p") 'zw/get-passwd)
           ("s-\\" . toggle-input-method)
           ;; minibuffer
           :map minibuffer-mode-map
           ("<escape>" . minibuffer-keyboard-quit)
           :map isearch-mode-map
           ("s-f" . isearch-repeat-forward))
#+end_src

* Appearance
** Font face
Vanilla Emacs: You can use ~C-x C-+~ and ~C-x C--~ (~text-scale-adjust~) to increase or decrease the buffer text size (~C-+~ or ~C--~ to repeat).

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                       :font zw/default-font
                       ;; make fonts less tranparent
                       ;; :weight 'medium
                       :height zw/font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil
                    :font zw/font-fixed-pitch
                    :weight 'normal
                    :height zw/font-size-fixed-pitch)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil
                    :font zw/font-variable-pitch
                    :weight 'light
                    :height zw/font-size-variable-pitch)

;; Use variable width font faces in current buffer
(defun zw/buffer-face-mode-variable ()
  "Set font to a variable width (proportional) fonts in current buffer"
  (interactive)
  (setq buffer-face-mode-face
        (list ':family zw/font-variable-pitch ':height zw/font-size-variable-pitch))
  (buffer-face-mode))

;; Use monospaced font faces in current buffer
(defun zw/buffer-face-mode-fixed ()
  "Sets a fixed width (monospace) font in current buffer"
  (interactive)
  (setq buffer-face-mode-face
        (list ':family zw/font-fixed-pitch ':height zw/font-size-fixed-pitch))
  (buffer-face-mode))

;; Set default font faces for Info and ERC modes
(add-hook 'text-mode-hook 'zw/buffer-face-mode-variable)
(dolist (mode '(prog-mode-hook
                imenu-list-major-mode-hook
                markdown-mode-hook
                latex-mode-hook LaTeX-mode-hook))
  (add-hook mode 'zw/buffer-face-mode-fixed))
#+end_src

** Theme
#+begin_src emacs-lisp
(use-package modus-themes
  :init
  ;; Configure the Modus Themes' appearance
  (setq modus-themes-mode-line '(moody accented borderless)
        modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-fringes 'subtle
        modus-themes-tabs-accented t
        modus-themes-paren-match '(bold intense)
        modus-themes-prompts '(bold intense)
        modus-themes-region '(accented)
        modus-themes-completions '((matches . (extrabold))
                                   (selection . (semibold accented))
                                   (popup . (accented intense)))
        modus-themes-org-blocks 'gray-background
        modus-themes-scale-headings t
        modus-themes-headings '((1 . (rainbow overline background 1.4))
                                (2 . (rainbow background 1.3))
                                (3 . (rainbow bold 1.2))
                                (t . (semilight 1.1)))))

(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(load-theme 'doom-one t)

(require 'zw-org-theme)
(require 'zw-md-theme)
(require 'zw-vterm-theme)

(defun zw/update-theme ()
  (interactive)
  (zw/modeline-theme)
  (zw/tab-bar-theme)
  (when (featurep 'org)
    (zw/set-org-headline))
  (when (featurep 'markdown)
    (zw/set-md-headline))
  (when (featurep 'vterm)
    (zw/set-vterm-color))
  (when (featurep 'corfu)
    (zw/corfu-theme))
  ;; change pdf-view-mode color when using dark color theme
  (if (string= (frame-parameter nil 'background-mode) "dark")
      (progn
        (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
        (when (derived-mode-p 'pdf-view-mode)
          (pdf-view-midnight-minor-mode 1)))
    (progn
      (remove-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
      (when (derived-mode-p 'pdf-view-mode)
        (pdf-view-midnight-minor-mode 0)))))
;; apply zw/update-theme after consult-theme
(advice-add 'consult-theme :after
            (lambda (&rest args) (zw/update-theme)))
#+end_src

** Modeline
#+begin_src emacs-lisp
(defun zw/modeline-theme ()
  (interactive)
  (setq x-underline-at-descent-line t)
  (setq x-use-underline-position-properties nil)
  ;; set modeline face font
  (dolist (face '(mode-line mode-line-active mode-line-inactive))
    (set-face-attribute face nil :box nil :font zw/default-font))
  ;; set doom-modeline face weight
  (dolist (face '(doom-modeline-buffer-path
                  doom-modeline-buffer-file
                  doom-modeline-buffer-modified
                  doom-modeline-buffer-major-mode
                  doom-modeline-project-parent-dir
                  doom-modeline-project-root-dir
                  doom-modeline-debug
                  doom-modeline-info
                  doom-modeline-time))
    (set-face-attribute face nil :weight 'normal)))

(use-package minions
  :hook (doom-modeline . minions-mode))

(use-package doom-modeline
  :hook
  (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-bar-width 8)
  (doom-modeline-lsp t)
  (doom-modeline-enable-word-count t)
  (doom-modeline-minor-modes nil)
  (doom-modeline-icon nil)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-checker-simple-format nil)
  (doom-modeline-buffer-file-name-style 'truncate-except-project)
  :config
  ;; load theme
  (zw/modeline-theme)
  ;; show that the R is running in inferior ess R mode
  (add-hook 'inferior-ess-mode-hook
            (lambda ()
              (add-to-list 'mode-line-process
                           '(:eval (nth
                                    ess--busy-count
                                    ess-busy-strings)))))
  ;; show keycast in misc-info
  ;; (add-to-list 'mode-line-misc-info '("" keycast-mode-line))
  ;; (add-hook 'pre-command-hook 'keycast--update t)
  ;; hide battery on modeline and show it on tab-bar
  (remove-hook 'display-battery-mode-hook
               #'doom-modeline-override-battery-modeline)
  (remove-hook 'doom-modeline-mode-hook
               #'doom-modeline-override-battery-modeline)
  ;; set doom-modeline active when emacs is unfocused
  (setq doom-modeline--remap-faces nil))
#+end_src

** Tab bar
#+begin_src emacs-lisp
(setq tab-bar-tab-name-function 'tab-bar-tab-name-truncated)
(setq tab-bar-new-tab-choice "*scratch*")
(setq tab-bar-new-button-show nil)
(setq tab-bar-close-button-show nil)
;; this should be placed after theme, since theme would overwrite these attributes
(defun zw/tab-bar-theme ()
  (interactive)
  (set-face-attribute 'tab-bar-tab nil
                      ;; :background (face-background 'mode-line)
                      :foreground (face-foreground 'default)
                      :background (face-background 'mode-line)
                      :underline (zw/get-face-bg-recur 'doom-modeline-bar) ;"#950b96"
                      :box (face-background 'mode-line)
                      :font zw/default-font)
  (set-face-attribute 'tab-bar-tab-inactive nil
                      :foreground (face-foreground 'font-lock-comment-face)
                      :background (face-background 'mode-line)
                      :underline nil
                      :box (face-background 'mode-line)
                      :font zw/default-font)
  (set-face-attribute 'tab-bar nil
                      :foreground (face-foreground 'default)
                      :background (face-background 'mode-line)
                      :box (face-background 'mode-line)
                      :font zw/default-font))
(with-eval-after-load 'doom-modeline
  ;; set tab-bar theme
  (zw/tab-bar-theme))
;; display battery to the right
(setq tab-bar-format '(tab-bar-format-menu-bar
                       tab-bar-format-history
                       tab-bar-format-tabs
                       tab-bar-separator
                       tab-bar-format-align-right
                       tab-bar-format-global))
;; set string for tab-bar-separator
(setq tab-bar-separator " ")

;; show battery
(require 'battery)
(setq have-battery-status-p
      (let ((perc-charged (assoc ?p (funcall battery-status-function))))
        (and perc-charged
             (not (zerop (string-to-number (cdr perc-charged)))))))
(if have-battery-status-p
    (display-battery-mode 1))
;; show menu
(defun tab-bar-format-menu-bar ()
  "Produce the Menu button for the tab bar that shows the menu bar."
  `((menu-bar menu-item (propertize " ☰" 'face 'tab-bar)
              tab-bar-menu-bar :help "Menu Bar")))

(tab-bar-mode 1)
#+end_src

** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :disabled
  :bind
  (:map dashboard-mode-map ("<tab>" . dashboard-return))
  :init
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner 1
        dashboard-center-content t
        dashboard-items '((agenda . 5)
                          (recents  . 5))
        dashboard-set-footer nil
        dashboard-set-init-info nil
        dashboard-set-heading-icons nil
        dashboard-set-file-icons nil))
#+end_src

** iMenu
#+begin_src emacs-lisp
(use-package imenu-list
  ;; don't lazy load this, otherwise its face won't break
  :demand
  :bind (("C-c =" . imenu-list-smart-toggle))
  :init
  (setq imenu-list-focus-after-activation t
        imenu-list-idle-update-delay 0.1)
  :config
  ;; set window placement
  ;; set modeline
  (defun zw/imenu-list--set-mode-line ()
    (setq zw/imenu-list-mode-line-format
          '("%e" (:eval (doom-modeline-segment--bar))
            " IMenu: " (:eval (buffer-name imenu-list--displayed-buffer))))
    (setq-local mode-line-format zw/imenu-list-mode-line-format))
  (advice-add #'imenu-list--set-mode-line :override #'zw/imenu-list--set-mode-line))
#+end_src

** Scroll
#+begin_src emacs-lisp
;; Mouse & Smooth Scroll
;; Scroll one line at a time (less "jumpy" than defaults)
(when (display-graphic-p)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . hscroll))
        mouse-wheel-scroll-amount-horizontal 1
        mouse-wheel-progressive-speed nil))

(setq scroll-preserve-screen-position t)

;; Good pixel line scrolling
(if (fboundp 'pixel-scroll-precision-mode)
    (progn
      (pixel-scroll-precision-mode t)
      (bind-keys :map pixel-scroll-precision-mode-map
                 ("<prior>" . nil)
                 ("<next>" . nil))))

(use-package iscroll
  :diminish
  :hook
  (image-mode . iscroll-mode)
  (org-mode . iscroll-mode)
  (markdown-mode . iscroll-mode))
#+end_src

** Posframe
#+begin_src emacs-lisp
(use-package posframe)
#+end_src

** Keycast
#+begin_src emacs-lisp
(use-package keycast
  :hook (after-init . keycast-tab-bar-mode)
  :init (setq keycast-tab-bar-location 'tab-bar-format-align-right
              keycast-tab-bar-format "%k%c%R "
              keycast-tab-bar-minimal-width 0)
  :config
  (set-face-attribute 'keycast-key nil
                      :font zw/default-font)
  (set-face-attribute 'keycast-command nil
                      :font zw/default-font))
#+end_src

** All-the-icons
   #+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p)
  :init (setq all-the-icons-scale-factor 1)
  :config
  (add-to-list 'all-the-icons-extension-icon-alist
               '("rmd" all-the-icons-octicon "markdown" :v-adjust 0.0 :face all-the-icons-lblue)))
   #+end_src

** Line number mode
   #+begin_src emacs-lisp
;; line number mode
(setq column-number-mode t)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'text-mode-hook 'display-line-numbers-mode)
(add-hook 'conf-mode-hook 'display-line-numbers-mode)
;; Override some modes which derive from the above
(dolist (mode '(org-mode-hook markdown-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
   #+end_src

** Overlay
#+begin_src emacs-lisp
(use-package ov)
#+end_src

** Rain-bow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+end_src

** Rainbow mode
   #+begin_src emacs-lisp
;; Sets the background of HTML color strings in buffers to be the color mentioned.
(use-package rainbow-mode
  :diminish
  :hook
  (prog-mode . rainbow-mode)
  (text-mode . rainbow-mode)
  :config
  ;; Use overlay to show color. This solves the conflict with hl-line
  (defun zw/rainbow-colorize-match-overlay (color &optional match)
    (let ((match (or match 0)))
      (ov
       (match-beginning match) (match-end match)
       'face `((:family ,zw/font-fixed-pitch)
               (:height ,zw/font-size-fixed-pitch)
               (:slant normal)
               (:foreground ,(if (> 0.5 (rainbow-x-color-luminance color))
                                 "white" "black"))
               (:background ,color))
       'priority 5000)))
  (advice-add #'rainbow-colorize-match :override
              #'zw/rainbow-colorize-match-overlay))
   #+end_src

** Pulsar
#+begin_src emacs-lisp
(use-package pulsar
  :init
  (setq pulsar-pulse-functions
        '(recenter-top-bottom
          move-to-window-line-top-bottom
          reposition-window
          forward-page
          backward-page
          scroll-up-command
          scroll-down-command
          org-next-visible-heading
          org-previous-visible-heading
          org-forward-heading-same-level
          org-backward-heading-same-level
          outline-backward-same-level
          outline-forward-same-level
          outline-next-visible-heading
          outline-previous-visible-heading
          outline-up-heading))
  (setq pulsar-pulse-on-window-change t)
  (setq pulsar-pulse t)
  (setq pulsar-delay 0.055)
  (setq pulsar-iterations 10)
  (setq pulsar-face 'pulsar-generic)
  (setq pulsar-highlight-face 'pulsar-yellow)
  :hook
  (after-init . pulsar-global-mode))
#+end_src

** Toggle transparency
#+begin_src emacs-lisp
(defun zw/toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(85 . 85) '(100 . 100)))))
#+end_src

** Paren
#+begin_src emacs-lisp
;; Highlight matching parens
(use-package paren
  :straight (:type built-in)
  :hook (after-init . show-paren-mode)
  :init (setq show-paren-when-point-inside-paren nil
              show-paren-when-point-in-periphery nil)
  :config
  (set-face-attribute 'show-paren-match nil
                      :background (face-background 'highlight)
                      :foreground (face-foreground 'highlight))
  (with-no-warnings
    ;; Display matching line for off-screen paren.
    (defun display-line-overlay (pos str &optional face)
      "Display line at POS as STR with FACE.
FACE defaults to inheriting from default and highlight."
      (let ((ol (save-excursion
                  (goto-char pos)
                  (make-overlay (line-beginning-position)
                                (line-end-position)))))
        (overlay-put ol 'display str)
        (overlay-put ol 'face
                     (or face '(:inherit highlight)))
        ol))

    (defvar-local show-paren--off-screen-overlay nil)
    (defun show-paren-off-screen (&rest _args)
      "Display matching line for off-screen paren."
      (when (overlayp show-paren--off-screen-overlay)
        (delete-overlay show-paren--off-screen-overlay))
      ;; Check if it's appropriate to show match info,
      (when (and (overlay-buffer show-paren--overlay)
                 (not (or cursor-in-echo-area
                          executing-kbd-macro
                          noninteractive
                          (minibufferp)
                          this-command))
                 (and (not (bobp))
                      (memq (char-syntax (char-before)) '(?\) ?\$)))
                 (= 1 (logand 1 (- (point)
                                   (save-excursion
                                     (forward-char -1)
                                     (skip-syntax-backward "/\\")
                                     (point))))))
        ;; Rebind `minibuffer-message' called by `blink-matching-open'
        ;; to handle the overlay display.
        (cl-letf (((symbol-function #'minibuffer-message)
                   (lambda (msg &rest args)
                     (let ((msg (apply #'format-message msg args)))
                       (setq show-paren--off-screen-overlay
                             (display-line-overlay
                              (window-start) msg ))))))
          (blink-matching-open))))
    (advice-add #'show-paren-function :after #'show-paren-off-screen)))
#+end_src

** Highlight line
#+begin_src emacs-lisp
;; Highlight the current line
(use-package hl-line
  :straight (:type built-in)
  :hook ((after-init . global-hl-line-mode)
         ((dashboard-mode eshell-mode shell-mode term-mode vterm-mode) .
          (lambda () (setq-local global-hl-line-mode nil)))))
#+end_src

** Highlight TODO
#+begin_src emacs-lisp
;; Highlight TODO and similar keywords in comments and strings
(use-package hl-todo
  :custom-face
  (hl-todo ((t (:inherit fixed-pitch :height 0.9 :width condensed :weight bold :underline nil :inverse-video t))))
  :bind ((:map hl-todo-mode-map
               ([C-f3] . hl-todo-occur)
               ("C-c t p" . hl-todo-previous)
               ("C-c t n" . hl-todo-next)
               ("C-c t o" . hl-todo-occur)
               ("C-c t i" . hl-todo-insert)))
  :hook (after-init . global-hl-todo-mode)
  ;; :init (setq hl-todo-require-punctuation t
  ;; hl-todo-highlight-punctuation ":")
  :config
  (dolist (keyword '("BUG" "DEFECT" "ISSUE"))
    (add-to-list 'hl-todo-keyword-faces `(,keyword . "#e45649")))
  (dolist (keyword '("TRICK" "WORKAROUND"))
    (add-to-list 'hl-todo-keyword-faces `(,keyword . "#d0bf8f")))
  (dolist (keyword '("DEBUG" "STUB"))
    (add-to-list 'hl-todo-keyword-faces `(,keyword . "#7cb8bb"))))
#+end_src

** Highlight uncommitted changes
#+begin_src emacs-lisp
;; Highlight uncommitted changes using VC
(use-package diff-hl
  :bind ((:map diff-hl-command-map
               ("SPC" . diff-hl-mark-hunk)))
  :hook ((after-init . global-diff-hl-mode)
         (dired-mode . diff-hl-dired-mode)
         ((after-load-theme server-after-make-frame) . my-set-diff-hl-faces))
  :init (setq diff-hl-draw-borders nil
              diff-hl-side 'right)
  :config
  ;; Highlight on-the-fly
  (diff-hl-flydiff-mode 1)

  ;; Set fringe style
  (setq-default fringes-outside-margins t)

  (defun my-set-diff-hl-faces ()
    "Set `diff-hl' faces."
    (custom-set-faces
     `(diff-hl-change ((t (:foreground ,(face-background 'highlight) :background nil))))
     '(diff-hl-insert ((t (:inherit diff-added :background nil))))
     '(diff-hl-delete ((t (:inherit diff-removed :background nil))))))

  (with-no-warnings
    (defun my-diff-hl-fringe-bmp-function (_type _pos)
      "Fringe bitmap function for use as `diff-hl-fringe-bmp-function'."
      (define-fringe-bitmap 'my-diff-hl-bmp
        (vector #b11100000)
        1 8
        '(center t)))
    (setq diff-hl-fringe-bmp-function #'my-diff-hl-fringe-bmp-function)

    (unless (display-graphic-p)
      ;; Fall back to the display margin since the fringe is unavailable in tty
      (diff-hl-margin-mode 1)
      ;; Avoid restoring `diff-hl-margin-mode'
      (with-eval-after-load 'desktop
        (add-to-list 'desktop-minor-mode-table
                     '(diff-hl-margin-mode nil))))

    ;; Integration with magit
    (with-eval-after-load 'magit
      (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
      (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))))
#+end_src

* Window
** Popper
#+begin_src emacs-lisp
(use-package popper
  :bind (("C-`"   . popper-toggle-latest)
         ("M-`"   . popper-cycle)
         ("C-M-`" . popper-toggle-type))
  :hook
  (after-init . popper-mode)
  (popper-mode . popper-echo-mode)
  :init
  (setq popper-reference-buffers
        '("[Oo]utput\\*$"
          "^\\*Warnings\\*"
          "^\\*Compile-Log\\*"
          "^\\*Messages\\*"
          "^\\*Backtrace\\*"
          "^\\*ielm\\*"
          "^\\*Tex Help\\*"
          "^\\*Shell Command Output\\*"
          "^\\*Async Shell Command\\*"
          "^\\*WordNut\\*"
          "^\\*help[R].*"
          "^\\*polymode export\\*"
          help-mode
          eshell-mode
          vterm-mode
          message-mode
          compilation-mode)))
#+end_src

** Winner-mode
#+begin_src emacs-lisp
(use-package winner
  :hook (after-init . winner-mode)
  :bind (("s-T" . winner-undo)
         ("s-u" . winner-undo)
         ("s-U" . winner-redo)))
#+end_src

** Window split preference
#+begin_src emacs-lisp
;; set preference to horizontal split
(defun zw/split-window-sensibly-prefer-horizontal (&optional window)
  "Based on split-window-sensibly, but designed to prefer a horizontal split,
i.e. windows tiled side-by-side."
  (interactive)
  (let ((window (or window (selected-window))))
    (or (and (window-splittable-p window t)
             ;; Split window horizontally
             (with-selected-window window
               (split-window-right)))
        (and (window-splittable-p window)
             ;; Split window vertically
             (with-selected-window window
               (split-window-below)))
        (and
         (let ((frame (window-frame window)))
           (or
            (eq window (frame-root-window frame))
            (catch 'done
              (walk-window-tree (lambda (w)
                                  (unless (or (eq w window)
                                              (window-dedicated-p w))
                                    (throw 'done nil)))
                                frame)
              t)))
         (not (window-minibuffer-p window))
         (let ((split-width-threshold 0))
           (when (window-splittable-p window t)
             (with-selected-window window
               (split-window-right)))))))
  ;; switch to scratch buffer after creating new window
  (other-window 1 nil)
  (switch-to-buffer "*scratch*"))

(setq split-width-threshold  80
      split-height-threshold 80
      xsplit-window-preferred-function 'split-window-sensibly-prefer-horizontal)
#+end_src

** Control Buffer Placement
I combine this with =popper.el= now! This is a great feature, as popper turn these buffers to =pop= buffer, so that I could toggle with ~C-`~. Besides =pop= buffer would change my current window placement.
#+begin_src emacs-lisp
;; hook to popper-mode in case popper overwrite this behavior
(add-hook 'popper-mode-hook (lambda ()
  (setq display-buffer-base-action
        '(display-buffer-reuse-mode-window
          display-buffer-reuse-window
          display-buffer-same-window))

  ;; If a popup does happen, don't resize windows to be equal-sized
  (setq even-window-sizes nil)

  (setq display-buffer-alist
        '(;; top side window
          ("\\*\\(Flymake\\|Package-Lint\\|vc-git :\\).*"
           (display-buffer-in-side-window)
           (window-height . 0.2)
           (side . top)
           (slot . 0))
          ("\\*Messages.*"
           (display-buffer-in-side-window)
           (window-height . 0.2)
           (side . top)
           (slot . 1))
          ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\)\\*"
           (display-buffer-in-side-window)
           (window-height . 0.2)
           (side . top)
           (slot . 2))
          ("\\*polymode export.*"
           (display-buffer-in-side-window)
           (window-height . 0.2)
           (side . top)
           (slot . 1))
          ("\\*compilation.*"
           (display-buffer-in-side-window)
           (window-height . 0.2)
           (side . top)
           (slot . 1))
          ;; right side window
          ("\\*[Hh]elp.*"            ; See the hooks for `visual-line-mode'
           (display-buffer-in-side-window)
           (window-width . 0.5)
           (side . right)
           (slot . -1))
          ("\\*Man.*"
           (display-buffer-in-side-window)
           (window-width . 0.5)
           (side . right)
           (slot . -1))
          ("\\*eglot doc.*"
           (display-buffer-in-side-window)
           (window-width . 0.5)
           (side . right)
           (slot . -1))
          ("\\*Org Agenda.*"
           (display-buffer-reuse-mode-window)
           (window-width . 0.5)
           (side . right)
           (slot . 1))
          ("\\*\\(R\\|Python\\).*"
           (display-buffer-reuse-mode-window)
           (side . right)
           (slot . -1)
           (window-width . 0.3))
          ;; left side window
          ("^\\*Ilist\\*$"
           (display-buffer-in-side-window)
           (window-width . 0.2)
           (side . left)
           (slot . 1))
          ;; bottom buffer (NOT side window)
          ("\\*.*\\(e?shell\\|v?term\\).*"
           (display-buffer-at-bottom)
           ;; (display-buffer-in-side-window)
           (window-height . 0.2)
           (side . bottom))
          ;; ("\\*R.*"
          ;;  (display-buffer-reuse-mode-window display-buffer-at-bottom)
          ;;  (window-height . 0.3))
          ;; below current window
          ("\\*Calendar.*"
           (display-buffer-reuse-mode-window display-buffer-below-selected)
           (window-height . shrink-window-if-larger-than-buffer))))

  ;; If a popup does happen, don't resize windows to be equal-sized
  (setq even-window-sizes nil)))
#+end_src

* Tool
** Tramp
For host with two factor auth, you need to
1. enter password
2. enter the second-step code

 Usage:
- ~(find-file "/ssh:zhenhua@127.0.0.1#3022:~/")~

#+begin_src emacs-lisp
;; Set default connection mode to SSH
(setq tramp-default-method "ssh")
(setq tramp-auto-save-directory
      (expand-file-name "tramp-auto-save" user-emacs-directory))
(setq tramp-persistency-file-name
      (expand-file-name "tramp-connection-history" user-emacs-directory))
(setq password-cache-expiry nil)
(setq remote-file-name-inhibit-cache nil)
(setq tramp-use-ssh-controlmaster-options nil)
(setq vc-ignore-dir-regexp
      (format "\\(%s\\)\\|\\(%s\\)"
              vc-ignore-dir-regexp
              tramp-file-name-regexp))
(with-eval-after-load 'tramp
  (customize-set-variable 'tramp-ssh-controlmaster-options
                          (concat
                           "-o ControlPath=/tmp/ssh-tramp-%%r@%%h:%%p "
                           "-o ControlMaster=auto -o ControlPersist=yes"))
  ;; respect the PATH variable on the remote machine
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src

Tips:
- use ssh config file
#+begin_example :tangle "no"
Host vm-server
    HostName 127.0.0.1
    User zhenhua
    Port 3022
#+end_example

- enable ssh on server
#+begin_example :tangle "no"
sudo apt-get install openssh-server
sudo systemctl enable ssh
sudo systemctl start ssh
#+end_example

** Comint
#+begin_src emacs-lisp
(use-package comint
  :straight (:type built-in)
  :config
  ;; Make processes’ outputs read-only. The prompt is easy.
  (setq comint-prompt-read-only t
        ansi-color-for-comint-mode 'filter
        comint-scroll-to-bottom-on-input t
        comint-scroll-to-bottom-on-output nil
        comint-move-point-for-output nil))
#+end_src

** Eshell
#+begin_src emacs-lisp
(use-package eshell
  :straight (:type built-in)
  :bind ((:map eshell-mode-map
               :package esh-mode
               ("s-q" . zw/close-shell)
               ("s-e" . zw/delte-window-or-bury-buffer))
         (:map eshell-hist-mode-map
               :package em-hist
               ("M-s" . nil)))
  :init
  (setq eshell-banner-message
        '(format "%s %s\n"
                 (propertize (format " %s " (string-trim (buffer-name)))
                             'face 'mode-line-highlight)
                 (propertize (current-time-string)
                             'face 'font-lock-keyword-face))
        eshell-scroll-to-bottom-on-input 'all
        eshell-scroll-to-bottom-on-output nil
        eshell-kill-processes-on-exit t
        eshell-hist-ignoredups t
        ;; don't record command in history if prefixed with whitespace
        eshell-input-filter (lambda (input) (not (string-match-p "\\`\\s-+" input)))
        ;; em-glob
        eshell-glob-case-insensitive t
        eshell-error-if-no-glob t))

(use-package eshell-git-prompt
  :config
  (eshell-git-prompt-use-theme 'robbyrussell))

(use-package eshell-syntax-highlighting
  :hook (eshell-mode . eshell-syntax-highlighting-mode))
#+end_src

** Vterm
For detailed Config, see https://github.com/akermu/emacs-libvterm#shell-side-configuration

#+begin_src emacs-lisp
(use-package vterm
  :straight `(:pre-build (("rm" "-fr" "build")
                          ("mkdir" "build")
                          ("bash" "-c" "cd \"$1\" && cmake .. && make" "--"
                           ,(concat (straight--repos-dir "emacs-libvterm") "build"))))
  :bind ((:map vterm-copy-mode-map
               ("<return>" . vterm-copy-mode))
         (:map vterm-mode-map
               ("s-e" . zw/delte-window-or-bury-buffer)))
  :init
  (setq vterm-kill-buffer-on-exit t)
  ;; close window when vterm exit
  (add-hook 'vterm-exit-functions
            (lambda (_ _)
              (let* ((buffer (current-buffer))
                     (window (get-buffer-window buffer)))
                (when (not (one-window-p))
                  (delete-window window)))))
  :config
  (zw/set-vterm-color))
#+end_src

** Dired
#+begin_src emacs-lisp
(use-package dired
  :straight (:type built-in)
  :hook
  (dired-mode . dired-async-mode)
  :init
  (setq dired-kill-when-opening-new-dired-buffer t)
  (when (eq system-type 'darwin)
    (setq insert-directory-program "gls"
          dired-use-ls-dired t
          dired-listing-switches "-al --group-directories-first")))

;; Quick sort dired buffers via hydra
(use-package dired-quick-sort
  :bind ((:map dired-mode-map
               ("S" . hydra-dired-quick-sort/body))))

(use-package diredfl
  :hook (dired-mode . diredfl-mode))

(use-package all-the-icons-dired
  :if (display-graphic-p)
  :hook (dired-mode . all-the-icons-dired-mode)
  :init (setq all-the-icons-dired-monochrome nil))
#+end_src

** Openwith
#+begin_src emacs-lisp
(use-package openwith
  :hook
  (after-init . openwith-mode)
  :config
  (setq openwith-associations
        (list
         (list (openwith-make-extension-regexp
                '("doc" "docx" "xls" "xlsx" "ppt" "pptx" "odt" "ods" "odg" "odp"
                  "mpg" "mpeg" "mp3" "mp4" "avi" "wmv" "wav" "mov" "flv" "ogm" "ogg" "mkv"))
               "open"
               '(file)))))

(defun er-open-with (arg)
  "Open visited file in default external program.
With a prefix ARG always prompt for command to use."
  (interactive "P")
  (when buffer-file-name
    (shell-command (concat
                    (cond
                     ((and (not arg) (eq system-type 'darwin)) "open")
                     ((and (not arg) (member system-type '(gnu gnu/linux gnu/kfreebsd))) "xdg-open")
                     (t (read-shell-command "Open current file with: ")))
                    " "
                    (shell-quote-argument buffer-file-name)))))
#+end_src

** Recentf
#+begin_src emacs-lisp
(use-package recentf
  :straight (:type built-in)
  :hook (after-init . recentf-mode)
  :init (setq recentf-max-saved-items 300
              recentf-exclude
              '("\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
                "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
                "\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
                "^/tmp/" "^/var/folders/.+$" "^/ssh:" "/persp-confs/" "~/.emacs.d/straight/"
                no-littering-var-directory no-littering-etc-directory
                (lambda (file) (file-in-directory-p file package-user-dir))))
  :config
  (push (expand-file-name recentf-save-file) recentf-exclude)
  (add-to-list 'recentf-filename-handlers #'abbreviate-file-name))
#+end_src

** Savehist
#+begin_src emacs-lisp
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :hook (after-init . savehist-mode)
  :config (setq enable-recursive-minibuffers t ; Allow commands in minibuffers
                history-length 1000))
#+end_src

** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)))
#+end_src

** Keybinding Hints
*** Hydra
   #+begin_src emacs-lisp
(use-package hydra
  :hook (emacs-lisp-mode . hydra-add-imenu))
   #+end_src

*** Which key
   #+begin_src emacs-lisp
(use-package which-key
  :diminish
  :hook (after-init . which-key-mode)
  :config
  (setq which-key-idle-delay 0.3))
   #+end_src

** Go to address
#+begin_src emacs-lisp
(use-package goto-addr
  :straight (:type built-in)
  :hook
  (text-mode . goto-address-mode)
  (prog-mode . goto-address-prog-mode))
#+end_src

* Editing
** Undo
   #+begin_src emacs-lisp
(use-package undo-fu
  :bind (("s-z" . undo-fu-only-undo)
         ("s-Z" . undo-fu-only-redo)))
   #+end_src
   
** Auto save
Auto-Saving Changed Files

 #+begin_src emacs-lisp
(use-package super-save
  :diminish
  :hook (after-init . super-save-mode)
  :init
  (setq super-save-auto-save-when-idle t))
 #+end_src

** Sudo edit
   #+begin_src emacs-lisp
(use-package sudo-edit
  :commands (sudo-edit))
   #+end_src

** Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :hook (after-init . yas-global-mode)
  :init (setq yas-snippet-dirs '("~/.emacs.d/yasnippet")))
#+end_src

** Visual regexp
#+begin_src emacs-lisp
(use-package visual-regexp
  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace)))
#+end_src

** Go to last change
#+begin_src emacs-lisp
(use-package goto-last-change
  :bind (("M-g l" . goto-last-change)))
#+end_src

* Completion
** Orderless
#+begin_src emacs-lisp
;; orderless
(use-package orderless
  :config
  (setq completion-styles '(orderless partial-completion basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Minibuffer Completion
*** vertigo
#+begin_src emacs-lisp
(use-package vertico
  :straight (:files (:defaults "extensions/*")
                    :includes (vertico-buffer
                               vertico-directory
                               vertico-flat
                               vertico-indexed
                               vertico-mouse
                               vertico-quick
                               vertico-repeat
                               vertico-reverse))
  :hook
  (after-init . vertico-mode)
  ;; Tidy shadowed file names
  (rfn-eshadow-update-overlay . vertico-directory-tidy)
  ;; More convenient directory navigation commands
  :bind ((:map vertico-map
               ("RET" . vertico-directory-enter)
               ("DEL" . vertico-directory-delete-char)
               ("M-DEL" . vertico-directory-delete-word)))
  :init
  (setq vertico-resize nil
        vertico-scroll-margin 0
        vertico-count 12
        vertico-cycle t)
  :config
  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))
#+end_src

*** marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :hook (vertico-mode . marginalia-mode))

(use-package all-the-icons-completion
  :if (display-graphic-p)
  :after (marginalia all-the-icons)
  :hook
  (marginalia-mode . all-the-icons-completion-marginalia-setup)
  (marginalia-mode . all-the-icons-completion-mode)
  :init
  (setq marginalia-max-relative-age 0
        marginalia-align 'center))
#+end_src

*** consult
#+begin_src emacs-lisp
(use-package consult
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x C-b" . consult-buffer)
         ("C-x C-d" . consult-dir)
         ("C-x C-t" . consult-tramp)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ("s-f" . consult-line)                ;; orig. yank-pop
         ("s-F" . zw/consult-line-multi)
         ;; M-g bindings (goto-map)
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g i" . consult-imenu)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s g" . consult-grep)
         ("M-s b" . consult-bibtex-open-pdf)
         ("M-s y" . consult-yasnippet)
         ("M-s c" . consult-flycheck)
         ("M-s m" . consult-minor-mode-menu)
         (:map isearch-mode-map
               ("M-s" . consult-isearch-history))
         (:map minibuffer-local-completion-map
               ("C-x C-d" . consult-dir)))
  :init
  (setq consult-preview-key (kbd "M-."))
  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-recent-file
   consult--source-project-recent-file
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  (setq consult-narrow-key "<" ;; (kbd "C-+")
        consult-line-numbers-widen t
        consult-async-min-input 2
        consult-async-refresh-delay  0.15
        consult-async-input-throttle 0.2
        consult-async-input-debounce 0.1)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Preview while using consult-theme
  (consult-customize consult-theme :preview-key '(:debounce 0.5 any))
  ;; Preview immediately on M-., on up/down after 0.5s, on any other key after 1s
  (consult-customize consult-theme
                     :preview-key
                     (list (kbd "M-.")
                           :debounce 0.5 (kbd "<up>") (kbd "<down>")
                           :debounce 1 'any))

  ;; custom consult packages
  (use-package consult-yasnippet :after consult :commands (consult-yasnippet))
  (use-package consult-bibtex :after consult
    :straight `(consult-bibtex :host github :repo "mohkale/consult-bibtex"))
  (use-package consult-dir :after consult)
  (use-package consult-flycheck
    :after (consult flycheck))
  (use-package consult-tramp
    :straight
    (consult-tramp :type git :host github :repo "Ladicle/consult-tramp")
    :init
    (setq consult-tramp-method "ssh"))

  ;; custom functions
  (defun zw/consult-line-multi ()
    (interactive)
    (consult-line-multi t)))

;; use this for now untill consult have its web-search
(use-package google-this
  :bind (("C-c l" . google-this-search)))
#+end_src

** Code Completion
*** setting
#+begin_src emacs-lisp
;; completion
(setq completion-cycle-threshold nil)
(setq tab-always-indent t)
(setq completions-detailed t)
(setq completion-ignore-case t)
;; since cape-dabbrev cannot replace case, I will set it to nil for now.
(use-package dabbrev
  :config
  (setq dabbrev-case-fold-search nil
        dabbrev-case-replace t
        dabbrev-ignored-buffer-regexps
        '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src

*** corfu
#+begin_src emacs-lisp
(use-package corfu
  :hook
  (after-init . global-corfu-mode)
  (corfu-mode . yas-minor-mode)
  ;; force corfu start in ess-r-mode
  (ess-r-mode . corfu-mode)
  :bind ((:map corfu-map
               ("TAB" . corfu-insert)
               ([tab] . corfu-insert)
               ([escape] . corfu-quit)
               ([return] . corfu-insert)
               ("SPC" . corfu-insert-separator)))
  :init
  ;; fast prefix filtering
  (defun orderless-fast-dispatch (word index total)
    (and (= index 0) (= total 1) (length< word 4)
         `(orderless-regexp . ,(concat "^" (regexp-quote word)))))

  (orderless-define-completion-style orderless-fast
    (orderless-dispatch '(orderless-fast-dispatch))
    (orderless-matching-styles '(orderless-literal orderless-regexp)))

  (setq corfu-cycle t
        corfu-auto t
        corfu-auto-delay 0
        corfu-auto-prefix 1
        completion-styles '(orderless-fast)
        corfu-preselect-first t
        corfu-quit-no-match t
        corfu-on-exact-match 'insert
        corfu-preview-current nil
        corfu-echo-documentation nil
        corfu-scroll-margin 5
        corfu-count 10
        corfu-min-width 20
        corfu-max-width 80
        corfu-bar-width 1)
  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
  ;; disable corfu auto in following modes
  (dolist (hook '(inferior-ess-r-mode-hook eshell-mode-hook shell-mode-hook))
    (add-hook hook (lambda () (setq-local corfu-auto nil))))
  :config
  ;; set icon for corfu
  (require 'kind-all-the-icons)
  (add-to-list 'corfu-margin-formatters
               #'kind-all-the-icons-margin-formatter)
  (defun zw/corfu-theme ()
    ;; FIXME: Popup size is wrong https://github.com/minad/corfu/issues/149
    (set-face-attribute 'corfu-default nil
                        :foreground (face-foreground 'tooltip)
                        :background (face-background 'tooltip)
                        :inherit 'fixed-pitch)
    (set-face-attribute 'corfu-current nil
                        :foreground (face-foreground 'warning)
                        :underline (face-foreground 'warning)
                        :background (face-background 'warning)
                        :weight 'bold)
    (with-eval-after-load 'doom-modeline
      (set-face-attribute 'corfu-border nil
                          :background (zw/get-face-bg-recur 'doom-modeline-bar)))
    (set-face-attribute 'corfu-bar nil
                        :background (face-foreground font-lock-comment-face)))
  (zw/corfu-theme))
#+end_src

*** corfu doc
#+begin_src emacs-lisp
(use-package corfu-doc
  :hook
  (corfu-mode . corfu-doc-mode)
  :bind ((:map corfu-map
               ("M-p" . corfu-doc-scroll-down)
               ("M-n" . corfu-doc-scroll-up)
               ("M-d" . corfu-doc-toggle)))
  :config
  (setq corfu-doc-auto nil
        corfu-doc-display-within-parent-frame t))
#+end_src

*** cape
#+begin_src emacs-lisp
(use-package cape
  :after corfu
  :bind (("C-c c f" . cape-file)
         ("C-c c d" . cape-dabbrev))
  :hook
  (after-change-major-mode . add-cape-completion)
  :init
  (defun add-cape-completion ()
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev t)))
#+end_src
