#+Title: Emacs Configuration
#+AUTHOR: Zhenhua Wang
#+auto_tangle: t
#+STARTUP: overview
#+PROPERTY: header-args+ :tangle "yes"
-----
* Header
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

* Startup
** Package manager
#+begin_src emacs-lisp
;; Load path for manually installed packages
(push "~/.emacs.d/lisp" load-path)

;; straight
(setq straight-repository-branch "develop")
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Install use-package
(straight-use-package 'use-package)
(setq package-enable-at-startup nil     ;;; Disable package.el in favor of straight.el
      straight-use-package-by-default t
      ;; disable checking at start-up
      straight-check-for-modifications '(watch-files find-when-checking)
      use-package-verbose t)
#+end_src

** Garbage collection
#+begin_src emacs-lisp
(use-package gcmh
  :diminish
  :hook
  (after-init . gcmh-mode)
  :init
  (setq gcmh-idle-delay 'auto
        gcmh-auto-idle-delay-factor 10
        gcmh-high-cons-threshold (* 16 1024 1024)))
#+end_src

** Keep .emacs.d Clean
#+begin_src emacs-lisp
;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering)

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src

** Benchmark
#+begin_src emacs-lisp
(use-package benchmark-init
  :config
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src

** Exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (or (eq system-type 'darwin)
          (eq system-type 'gnu/linux)
          (daemonp))
  :hook
  (after-init . exec-path-from-shell-initialize)
  :init
  (setq exec-path-from-shell-check-startup-files nil))
#+end_src

* Setting
** Global helper
#+begin_src emacs-lisp
(defun zw/icon-displayable-p ()
  "Return non-nil if icons are displayable."
  (or (display-graphic-p) (daemonp)))

(defun zw/hidden-buffer-p (&optional buffer)
  (string-match "^[[:space:]].*$" (buffer-name buffer)))

(defun zw/side-window-p ()
  "Return non-nil if current window is a side window."
  (window-parameter (get-buffer-window) 'window-side))

(defun zw/merge-list-to-list (dst src &optional prepend)
  "Merges content of the 2nd list with the 1st one"
  (if prepend
      (set dst
           (append src (eval dst)))
    (set dst
         (append (eval dst) src))))

(defun zw/get-face-attr-recur (face attr)
  "helper functions to get face background/foreground recursively"
  (let ((face-attr (face-attribute face attr)))
    (if (and face-attr
             (not (eq face-attr 'unspecified)))
        face-attr
      (let ((parent-face (face-attribute face :inherit)))
        (if (and parent-face
                 (not (eq parent-face 'unspecified)))
            (zw/get-face-attr-recur parent-face attr)
          nil)))))

(defun zw/get-face-bg-recur (face)
  "get face background recursively"
  (zw/get-face-attr-recur face :background))

(defun zw/get-face-fg-recur (face)
  "get face foreground recursively"
  (zw/get-face-attr-recur face :foreground))
#+end_src

** Global modes
#+begin_src emacs-lisp
;; modes run after init
(dolist (mode '(window-divider-mode
                blink-cursor-mode
                ;; fringe (nil is default)
                fringe-mode
                ;; warp long line
                global-visual-line-mode
                ;; Revert buffers when the underlying file has changed
                global-auto-revert-mode
                ;; yank overwrite what is selected
                delete-selection-mode
                ;; record last location in the file
                save-place-mode))
  (add-hook 'after-init-hook mode))

;; modes disable after init
(add-hook 'after-init-hook
          (lambda ()
            (global-eldoc-mode -1)
            (tooltip-mode -1)))
#+end_src

** Global settings
#+begin_src emacs-lisp
;; setq default folder
(setq default-directory (concat (getenv "HOME") "/"))
;; confirm emacs quit
(setq confirm-kill-emacs 'yes-or-no-p)
;; disable tooltips
(setq use-dialog-box nil)
;; Set up the visible bell
(setq visible-bell t)
;; cursor
(setq-default cursor-type '(bar . 2))
;; default coding
(set-default-coding-systems 'utf-8)
;; save clipboard before kill ring
(setq save-interprogram-paste-before-kill t)
(setq-default select-enable-clipboard t)
;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)
;; use short answer for revert buffer
(setq revert-buffer-quick-short-answers t)
;; Use spaces instead of tabs for indentation
(setq-default indent-tabs-mode nil)
#+end_src

** Keymap
#+begin_src emacs-lisp
;; modifiers
;; In macos, I also remap caps lock to ctrl using Karabiner-Elements
(pcase system-type
  ('darwin
   (progn
     (setq mac-right-command-modifier 'hyper)
     (setq mac-command-modifier 'super)
     (setq mac-option-modifier 'meta))))

;; keys
(bind-keys :map global-map
           ("<escape>" . keyboard-quit) ;keyboard-escape-quit
           ("<f5>" . zw/update-emacs-tangle-dotfiles)
           ("<f11>" . zw/toggle-presentation)
           ;; disable some weird keys
           ("C-z" . nil)
           ("<prior>" . nil)
           ("<next>" . nil)
           ("<home>" . nil)
           ("<end>" . nil)
           ;; disable scroll zoom
           ("C-<mouse-4>" . nil)
           ("C-<mouse-5>" . nil)
           ("C-<wheel-down>" . nil)
           ("C-<wheel-up>" . nil)
           ;; completion
           ("<C-tab>" . completion-at-point)
           ;; editing
           ("s-<backspace>" . (lambda () (interactive) (kill-line 0)))
           ("s-z" . undo)
           ("s-x" . kill-region)
           ("s-c" . kill-ring-save)
           ("s-v" . yank)
           ("s-a" . mark-whole-buffer)
           ("s-s" . save-buffer)
           ("s-S" . write-file)
           ("s-l" . goto-line)
           ;; term/shell
           ("s-e" . vterm)
           ;; buffer operations
           ("s-r" . revert-buffer-quick)
           ("s-q" . kill-current-buffer)
           ("s-=" . text-scale-increase)
           ("s--" . text-scale-decrease)
           ;; window operations
           ("s-w" . delete-window)
           ("s-t" . zw/split-window-sensibly-prefer-horizontal)
           ("s-<left>" . windmove-left)
           ("s-<right>" . windmove-right)
           ("s-<up>" . windmove-up)
           ("s-<down>" . windmove-down)
           ("s-{" . shrink-window-horizontally)
           ("s-}" . enlarge-window-horizontally)
           ("s-^" . enlarge-window)
           ("s-`" . zw/side-window-toggle)
           ("C-x 1" . zw/maximize-window)
           ;; misc commands
           ("s-i" . zw/show-info)
           ("s-o" . zw/open-in-external)
           ("s-h" . display-local-help)
           ("s-\\" . toggle-input-method)
           ;; minibuffer
           :map minibuffer-mode-map
           ("<escape>" . minibuffer-keyboard-quit)
           :map isearch-mode-map
           ("s-f" . isearch-repeat-forward)
           :map prog-mode-map
           ("<tab>" . zw/smart-tab))
#+end_src

** Misc
#+begin_src emacs-lisp
;; disable saving for buffers not visiting a file
(defadvice save-buffer (around interactive-no-visited-file-name activate)
  "When called interactively, disable for buffers not visiting a file."
  (when (or (not (called-interactively-p 'any))
            buffer-file-name)
    ad-do-it))
;; make scratch and dashboard unkillable
(add-hook 'kill-buffer-query-functions #'zw/dont-kill-scratch)
(defun zw/dont-kill-scratch ()
  (if (not (or (equal (buffer-name) "*scratch*")
               (equal (buffer-name) "*dashboard*")))
      t
    ;; (message "Not allowed to kill %s, burying instead" (buffer-name))
    (bury-buffer)
    nil))
#+end_src

* Appearance
** Nerd icons
#+begin_src emacs-lisp
(use-package nerd-icons
  :if (zw/icon-displayable-p)
  :config
  (zw/merge-list-to-list 'nerd-icons/mdicon-alist
                         '(("nf-md-firefox_web_browser" . "󰈹")
                           ("nf-md-visual_studio_code" . "󰨞"))
                         'prepend)
  (zw/merge-list-to-list 'nerd-icons-regexp-icon-alist
                         '(("^firefox:.*" nerd-icons-mdicon "nf-md-firefox")
                           ("^discord:.*" nerd-icons-mdicon "nf-md-discord")
                           ("^Code:.*" nerd-icons-mdicon "nf-md-visual_studio_code"))
                         'prepend)
  (zw/merge-list-to-list 'nerd-icons-extension-icon-alist
                         '(("rmd" nerd-icons-octicon "nf-oct-markdown" :face nerd-icons-lblue))
                         'prepend)
  (zw/merge-list-to-list 'nerd-icons-mode-icon-alist
                         '((ess-r-mode nerd-icons-sucicon "nf-seti-r" :face nerd-icons-lblue))
                         'prepend))

(use-package nerd-icons-dired
  :after nerd-icons
  :hook (dired-mode . nerd-icons-dired-mode)
  :config
  (advice-add 'dired-subtree-toggle :after (lambda ()
                                             (interactive)
                                             (when nerd-icons-dired-mode
                                               (revert-buffer)))))

(use-package nerd-icons-completion
  :if (zw/icon-displayable-p)
  :after (marginalia nerd-icons)
  :hook
  (marginalia-mode . nerd-icons-completion-marginalia-setup)
  (marginalia-mode . nerd-icons-completion-mode))
#+end_src

** Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :defer t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic nil)
  (doom-themes-visual-bell-config))

;; load theme
(setq zw/theme-selector
      (expand-file-name "emacs-select-theme.el" user-emacs-directory))
(when (not (file-exists-p zw/theme-selector))
  (write-region "(load-theme 'doom-one t)" nil zw/theme-selector))
(load zw/theme-selector)

;; load custom faces
(require 'zw-theme)
(add-hook 'server-after-make-frame-hook (lambda () (load "zw-theme")))
(advice-add
 #'consult-theme
 :after (lambda (arg)
          (load "zw-theme")
          (write-region (format "(load-theme '%s t)" (car custom-enabled-themes))
                        nil zw/theme-selector)))
#+end_src

** Buffer face mode
#+begin_src emacs-lisp
;; Set fixed-font faces for prog
(dolist (mode '(prog-mode-hook
                markdown-mode-hook
                latex-mode-hook LaTeX-mode-hook))
  (add-hook mode (lambda ()
                   (setq-local buffer-face-mode-face 'fixed-pitch)
                   (buffer-face-mode))))
#+end_src

** Modeline
#+begin_src emacs-lisp
(require 'zw-modeline)
#+end_src

** Scroll
#+begin_src emacs-lisp
(setq scroll-step 1
      scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position t
      mouse-wheel-scroll-amount '(1 ((shift) . hscroll))
      mouse-wheel-scroll-amount-horizontal 1
      mouse-wheel-progressive-speed nil
      auto-window-vscroll nil
      fast-but-imprecise-scrolling t)

(when (fboundp 'pixel-scroll-precision-mode)
  (pixel-scroll-precision-mode t)
  (setq touch-screen-precision-scroll t)
  (bind-keys :map pixel-scroll-precision-mode-map
             ("<prior>" . nil)
             ("<next>" . nil)))

(use-package iscroll
  :diminish
  :hook
  (image-mode . iscroll-mode)
  (org-mode . iscroll-mode)
  (markdown-mode . iscroll-mode))
#+end_src

** Posframe
#+begin_src emacs-lisp
(use-package posframe
  :defer t)
#+end_src

** Line number mode
#+begin_src emacs-lisp
;; line number mode
(dolist (mode '(prog-mode-hook text-mode-hook conf-mode-hook))
  (add-hook mode 'display-line-numbers-mode))
;; Override some modes which derive from the above
(dolist (mode '(org-mode-hook markdown-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Rain-bow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+end_src

** Rainbow mode
#+begin_src emacs-lisp
;; Sets the background of HTML color strings in buffers to be the color mentioned.
(use-package rainbow-mode
  :diminish
  :hook
  (prog-mode . rainbow-mode)
  (text-mode . rainbow-mode))
#+end_src

** Pulsar
#+begin_src emacs-lisp
(use-package pulsar
  :init
  (setq pulsar-pulse t
        pulsar-delay 0.055
        pulsar-iterations 10
        pulsar-face 'pulsar-generic
        pulsar-highlight-face 'pulsar-yellow)
  :hook
  (after-init . pulsar-global-mode)
  ;; integration with the `consult' package:
  (consult-after-jump . pulsar-recenter-top)
  (consult-after-jump . pulsar-reveal-entry)

  ;; integration with the built-in `imenu':
  (imenu-after-jump . pulsar-recenter-top)
  (imenu-after-jump . pulsar-reveal-entry))
#+end_src

** Paren
#+begin_src emacs-lisp
;; Highlight matching parens
(use-package paren
  :straight (:type built-in)
  :hook (after-init . show-paren-mode)
  :config
  (setq show-paren-when-point-inside-paren nil
        show-paren-when-point-in-periphery nil
        show-paren-context-when-offscreen 'child-frame)
  (add-to-list 'show-paren--context-child-frame-parameters '(child-frame-border-width . 4)))
#+end_src

** Highlight line
#+begin_src emacs-lisp
;; Highlight the current line
(use-package hl-line
  :straight (:type built-in)
  :hook ((after-init . global-hl-line-mode)
         ((dashboard-mode eshell-mode shell-mode term-mode vterm-mode) .
          (lambda () (setq-local global-hl-line-mode nil)))))
#+end_src

** Highlight TODO
#+begin_src emacs-lisp
;; Highlight TODO and similar keywords in comments and strings
(use-package hl-todo
  :custom-face
  (hl-todo ((t (:inherit fixed-pitch :height 0.9 :width condensed :weight bold :underline nil :inverse-video t))))
  :hook (after-init . global-hl-todo-mode)
  ;; :init (setq hl-todo-require-punctuation t
  ;; hl-todo-highlight-punctuation ":")
  :config
  (dolist (keyword '("BUG" "DEFECT" "ISSUE"))
    (add-to-list 'hl-todo-keyword-faces `(,keyword . "#e45649")))
  (dolist (keyword '("TRICK" "WORKAROUND"))
    (add-to-list 'hl-todo-keyword-faces `(,keyword . "#d0bf8f")))
  (dolist (keyword '("DEBUG" "STUB"))
    (add-to-list 'hl-todo-keyword-faces `(,keyword . "#7cb8bb"))))
#+end_src

** Highlight VC
#+begin_src emacs-lisp
;; Highlight uncommitted changes using VC
(use-package diff-hl
  :bind ((:map diff-hl-command-map
               ("SPC" . diff-hl-mark-hunk)))
  :hook ((after-init . global-diff-hl-mode)
         (diff-hl-mode . diff-hl-flydiff-mode))
  :init (setq diff-hl-side 'left
              diff-hl-draw-borders nil
              diff-hl-show-staged-changes nil)
  :config
  ;; Integration with magit
  (with-eval-after-load 'magit
    (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh)))
#+end_src

** Window placement
#+begin_src emacs-lisp
;; window split
(setq split-width-threshold  80
      split-height-threshold 80
      split-window-preferred-function 'split-window-sensibly)

(defun zw/display-buffer-in-largest-window (buffer alist)
  (let ((largest-window (get-largest-window (selected-frame) t)))
    (window--display-buffer buffer largest-window 'reuse alist)))

;; default buffer placement rules
(setq display-buffer-base-action '((display-buffer--maybe-same-window
                                    zw/display-buffer-in-largest-window)))

;; popup buffers
(dolist (mode '(magit-mode-hook
                git-commit-setup-hook))
  (add-hook mode
            (lambda () (setq-local display-buffer-base-action
                                   '((display-buffer--maybe-same-window
                                      display-buffer--maybe-pop-up-frame-or-window))))))

;; buffer placement rules
(setq display-buffer-alist
      '(;; largest window
        ("\\.\\(?:pdf\\)\\'"
         (display-buffer-reuse-window
          zw/display-buffer-in-largest-window))
        ("\\*\\([Hh]elp\\|Man\\|eglot doc\\).*"
         (zw/display-buffer-in-largest-window))
        ;; top side window
        ("\\*\\(Messages\\|Warnings\\|Backtrace\\).*"
         (display-buffer-in-side-window)
         (window-height . 0.2)
         (window-width . 0.5)
         (side . top)
         (slot . -1))
        ("\\*\\(polymode export\\|compilation\\).*"
         (display-buffer-in-side-window)
         (window-height . 0.2)
         (window-width . 0.5)
         (side . top)
         (slot . 1))
        ;; right side window
        ("\\*\\(R\\|Python\\|jupyter-display\\).*"
         (display-buffer-in-side-window)
         (window-width . 0.3)
         (side . right)
         (slot . 1)
         (dedicated . t))
        ("\\*jupyter-output.*"
         (display-buffer-in-side-window)
         (window-width . 0.3)
         (side . right)
         (slot . 2)
         (dedicated . t))
        ("\\*jupyter-error.*"
         (display-buffer-in-side-window)
         (window-width . 0.3)
         (side . right)
         (slot . 3)
         (dedicated . t))
        ;; bottom buffer (NOT side window)
        ("\\*.*\\(e?shell\\|v?term\\).*"
         (display-buffer-at-bottom)
         ;; (display-buffer-in-side-window)
         (window-height . 0.2)
         (side . bottom)
         (dedicated . t))
        ;; below current window
        ("\\*Calendar.*"
         (display-buffer-reuse-mode-window display-buffer-below-selected)
         (window-height . shrink-window-if-larger-than-buffer))))
#+end_src

** Whitespace
#+begin_src emacs-lisp
(dolist (mode '(prog-mode-hook
                text-mode-hook))
  (add-hook mode (lambda ()
                   (if buffer-file-name
                       (setq-local show-trailing-whitespace t)))))
#+end_src

** Side windows
#+begin_src emacs-lisp
(defcustom zw/side-window-buffer-mode '(inferior-ess-r-mode inferior-python-mode)
  "List of modes of buffer displayed in side window.")

(defcustom zw/side-window-buffer-regex nil
  "List of name regex of buffer displayed in side window.")

(defvar zw/side-window--buffer-opened nil)

(defun zw/side-window--update ()
  (setq zw/side-window--buffer-opened nil)
  (let* ((buffers (buffer-list)))
    (dolist (buffer buffers)
      (with-current-buffer buffer
        (if (or (member major-mode zw/side-window-buffer-mode)
                (seq-some (lambda (regex)
                            (string-match-p regex (buffer-name buffer)))
                          zw/side-window-buffer-regex))
            (add-to-list 'zw/side-window--buffer-opened buffer))))))

(defun zw/side-window-toggle ()
  "Toggle side windows."
  (interactive)
  (zw/side-window--update)
  (if zw/side-window--buffer-opened
      (if (seq-some (lambda (buffer) (get-buffer-window buffer))
                    zw/side-window--buffer-opened)
          (dolist (buffer zw/side-window--buffer-opened)
            (let ((buffer-window (get-buffer-window buffer)))
              (when buffer-window
                (if  (eq buffer-window (window-main-window))
                    (previous-buffer)
                  (delete-window buffer-window)))))
        (dolist (buffer zw/side-window--buffer-opened)
          (display-buffer buffer)))
    (message "No buffer in side window.")))
#+end_src

* Tool
** Tramp
For host with two factor auth, you need to
1. enter password
2. enter the second-step code

 Usage:
- ~(find-file "/ssh:zhenhua@127.0.0.1#3022:~/")~

#+begin_src emacs-lisp
;; Set default connection mode to SSH
(setq tramp-default-method "ssh")
(setq tramp-auto-save-directory
      (expand-file-name "tramp-auto-save" user-emacs-directory))
(setq tramp-persistency-file-name
      (expand-file-name "tramp-connection-history" user-emacs-directory))
(setq password-cache-expiry nil)
(setq remote-file-name-inhibit-cache nil)
(setq tramp-use-ssh-controlmaster-options nil)
(setq vc-ignore-dir-regexp
      (format "\\(%s\\)\\|\\(%s\\)"
              vc-ignore-dir-regexp
              tramp-file-name-regexp))
(with-eval-after-load 'tramp
  (customize-set-variable 'tramp-ssh-controlmaster-options
                          (concat
                           "-o ControlPath=/tmp/ssh-tramp-%%r@%%h:%%p "
                           "-o ControlMaster=auto -o ControlPersist=yes"))
  ;; respect the PATH variable on the remote machine
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src

** Comint
#+begin_src emacs-lisp
(use-package comint
  :straight (:type built-in)
  :config
  ;; Make processes’ outputs read-only. The prompt is easy.
  (setq comint-prompt-read-only t
        ansi-color-for-comint-mode 'filter
        comint-scroll-to-bottom-on-input t
        comint-scroll-to-bottom-on-output nil
        comint-move-point-for-output nil))
#+end_src

** Vterm
For detailed Config, see https://github.com/akermu/emacs-libvterm#shell-side-configuration

#+begin_src emacs-lisp
(use-package vterm
  :bind ((:map vterm-copy-mode-map
               ("<return>" . vterm-copy-mode))
         (:map vterm-mode-map
               ("s-e" . quit-window)
               ("s-z" . vterm-undo)
               ("M-:" . nil)
               ("<escape>" . nil)
               ("<f5>" . nil)))
  :config
  (setq vterm-kill-buffer-on-exit t
        vterm-always-compile-module t)
  ;; close window when vterm exit
  (add-hook 'vterm-exit-functions
            (lambda (_ _)
              (let* ((buffer (current-buffer))
                     (window (get-buffer-window buffer)))
                (when (not (one-window-p))
                  (delete-window window)))))
  (defun zw/vterm-current-directory ()
    (ignore-errors
      (file-truename (format "/proc/%d/cwd/"
                             (process-id vterm--process))))))

(use-package multi-vterm
  :commands (multi-vterm)
  :bind (("s-E" . multi-vterm)))
#+end_src

** Dired
#+begin_src emacs-lisp
(use-package dired
  :straight (:type built-in)
  :hook
  (dired-mode . dired-async-mode)
  (dired-mode . dired-omit-mode)
  (dired-mode . (lambda () (visual-line-mode 0)))
  :bind ((:map dired-mode-map
               ("<tab>" . dired-subtree-toggle)
               ("<mouse-2>" . dired-find-file)
               ("q" . zw/kill-bufer-quit-window)))
  :init
  (setq dired-dwim-target t
        dired-kill-when-opening-new-dired-buffer t
        dired-create-destination-dirs t
        dired-create-destination-dirs-on-trailing-dirsep t
        dired-omit-extensions '("~")
        dired-omit-files "^\\.$\\|^\\.\\.$")
  (when (eq system-type 'darwin)
    (setq insert-directory-program "gls"))
  (setq dired-use-ls-dired t
        dired-listing-switches "-al --no-group --human-readable --group-directories-first"))

(use-package diredfl
  :hook
  ((dired-mode . diredfl-mode)
   ;; highlight parent and preview as well
   (dirvish-directory-view-mode . diredfl-mode)))

(use-package dired-subtree
  :commands (dired-subtree-toggle))

(use-package zw-dired-sidebar
  :straight (:type built-in)
  :bind (("s-b" . zw/toggle-dired-sidebar)))
#+end_src

** Openwith
#+begin_src emacs-lisp
(defvar open-app-command (pcase system-type
                           ('gnu/linux "xdg-open")
                           (_ "open"))
  "Shell command used to open in external apps.")

(use-package openwith
  :hook
  (after-init . openwith-mode)
  :config
  (setq openwith-associations
        (list
         (list (openwith-make-extension-regexp
                '("doc" "docx" "xls" "xlsx" "ppt" "pptx" "odt" "ods" "odg" "odp"
                  "mpg" "mpeg" "mp3" "mp4" "avi" "wmv" "wav" "mov" "flv" "ogm"
                  "ogg" "mkv"))
               open-app-command
               '(file)))))

(defun zw/open-in-external (arg)
  "Open visited file in default external program."
  (interactive "P")
  (when buffer-file-name
    (call-process-shell-command
     (concat open-app-command " " (shell-quote-argument buffer-file-name))
     nil 0)))
#+end_src

** Recentf
#+begin_src emacs-lisp
(use-package recentf
  :straight (:type built-in)
  :hook (after-init . recentf-mode)
  :init (setq recentf-max-saved-items 300
              recentf-exclude
              '("\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
                "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
                "\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
                "^/tmp/" "^/var/folders/.+$" "^/ssh:" "/persp-confs/" "~/.emacs.d/straight/"
                no-littering-var-directory no-littering-etc-directory
                (lambda (file) (file-in-directory-p file package-user-dir))))
  :config
  (push (expand-file-name recentf-save-file) recentf-exclude)
  (add-to-list 'recentf-filename-handlers #'abbreviate-file-name)
  ;; save recentf-list before closing frame
  (advice-add 'save-buffers-kill-terminal :before 'recentf-save-list))
#+end_src

** Savehist
#+begin_src emacs-lisp
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :hook (after-init . savehist-mode)
  :config (setq enable-recursive-minibuffers t ; Allow commands in minibuffers
                history-length 25))
#+end_src

** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)))
#+end_src

** Key hints
#+begin_src emacs-lisp
(use-package hydra
  :hook (emacs-lisp-mode . hydra-add-imenu))

(use-package which-key
  :diminish
  :hook (after-init . which-key-mode)
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

** Open address
#+begin_src emacs-lisp
(use-package goto-addr
  :straight (:type built-in)
  :hook
  (text-mode . goto-address-mode)
  (prog-mode . goto-address-prog-mode))
#+end_src

** Eww
#+begin_src emacs-lisp
(use-package eww
  :bind (("C-x C-w" . zw/eww-bookmark)
         (:map eww-mode-map
               ("s-o" . zw/open-eww-in-browser)))
  :config
  (setq shr-use-colors nil
        shr-use-fonts nil
        shr-max-image-proportion 0.6
        shr-image-animate nil
        shr-cookie-policy nil)
  (defun zw/eww-bookmark (bm)
    (interactive
     (list
      (completing-read
       "eww: "
       (list (propertize "emacs-china.org" 'display "emacs-china")
             (propertize "www.reddit.com/r/emacs" 'display "reddit emacs")))))
    (eww bm))
  (defun zw/open-eww-in-browser ()
    (interactive)
    (browse-url-default-browser (eww-current-url))))
#+end_src

** Websearch
#+begin_src emacs-lisp
(use-package emacs-websearch
  :straight '(emacs-websearch :host github :repo "zhenhua-wang/emacs-websearch")
  :bind (("s-/" . emacs-websearch)))
#+end_src

** Winner-mode
#+begin_src emacs-lisp
(use-package winner
  :straight (:type built-in)
  :hook (after-init . winner-mode)
  :bind (("s-T" . winner-undo)
         ("s-u" . winner-undo)
         ("s-U" . winner-redo)))
#+end_src

** Isearch
#+begin_src emacs-lisp
(use-package isearch
  :straight (:type built-in)
  :bind (:map isearch-mode-map
              ([remap isearch-delete-char] . isearch-del-char))
  :config
  (setq isearch-lazy-count t
        lazy-count-prefix-format "%s/%s "))
#+end_src

** Calculator
#+begin_src emacs-lisp
(use-package calculator
  :bind (:map calculator-mode-map
              ("s-q" . calculator-quit)))
#+end_src

** Custom tools
#+begin_src emacs-lisp
(require 'zw-tools)
#+end_src

* Text Edit
** Undo
#+begin_src emacs-lisp
(use-package undo-fu
  :bind (("s-z" . undo-fu-only-undo)
         ("s-Z" . undo-fu-only-redo)))
#+end_src

** Auto save
#+begin_src emacs-lisp
(use-package super-save
  :diminish
  :hook (after-init . super-save-mode)
  :config (setq super-save-auto-save-when-idle t))
#+end_src

** Sudo edit
#+begin_src emacs-lisp
(use-package sudo-edit
  :commands (sudo-edit))
#+end_src

** Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :hook (after-init . yas-global-mode)
  :init (setq yas-snippet-dirs '("~/.emacs.d/yasnippet")))
#+end_src

** Visual regexp
#+begin_src emacs-lisp
(use-package visual-regexp
  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace)))
#+end_src

** Last change
#+begin_src emacs-lisp
(use-package goto-last-change
  :bind (("M-g l" . goto-last-change)))
#+end_src

* Completion
** Orderless
#+begin_src emacs-lisp
;; orderless
(use-package orderless
  :config
  (setq completion-styles '(orderless partial-completion basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Minibuffer Completion
*** vertico
#+begin_src emacs-lisp
(use-package vertico
  :straight (vertico :files (:defaults "extensions/*")
                     :includes (vertico-directory))
  :hook
  (after-init . vertico-mode)
  (vertico-mode . vertico-multiform-mode)
  ;; Tidy shadowed file names
  (rfn-eshadow-update-overlay . vertico-directory-tidy)
  ;; More convenient directory navigation commands
  :bind ((:map vertico-map
               ("RET" . vertico-directory-enter)
               ("M-RET" . vertico-exit-input)
               ("DEL" . vertico-directory-delete-char)
               ("M-DEL" . vertico-directory-delete-word)))
  :init
  (setq vertico-resize nil
        vertico-scroll-margin 0
        vertico-count 12
        vertico-cycle t
        vertico-preselect 'directory)
  :config
  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  ;; use vertico as the interface for completion-at-point
  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args)))
  ;; Sort directories before files (vertico-multiform-mode)
  (setq vertico-multiform-categories
        '((file (vertico-sort-function . sort-directories-first))))
  (defun sort-directories-first (files)
    (setq files (vertico-sort-history-length-alpha files))
    (nconc (seq-filter (lambda (x) (string-suffix-p "/" x)) files)
           (seq-remove (lambda (x) (string-suffix-p "/" x)) files))))

(use-package vertico-posframe
  :config
  (defun vertico-posframe-set-cursor (&rest args)
    (with-current-buffer vertico-posframe--buffer
      (setq-local cursor-type 'bar)
      (setq-local cursor-in-non-selected-windows 'bar)))
  (advice-add 'vertico-posframe--show :after 'vertico-posframe-set-cursor)
  (setq vertico-posframe-poshandler 'posframe-poshandler-frame-bottom-center
        vertico-posframe-width (frame-width))
  (vertico-posframe-mode 1))
#+end_src

*** marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :hook (vertico-mode . marginalia-mode)
  :config
  (setq marginalia-align 'center)
  ;; show mode on/off
  (defun marginalia-annotate-command (cand)
    "Annotate command CAND with its documentation string.
Similar to `marginalia-annotate-symbol', but does not show symbol class."
    (when-let* ((sym (intern-soft cand)))
      (concat
       (let ((mode (if (and sym (boundp sym))
                       sym
                     nil)))
         (when (and sym (boundp sym))
           (if (and (boundp mode) (symbol-value mode))
               (propertize " [On]" 'face 'marginalia-on)
             (propertize " [Off]" 'face 'marginalia-off))))
       (marginalia-annotate-binding cand)
       (marginalia--documentation (marginalia--function-doc sym))))))
#+end_src

*** consult
#+begin_src emacs-lisp
(use-package consult
  :demand
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x b" . consult-buffer)
         ("C-x C-b" . consult-buffer)
         ("C-x C-d" . consult-dir)
         ("C-x C-t" . consult-tramp)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)
         ("<help> a" . consult-apropos)
         ("s-f" . consult-line)
         ("s-F" . zw/consult-line-multi)
         ;; M-g bindings (goto-map)
         ("M-g g" . consult-goto-line)
         ("M-g o" . consult-outline)
         ("M-g i" . consult-imenu)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s g" . consult-grep)
         ("M-s y" . consult-yasnippet)
         ("M-s m" . consult-minor-mode-menu)
         ("M-s f" . consult-flymake)
         ("M-s s" . consult-flyspell)
         (:map isearch-mode-map
               ("M-s" . consult-isearch-history))
         (:map minibuffer-local-completion-map
               ("C-x C-d" . consult-dir)))
  :init
  (setq consult-preview-key "M-."
        register-preview-delay 0.5
        register-preview-function #'consult-register-format
        xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  (advice-add #'register-preview :override #'consult-register-window)
  :config
  ;; Optionally configure the narrowing key.
  (setq consult-narrow-key "<" ;; (kbd "C-+")
        consult-line-numbers-widen t
        consult-async-min-input 2
        consult-async-refresh-delay  0.15
        consult-async-input-throttle 0.2
        consult-async-input-debounce 0.1)

  ;; Preview consult commands
  (consult-customize consult-goto-line :preview-key '(:debounce 0 any)
                     consult-theme :preview-key '(:debounce 0.2 any))

  ;; custom functions
  (defun zw/consult-line-multi ()
    (interactive)
    (consult-line-multi t)))

;; custom consult packages
(use-package consult-yasnippet
  :commands consult-yasnippet)
(use-package consult-dir
  :commands consult-dir)
(use-package consult-tramp
  :commands consult-tramp
  :straight
  (consult-tramp :type git :host github :repo "Ladicle/consult-tramp")
  :init (setq consult-tramp-method "ssh"))
(use-package consult-flyspell
  :commands consult-flyspell)
#+end_src

** Code Completion
#+begin_src emacs-lisp
(require 'zw-company)
#+end_src

* Development
** IDE
*** LSP
**** lsp-mode
#+begin_src emacs-lisp
(setq-default read-process-output-max (* 1024 1024))
(use-package lsp-mode
  :commands (lsp-deferred)
  :hook
  (python-mode . lsp-deferred)
  (ess-r-mode . lsp-deferred)
  ((c++-mode c-mode) . lsp-deferred)
  :init
  (setq lsp-auto-guess-root t
        lsp-keep-workspace-alive nil
        lsp-modeline-code-actions-enable nil
        lsp-modeline-diagnostics-enable nil
        lsp-modeline-workspace-status-enable nil
        lsp-headerline-breadcrumb-enable nil
        lsp-eldoc-enable-hover nil
        lsp-signature-render-documentation nil

        lsp-enable-file-watchers nil
        lsp-enable-folding nil
        lsp-enable-text-document-color nil

        lsp-enable-indentation nil
        lsp-enable-on-type-formatting nil

        lsp-completion-provider :none

        ;; For diagnostics
        lsp-diagnostics-disabled-modes '(markdown-mode gfm-mode)))
#+end_src

**** lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :bind ((:map lsp-ui-mode-map
               ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
               ([remap xref-find-references] . lsp-ui-peek-find-references))
         (:map lsp-ui-doc-mode-map
               ("s-d" . lsp-ui-doc-toggle)))
  :init (setq lsp-ui-imenu-enable nil
              lsp-ui-sideline-enable nil
              lsp-ui-peek-always-show t
              lsp-ui-doc-position 'at-point
              lsp-ui-doc-max-width 120
              lsp-ui-doc-show-with-mouse nil)
  :config
  ;; use posframe to show peek
  (defun lsp-ui-peek--peek-display (src1 src2)
    (-let* ((win-width (frame-width))
            (lsp-ui-peek-list-width (/ (frame-width) 2))
            (string (-some--> (-zip-fill "" src1 src2)
                      (--map (lsp-ui-peek--adjust win-width it) it)
                      (-map-indexed 'lsp-ui-peek--make-line it)
                      (-concat it (lsp-ui-peek--make-footer))))
            )
      (setq lsp-ui-peek--buffer (get-buffer-create " *lsp-peek--buffer*"))
      (posframe-show lsp-ui-peek--buffer
                     :string (mapconcat 'identity string "")
                     :min-width (frame-width)
                     :poshandler #'posframe-poshandler-frame-center)))
  (defun lsp-ui-peek--peek-destroy ()
    (when (bufferp lsp-ui-peek--buffer)
      (posframe-delete lsp-ui-peek--buffer))
    (setq lsp-ui-peek--buffer nil
          lsp-ui-peek--last-xref nil)
    (set-window-start (get-buffer-window) lsp-ui-peek--win-start))
  (advice-add #'lsp-ui-peek--peek-new :override #'lsp-ui-peek--peek-display)
  (advice-add #'lsp-ui-peek--peek-hide :override #'lsp-ui-peek--peek-destroy))
#+end_src

**** lsp org
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; enable lsp-org inside src block
  (cl-defmacro lsp-org-babel-enable (lang)
    "Support LANG in org source code block."
    (cl-check-type lang stringp)
    (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
           (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
      `(progn
         (defun ,intern-pre (info)
           (let ((file-name (->> info caddr (alist-get :file))))
             (unless file-name
               (setq file-name (make-temp-file "babel-lsp-")))
             (setq buffer-file-name file-name)
             (lsp-deferred)))
         (put ',intern-pre 'function-documentation
              (format "Enable lsp-mode in the buffer of org source block (%s)."
                      (upcase ,lang)))
         (if (fboundp ',edit-pre)
             (advice-add ',edit-pre :after ',intern-pre)
           (progn
             (defun ,edit-pre (info)
               (,intern-pre info))
             (put ',edit-pre 'function-documentation
                  (format "Prepare local buffer environment for org source block (%s)."
                          (upcase ,lang))))))))
  (defvar org-babel-lang-list
    '("ess-r" "R" "python" "latex"))
  (dolist (lang org-babel-lang-list)
    (eval `(lsp-org-babel-enable ,lang))))
#+end_src

**** eglot
#+begin_src emacs-lisp
(setq eglot-autoshutdown t)
(dolist (mode '(c++-mode-hook c-mode-hook))
  (add-hook mode (lambda ()
                   (when (file-remote-p default-directory)
                     (eglot-ensure)))))
#+end_src

*** Code reference
#+begin_src emacs-lisp
(use-package xref
  :straight (:type built-in)
  :init
  (when (executable-find "rg")
    (setq xref-search-program 'ripgrep))
  :config
  (setq xref-prompt-for-identifier '(not xref-find-definitions
                                         xref-find-definitions-other-window
                                         xref-find-definitions-other-frame
                                         xref-find-references)))
#+end_src

*** Code folding
**** hideshow
#+begin_src emacs-lisp
(use-package hideshow
  :hook ((prog-mode org-mode markdown-mode) . hs-minor-mode)
  :bind ((:map hs-minor-mode-map ("<backtab>" . zw/toggle-fold)))
  :config
  (defun zw/toggle-fold ()
    "Toggle code folding"
    (interactive)
    (save-excursion
      (end-of-line)
      (hs-toggle-hiding)))
  (defface collapsed-face '((t (:background "#e0cf9f" :foreground "#5f5f5f"))) "Collapsed Overlay")
  (defvar collapsed-face 'collapsed-face)
  (define-fringe-bitmap 'hs-marker [0 24 24 126 126 24 24 0])
  (defun display-code-line-counts (ov)
    (when (eq 'code (overlay-get ov 'hs))
      (let* ((marker-string "*fringe-dummy*")
	     (marker-length (length marker-string))
	     (display-string
	      (format " (%d lines)... "
		      (count-lines (overlay-start ov) (overlay-end ov)))))
        (overlay-put ov 'help-echo "<backtab> to toggle")
        (put-text-property 0 marker-length 'display
			   (list 'left-fringe 'hs-marker 'fringe-face)
			   marker-string)
        (overlay-put ov 'before-string marker-string)
        (put-text-property 1 (1- (length display-string))
			   'face 'collapsed-face display-string)
        (overlay-put ov 'display display-string))))
  (setq hs-set-up-overlay 'display-code-line-counts))
#+end_src

**** outline
#+begin_src emacs-lisp
(use-package outline
  :hook
  (prog-mode . zw/init-outline)
  :config
  (setq outline-minor-mode-use-buttons t)
  (defun zw/outline--level ()
    (length (match-string 2)))
  (defun zw/outline--unfontify (beg end &optional _loud)
    (let ((font-lock-extra-managed-props
           (append '(display) font-lock-extra-managed-props)))
      (font-lock-default-unfontify-region beg end)))
  (defun zw/init-outline ()
    (let* ((comment-start-symbol (or (string-trim comment-start) "#"))
           (outline-header (rx-to-string
                            `(: (group (0+ space)
                                       (+ ,comment-start-symbol)
                                       (+ space) (group (+ "*")))
                                space))))
      (font-lock-add-keywords nil `((,outline-header 1 '(face nil display ""))))
      (setq-local outline-level 'zw/outline--level
                  outline-regexp outline-header
                  font-lock-unfontify-region-function #'zw/outline--unfontify))
    (outline-minor-mode 1)
    (outline-hide-sublevels 1)))

(use-package outline-minor-faces
  :after outline
  :hook (outline-minor-mode . outline-minor-faces-mode))
#+end_src

*** Fast comment
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind (("s-;" . evilnc-comment-or-uncomment-lines)))
#+end_src

*** Flymake
#+begin_src emacs-lisp
(use-package flymake
  :straight (:type built-in)
  :hook (prog-mode . flymake-mode)
  :config
  (setq flymake-no-changes-timeout nil
        flymake-fringe-indicator-position nil)
  ;; disable flymake log about proc-legacy-flymake
  (remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake)
  ;; show flymake when cursor hovers
  (setq help-at-pt-timer-delay 0.9
        help-at-pt-display-when-idle 'never))
#+end_src

*** Version control
#+begin_src emacs-lisp
(use-package magit
  :bind (("s-M" . magit-status)
         :map magit-mode-map
         ("C" . zw/magit-change-repo))
  :commands (magit-status magit-get-current-branch)
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  (defun zw/magit-change-repo ()
    (interactive)
    (let ((dir (magit-read-repository)))
      (magit-kill-this-buffer)
      (magit-init dir))))

(use-package magit-todos
  :hook (magit-mode . magit-todos-mode))
#+end_src

** Language
*** C/C++
#+begin_src emacs-lisp
(use-package cc-mode
  :bind (:map c-mode-base-map
              ("C-c C-c" . compile))
  :hook (c-mode-common . (lambda () (remove-hook 'flymake-diagnostic-functions
                                                 'flymake-cc t)))
  :config (advice-add #'c-indent-line-or-region :after
                      (lambda (&rest args) (deactivate-mark))))
#+end_src

*** Python
#+begin_src emacs-lisp
(defun zw/python-start-shell-before-send-string (code-string)
  (if (python-shell-get-process)
      (python-shell-send-string code-string)
    (progn
      (setq-local python-shell-setup-codes nil)
      (let* ((python-shell-setup-codes (list code-string))
             (process (python-shell-get-or-create-process
                       (python-shell-parse-command))))
        (save-selected-window
          (switch-to-buffer-other-window
           (process-buffer process))))))
  (sit-for 0.1)
  (goto-char (region-end))
  (deactivate-mark))

(defun zw/python-region-or-block-string (forward-func backward-func)
  (if mark-active
      (let ((beg (region-beginning))
            (end (region-end)))
        (buffer-substring-no-properties beg end))
    (let* ((current-line-empty-p
            (string-match-p "\\`\\s-*$" (thing-at-point 'line)))
           (beg (if current-line-empty-p
                    (point)
                  (save-excursion (funcall backward-func) (point))))
           (end (save-excursion (funcall forward-func) (point))))
      (set-mark beg) (goto-char end)
      (buffer-substring-no-properties beg end))))

(defun zw/python-shell-send-region-or-block ()
  (interactive)
  (zw/python-start-shell-before-send-string
   (zw/python-region-or-block-string 'forward-paragraph 'backward-paragraph)))

(defun zw/python-shell-send-buffer ()
  (interactive)
  (save-excursion
    (zw/python-start-shell-before-send-string (buffer-string))))

(defun zw/python-shell-send-line ()
  (interactive)
  (let ((beg (save-excursion (beginning-of-line) (point)))
        (end (save-excursion (end-of-line) (point))))
    (zw/python-start-shell-before-send-string
     (buffer-substring-no-properties beg end))))

(use-package python
  :bind ((:map python-mode-map
               ("C-c C-c" . zw/python-shell-send-region-or-block)
               ("C-c C-b" . zw/python-shell-send-buffer)
               ("C-<return>" . zw/python-shell-send-line))))

(use-package conda
  :after python
  :config
  (or (cl-loop for dir in (list conda-anaconda-home
                                "~/.anaconda"
                                "~/.miniconda"
                                "~/.miniconda3"
                                "~/.miniforge3"
                                "~/anaconda3"
                                "~/miniconda3"
                                "~/miniforge3"
                                "~/opt/miniconda3"
                                "/usr/bin/anaconda3"
                                "/usr/local/anaconda3"
                                "/usr/local/miniconda3"
                                "/usr/local/Caskroom/miniconda/base"
                                "~/.conda")
               if (file-directory-p dir)
               return (setq conda-anaconda-home (expand-file-name dir)
                            conda-env-home-directory (expand-file-name dir)))
      (message "Cannot find Anaconda installation"))
  ;; add to modeline
  (add-to-list 'mode-line-misc-info
               '(conda-env-current-name
                 ("[CONDA:" conda-env-current-name "]"))
               'append)
  ;; update conda environment
  (defun zw/conda-env-update ()
    (interactive)
    (when (executable-find "ipython")
      (setq python-shell-interpreter "ipython"
            python-shell-interpreter-args
            "-i --simple-prompt --InteractiveShell.display_page=True")
      (add-to-list 'python-shell-completion-native-disabled-interpreters
                   "ipython"))
    (if (and (featurep 'lsp-mode) lsp-mode)
        (lsp-restart-workspace))
    (if (and (executable-find "jupyter")
             (fboundp 'jupyter-available-kernelspecs))
        (jupyter-available-kernelspecs t)))
  (advice-add #'conda-env-activate :after #'zw/conda-env-update)
  (advice-add #'conda-env-deactivate :after #'zw/conda-env-update))
#+end_src

*** R
#+begin_src emacs-lisp
(use-package ess
  :defer t
  :commands R
  :hook
  (inferior-ess-r-mode . zw/ess-fix-read-only-inferior-ess-mode)
  (ess-jags-mode . zw/ess-indent)
  :bind ((:map ess-r-mode-map
               ("C-c c e" . ess-complete-object-name)
               ("C-c C-c" . zw/ess-send-region-or-block)))
  :config
  (require 'ess-site)
  (defun zw/ess-indent ()
    (setq-local indent-line-function #'ess-r-indent-line))
  (defun zw/ess-send-region-or-block ()
    (interactive)
    (if mark-active
        (let ((beg (region-beginning))
              (end (region-end)))
          (ess-eval-region beg end 'nowait)
          (goto-char end))
      (progn (ess-eval-paragraph 'nowait)
             (forward-paragraph))))
  ;; "Fixes a bug when `comint-prompt-read-only' in non-nil.
  ;; See https://github.com/emacs-ess/ESS/issues/300"
  (defun zw/ess-fix-read-only-inferior-ess-mode ()
    (setq-local comint-use-prompt-regexp nil)
    (setq-local inhibit-field-text-motion nil))
  ;; fix freezing in macos by creating your process using pipe
  ;; https://emacs.stackexchange.com/questions/40603/process-input-seems-buggy-in-emacs-on-os-x
  ;; (setq process-connection-type nil)
  (setq ess-ask-for-ess-directory nil
        ess-nuke-trailing-whitespace-p t
        ess-style 'RStudio-
        ess-local-process-name "R"
        ess-use-company nil
        ess-use-flymake nil
        ess-eval-visibly-p 'nowait
        ess-R-font-lock-keywords
        '((ess-R-fl-keyword:keywords   . t)
          (ess-R-fl-keyword:constants  . t)
          (ess-R-fl-keyword:modifiers  . t)
          (ess-R-fl-keyword:fun-defs   . t)
          (ess-R-fl-keyword:assign-ops . t)
          (ess-R-fl-keyword:%op%       . t)
          (ess-fl-keyword:fun-calls    . t)
          (ess-fl-keyword:delimiters . t)
          (ess-fl-keyword:operators . t)
          (ess-fl-keyword:numbers . t)
          (ess-R-fl-keyword:F&T . t)
          (ess-fl-keyword:= . t))))

(use-package ess-smart-assign
  :after ess
  :straight (ess-smart-assign :host github :repo "zhenhua-wang/ess-smart-assign"))
#+end_src

* Document
** Writing
*** Visual-fill-column
#+begin_src emacs-lisp
(use-package visual-fill-column
  :hook
  ((org-mode markdown-mode) . visual-fill-column-mode)
  ((helpful-mode ess-r-help-mode) . visual-fill-column-mode)
  :init
  (setq-default visual-fill-column-center-text t
                visual-fill-column-width 95))
#+end_src

*** Org-mode
**** main
#+begin_src emacs-lisp
(use-package org
  :straight (:type built-in)
  :mode (("\\.org$" . org-mode))
  :bind ((:map org-mode-map
               ("C-c =" . nil)
               ("C-," . nil)
               ("M-p" . org-previous-block)
               ("M-n" . org-next-block)
               ("M-s b" . org-cite-insert)))
  :hook
  (org-mode . org-num-mode)
  ((org-babel-after-execute org-mode) . org-redisplay-inline-images)
  :config
  (setq
   ;; init appearance
   org-num-face 'default
   org-ellipsis " ⇲"                    ; ▼, ↴, ⬎, ⤷, ⋱, ⤵, ⇲
   org-image-actual-width nil          ; use user defined image size
   org-hide-emphasis-markers t
   org-src-fontify-natively t
   org-fontify-quote-and-verse-blocks t
   org-edit-src-content-indentation 2
   org-support-shift-select 'always))

;; auto tangle
(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))

;; Table of contents
(use-package toc-org
  :hook ((org-mode . toc-org-mode)
         (markdown-mode . toc-org-mode)))
#+end_src

**** ox latex
requirements:
- export natbib: ~texlive-bibtexextra~
- highlight src code in html: ~htmlize.el~

#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
  ;; make LaTeX-mode formula larger
  (pcase system-type
    ((or 'gnu/linux 'windows-nt 'cygwin)
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.4)))
    ('darwin
     (progn
       (setq org-format-latex-options (plist-put org-format-latex-options :scale 2))
       (setq org-latex-create-formula-image-program 'dvisvgm))))
  ;; latex '(latex script entities)
  (setq org-highlight-latex-and-related '(latex entities))

  ;; org-export
  (setq org-latex-listings 't)
  ;; mapping jupyter-python to Python
  (add-to-list 'org-latex-listings-langs '(jupyter-python "Python"))
  (add-to-list 'org-latex-listings-langs '(ess-r "R"))
  (add-to-list 'org-latex-classes
               '("org-plain-latex"
                 "\\documentclass{article}
                  [NO-DEFAULT-PACKAGES]
                  [PACKAGES]
                  [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

**** theme
#+begin_src emacs-lisp
(use-package org-modern
  :hook
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda)
  :init
  (setq org-modern-star '("◉" "●")
        org-modern-hide-stars t
        org-modern-block-fringe nil
        org-modern-table t
        org-modern-table-vertical 3
        org-modern-table-horizontal 1
        org-modern-todo t
        org-modern-todo-faces
        '(("TODO" . (:inherit fixed-pitch :foreground "white" :background "#B25068" :weight bold))
          ("DONE" . (:inherit fixed-pitch :foreground "black" :background "#6CC4A1" :weight bold)))))

(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autolinks t
        org-appear-autosubmarkers t
        org-appear-autoentities t
        org-appear-autokeywords t
        org-appear-inside-latex t))
#+end_src

**** agenda
#+begin_src emacs-lisp
(defun zw/git-add-commit-push-agenda ()
  (interactive)
  (shell-command "cd ~/Documents/Agenda && git add *")
  (shell-command "cd ~/Documents/Agenda && git commit -m 'Updated all files.'")
  (shell-command "cd ~/Documents/Agenda && git push")
  (message "Agenda pushed!"))

(defun zw/git-pull-agenda ()
  (interactive)
  (shell-command "cd ~/Documents/Agenda && git pull")
  (message "Agenda pulled!"))

;; agenda keys
(bind-keys :prefix-map zw/org-agenda-map
           :prefix "<f12>"
           ("<down>" . zw/git-pull-agenda)
           ("<up>" . zw/git-add-commit-push-agenda)
           ("<f12>" . (lambda (&optional arg)
                        (interactive "P")
                        (org-agenda arg "d"))))

(with-eval-after-load 'org
  (add-hook 'org-agenda-mode-hook 'visual-fill-column-mode)
  (add-hook 'org-agenda-mode-hook
            (lambda ()
              (bind-keys :map org-agenda-mode-map
                         ("s-q" . org-agenda-exit)
                         ("q" . org-agenda-exit))))
  ;; agenda settings
  (setq org-agenda-files '("~/Documents/Agenda/Work.org"))
  ;; default agenda
  (setq org-log-done 'time
        org-agenda-window-setup 'only-window
        org-agenda-restore-windows-after-quit t
        org-agenda-overriding-header "🗓️ Agenda"
        org-agenda-block-separator ?-
        org-agenda-format-date "%a. %b %d %Y"
        org-agenda-time-grid
        '((daily today require-timed)
          (800 1000 1200 1400 1600 1800 2000)
          "" "┈┈┈┈┈┈┈┈┈┈┈┈┈")
        org-agenda-current-time-string
        "ᐊ┈┈┈┈┈┈┈ Now")
  ;; custom agenda
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "")
            (alltodo "" ((org-agenda-overriding-header "\n⚡ To Do")
                         (org-agenda-sorting-strategy '(priority-down))
                         (org-agenda-todo-keyword-format ""))))))))
#+end_src

**** custom functions
#+begin_src emacs-lisp
(defun zw/org-fold-all-but-current ()
  (interactive)
  (org-remove-occur-highlights)
  (org-overview)
  (org-reveal))
#+end_src

*** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :defer t
  :commands (markdown-mode gfm-mode)
  :init
  (setq markdown-enable-math t
        markdown-enable-wiki-links t
        markdown-italic-underscore t
        markdown-make-gfm-checkboxes-buttons t
        markdown-gfm-uppercase-checkbox t
        markdown-fontify-code-blocks-natively t
        markdown-code-block-braces t
        markdown-regex-header-setext nil
        markdown-header-scaling t
        markdown-asymmetric-header t)
  (defun zw/markdown-toggle-markup-hiding ()
    (interactive)
    (markdown-toggle-markup-hiding)
    (remove-from-invisibility-spec 'markdown-markup))
  :config
  (add-to-list 'markdown-code-lang-modes '("r" . ess-r-mode)))
#+end_src

*** Latex
#+begin_src emacs-lisp
;; latex
(use-package tex
  :straight auctex
  :commands (latex-mode LaTeX-mode)
  :init
  (setq TeX-PDF-mode t
        TeX-parse-self t
        TeX-auto-save t
        TeX-insert-braces nil
        TeX-auto-untabify t
        TeX-save-query nil
        TeX-source-correlate-mode t
        TeX-source-correlate-method 'synctex
        TeX-source-correlate-start-server t
        TeX-view-program-selection '((output-pdf "PDF Tools")))
  :config
  ;; revert the PDF-buffer after the TeX compilation has finished
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))

(use-package auctex-latexmk
  :after tex
  :init
  :hook ((latex-mode LaTeX-mode) .
         (lambda ()
           ;; Set LatexMk as the default.
           (setq TeX-command-default "LatexMk")))
  :config
  ;; Pass the -pdf flag when TeX-PDF-mode is active.
  (setq auctex-latexmk-inherit-TeX-PDF-mode t)
  ;; Add LatexMk as a TeX target.
  (auctex-latexmk-setup))

(use-package reftex
  :hook (LaTeX-mode . reftex-mode)
  :bind ((:map reftex-mode-map
               ("s-s" . zw/latex-rescan-on-save)
               ("C-x C-s" . zw/latex-rescan-on-save)))
  :config
  (defun zw/latex-rescan-on-save ()
    (interactive)
    (reftex-reset-mode)
    (save-buffer))
  (setq reftex-plug-into-AUCTeX t
        reftex-toc-split-windows-fraction 0.2
        reftex-toc-split-windows-horizontally t))
#+end_src

** Literate Programming
*** Org-babel
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; init org-babel
  (setq org-src-window-setup 'split-window-below
        org-src-preserve-indentation t      ; helps to indent python code in org mode
        org-confirm-babel-evaluate nil
        org-src-tab-acts-natively t)

  ;; defer load org babel languages
  (require 'ob-teximg)
  (use-package ob-lisp
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:lisp))
  (use-package ob-latex
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:latex))
  (use-package ob-R
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:R))
  (use-package ob-python
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:python))
  (use-package ob-shell
    :defer t
    :straight (:type built-in)
    :commands (org-babel-execute:sh))

  ;; alias ess-r to R
  (defalias 'org-babel-execute:ess-r 'org-babel-execute:R)
  (defalias 'org-babel-ess-r-initiate-session
    'org-babel-R-initiate-session))
#+end_src

*** Code-cells
#+begin_src emacs-lisp
(use-package code-cells
  :hook (python-mode . code-cells-mode-maybe)
  :bind ((:map code-cells-mode-map
               ("C-c C-e" . zw/jupyter-export-to)
               ("M-p" . code-cells-backward-cell)
               ("M-n" . code-cells-forward-cell)))
  :config
  (defun zw/jupyter-export-to (file-type)
    (interactive
     (list (completing-read "jupyter export to: "
                            '("pdf" "html") nil t)))
    (when (string= (file-name-extension buffer-file-name) "ipynb")
      (async-shell-command
       (concat "jupyter nbconvert --execute --to " file-type " "
               (shell-quote-argument buffer-file-name))))))
#+end_src

*** Jupyter
#+begin_src emacs-lisp
(use-package jupyter
  :defer t)

(use-package ob-jupyter
  :defer t
  :straight (:type built-in)
  :commands (org-babel-execute:jupyter-python)
  :init
  ;; add ob-jupyter
  (dolist (lang '(python))
    (cl-pushnew (cons (format "jupyter-%s" lang) lang)
                org-src-lang-modes :key #'car))
  ;; default headers
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:session . "py")
                                                       (:kernel . "python3")))
  ;; enable jupyter-org-interaction-mode
  (advice-add #'org-babel-jupyter-initiate-session :after
              (lambda (&optional SESSION PARAMS)
                (jupyter-org-interaction-mode)))
  :config
  (defun zw/jupyter-send-block ()
    (interactive)
    (jupyter-eval-string (zw/python-region-or-block-string
                          'org-forward-paragraph
                          'org-backward-paragraph))
    (sit-for 0.1)
    (goto-char (region-end))
    (deactivate-mark))
  (jupyter-org-define-key (kbd "C-c C-c") #'zw/jupyter-send-block))
#+end_src

*** Polymode
#+begin_src emacs-lisp
(use-package polymode
  :commands polymode-mode
  :hook (polymode-init-inner . (lambda ()
                                 (display-line-numbers-mode 0)
                                 (outline-minor-mode 0)
                                 (setq-local outline-minor-mode-use-buttons nil)))
  :bind ((:map polymode-mode-map
               ("C-c C-e" . polymode-export)
               ("C-c C-b" . polymode-eval-buffer)
               ("M-p" . polymode-previous-chunk)
               ("M-n" . polymode-next-chunk)))
  :init
  (setq poly-lock-allow-fontification t
        poly-lock-allow-background-adjustment t
        ;; disable this for now because of reverse-typing issue in poly-R
        polymode-lsp-integration nil)
  :config
  ;; run kill-buffer in master buffer, which solves the font lock issue
  (pm-around-advice #'kill-buffer #'polymode-with-current-base-buffer)
  ;; lsp integration
  (pm-around-advice 'lsp--buffer-content #'polymode-lsp-buffer-content))

(use-package poly-rmarkdown
  :straight '(poly-rmarkdown :host github :repo "zhenhua-wang/poly-rmarkdown")
  :commands (poly-rmarkdown-mode))
#+end_src

** Reader
#+begin_src emacs-lisp
;; pdf-tools need to be deleted and reinstalled after after emacs update
(use-package pdf-tools
  :bind ((:map pdf-view-mode-map
               ("C-s" . isearch-forward)
               ("s-f" . isearch-forward)
               ("s-=" . pdf-view-enlarge)
               ("s-+" . pdf-view-enlarge)
               ("s--" . pdf-view-shrink)
               ("j" . pdf-view-next-line-or-next-page)
               ("k" . pdf-view-previous-line-or-previous-page)))
  :init
  (setq pdf-view-display-size 'fit-page
        pdf-view-use-imagemagick nil
        pdf-view-continuous nil
        pdf-view-use-scaling t
        pdf-annot-activate-created-annotations t)
  (pdf-loader-install))
#+end_src

** Spell checker
#+begin_src emacs-lisp
;; On-the-fly spell checker
(use-package flyspell
  :straight (:type built-in)
  :diminish
  :hook (((text-mode outline-mode) . flyspell-mode)
         (prog-mode . flyspell-prog-mode))
  :init (setq flyspell-issue-message-flag nil
              flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face)
              ispell-program-name "aspell"
              ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together")))

(use-package flyspell-correct
  :after flyspell
  :bind ((:map flyspell-mode-map ("M-$" . flyspell-correct-at-point))))
#+end_src

